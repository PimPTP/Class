
Cl7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ccc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f54  08004f54  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f5c  08004f5c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000005c  08004fc0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004fc0  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d6ef  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e92  00000000  00000000  0002d7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002f650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e8  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e3c  00000000  00000000  00030888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cff6  00000000  00000000  000556c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e97c7  00000000  00000000  000626ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e38  00000000  00000000  0014be84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0014ecbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004e94 	.word	0x08004e94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004e94 	.word	0x08004e94

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fb48 	bl	8000c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f81d 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f8e3 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 f8af 	bl	8000740 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005e2:	f000 f863 	bl	80006ac <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t text[] = "HELLO FIBO";
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <main+0x40>)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ec:	c303      	stmia	r3!, {r0, r1}
 80005ee:	801a      	strh	r2, [r3, #0]
 80005f0:	3302      	adds	r3, #2
 80005f2:	0c12      	lsrs	r2, r2, #16
 80005f4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&hlpuart1, text, 11, 10);
 80005f6:	1d39      	adds	r1, r7, #4
 80005f8:	230a      	movs	r3, #10
 80005fa:	220b      	movs	r2, #11
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <main+0x44>)
 80005fe:	f002 fa3d 	bl	8002a7c <HAL_UART_Transmit>

  //UARTInterruptConfig();
  UARTDMAConfig();
 8000602:	f000 f955 	bl	80008b0 <UARTDMAConfig>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //UARTPollingMethod();
	  DummyTask();
 8000606:	f000 f93b 	bl	8000880 <DummyTask>
 800060a:	e7fc      	b.n	8000606 <main+0x3a>
 800060c:	08004eac 	.word	0x08004eac
 8000610:	20000078 	.word	0x20000078

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2238      	movs	r2, #56	; 0x38
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 ffb2 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000636:	2000      	movs	r0, #0
 8000638:	f001 f9a0 	bl	800197c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2340      	movs	r3, #64	; 0x40
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000656:	2355      	movs	r3, #85	; 0x55
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0318 	add.w	r3, r7, #24
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fa3a 	bl	8001ae4 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000676:	f000 f94f 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fd38 	bl	8002108 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069e:	f000 f93b 	bl	8000918 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <MX_LPUART1_UART_Init+0x90>)
 80006b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f002 f974 	bl	80029dc <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f90d 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	f003 fe58 	bl	80043b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800070c:	f000 f904 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f003 fe8d 	bl	8004432 <HAL_UARTEx_SetRxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800071e:	f000 f8fb 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_LPUART1_UART_Init+0x8c>)
 8000724:	f003 fe0e 	bl	8004344 <HAL_UARTEx_DisableFifoMode>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800072e:	f000 f8f3 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000078 	.word	0x20000078
 800073c:	40008000 	.word	0x40008000

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_DMA_Init+0x60>)
 8000748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_DMA_Init+0x60>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6493      	str	r3, [r2, #72]	; 0x48
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_DMA_Init+0x60>)
 8000754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_DMA_Init+0x60>)
 8000760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <MX_DMA_Init+0x60>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6493      	str	r3, [r2, #72]	; 0x48
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_DMA_Init+0x60>)
 800076c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200b      	movs	r0, #11
 800077c:	f000 fbbf 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000780:	200b      	movs	r0, #11
 8000782:	f000 fbd6 	bl	8000f32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	200c      	movs	r0, #12
 800078c:	f000 fbb7 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000790:	200c      	movs	r0, #12
 8000792:	f000 fbce 	bl	8000f32 <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a2e      	ldr	r2, [pc, #184]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a28      	ldr	r2, [pc, #160]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0320 	and.w	r3, r3, #32
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b23      	ldr	r3, [pc, #140]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a22      	ldr	r2, [pc, #136]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_GPIO_Init+0xd4>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_GPIO_Init+0xd4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2120      	movs	r1, #32
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f001 f855 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <MX_GPIO_Init+0xd8>)
 800083e:	f000 fec5 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000842:	2320      	movs	r3, #32
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f000 feb6 	bl	80015cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2028      	movs	r0, #40	; 0x28
 8000866:	f000 fb4a 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800086a:	2028      	movs	r0, #40	; 0x28
 800086c:	f000 fb61 	bl	8000f32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	48000800 	.word	0x48000800

08000880 <DummyTask>:
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 10);
	}
}

void DummyTask()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick()>=timestamp)
 8000884:	f000 fa54 	bl	8000d30 <HAL_GetTick>
 8000888:	4602      	mov	r2, r0
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <DummyTask+0x2c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d30a      	bcc.n	80008a8 <DummyTask+0x28>
	{
		timestamp = HAL_GetTick()+100;
 8000892:	f000 fa4d 	bl	8000d30 <HAL_GetTick>
 8000896:	4603      	mov	r3, r0
 8000898:	3364      	adds	r3, #100	; 0x64
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <DummyTask+0x2c>)
 800089c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800089e:	2120      	movs	r1, #32
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f001 f82c 	bl	8001900 <HAL_GPIO_TogglePin>
	}
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000208 	.word	0x20000208

080008b0 <UARTDMAConfig>:
	//start UART in Interrupt Mode
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
}

void UARTDMAConfig()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 10);
 80008b4:	220a      	movs	r2, #10
 80008b6:	4903      	ldr	r1, [pc, #12]	; (80008c4 <UARTDMAConfig+0x14>)
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <UARTDMAConfig+0x18>)
 80008ba:	f002 f9ed 	bl	8002c98 <HAL_UART_Receive_DMA>
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200001cc 	.word	0x200001cc
 80008c8:	20000078 	.word	0x20000078

080008cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a0c      	ldr	r2, [pc, #48]	; (8000908 <HAL_UART_RxCpltCallback+0x3c>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d111      	bne.n	8000900 <HAL_UART_RxCpltCallback+0x34>
	{
		//(for string only) Add string stop symbol \0 to end string
		RxBuffer[10] = '\0';
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_UART_RxCpltCallback+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	729a      	strb	r2, [r3, #10]

		//return received char
		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_UART_RxCpltCallback+0x40>)
 80008e4:	490a      	ldr	r1, [pc, #40]	; (8000910 <HAL_UART_RxCpltCallback+0x44>)
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <HAL_UART_RxCpltCallback+0x48>)
 80008e8:	f003 fe30 	bl	800454c <siprintf>
		//HAL_UART_Transmit_IT(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <HAL_UART_RxCpltCallback+0x48>)
 80008ee:	f7ff fc97 	bl	8000220 <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	4906      	ldr	r1, [pc, #24]	; (8000914 <HAL_UART_RxCpltCallback+0x48>)
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <HAL_UART_RxCpltCallback+0x3c>)
 80008fc:	f002 f94c 	bl	8002b98 <HAL_UART_Transmit_DMA>

		//recall Receive
		//HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 10);
	}
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000078 	.word	0x20000078
 800090c:	200001cc 	.word	0x200001cc
 8000910:	08004eb8 	.word	0x08004eb8
 8000914:	200001e0 	.word	0x200001e0

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	; 0x60
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	; 0x58
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800095a:	f001 f8b3 	bl	8001ac4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b09e      	sub	sp, #120	; 0x78
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	2254      	movs	r2, #84	; 0x54
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fdfd 	bl	800458c <memset>
  if(huart->Instance==LPUART1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a4d      	ldr	r2, [pc, #308]	; (8000acc <HAL_UART_MspInit+0x160>)
 8000998:	4293      	cmp	r3, r2
 800099a:	f040 8092 	bne.w	8000ac2 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800099e:	2320      	movs	r3, #32
 80009a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fdc8 	bl	8002540 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009b6:	f7ff ffaf 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009ba:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <HAL_UART_MspInit+0x164>)
 80009bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009be:	4a44      	ldr	r2, [pc, #272]	; (8000ad0 <HAL_UART_MspInit+0x164>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009c6:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <HAL_UART_MspInit+0x164>)
 80009c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <HAL_UART_MspInit+0x164>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a3e      	ldr	r2, [pc, #248]	; (8000ad0 <HAL_UART_MspInit+0x164>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <HAL_UART_MspInit+0x164>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009ea:	230c      	movs	r3, #12
 80009ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009fa:	230c      	movs	r3, #12
 80009fc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a02:	4619      	mov	r1, r3
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f000 fde0 	bl	80015cc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a0e:	4a32      	ldr	r2, [pc, #200]	; (8000ad8 <HAL_UART_MspInit+0x16c>)
 8000a10:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a14:	2222      	movs	r2, #34	; 0x22
 8000a16:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a30:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000a36:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000a42:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a44:	f000 fa90 	bl	8000f68 <HAL_DMA_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000a4e:	f7ff ff63 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <HAL_UART_MspInit+0x168>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a62:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <HAL_UART_MspInit+0x174>)
 8000a64:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a68:	2223      	movs	r2, #35	; 0x23
 8000a6a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a6e:	2210      	movs	r2, #16
 8000a70:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a7a:	2280      	movs	r2, #128	; 0x80
 8000a7c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000a96:	4811      	ldr	r0, [pc, #68]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000a98:	f000 fa66 	bl	8000f68 <HAL_DMA_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000aa2:	f7ff ff39 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000aaa:	67da      	str	r2, [r3, #124]	; 0x7c
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <HAL_UART_MspInit+0x170>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	205b      	movs	r0, #91	; 0x5b
 8000ab8:	f000 fa21 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000abc:	205b      	movs	r0, #91	; 0x5b
 8000abe:	f000 fa38 	bl	8000f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3778      	adds	r7, #120	; 0x78
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40008000 	.word	0x40008000
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	2000010c 	.word	0x2000010c
 8000ad8:	40020008 	.word	0x40020008
 8000adc:	2000016c 	.word	0x2000016c
 8000ae0:	4002001c 	.word	0x4002001c

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f8ec 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <DMA1_Channel1_IRQHandler+0x10>)
 8000b3e:	f000 fbf6 	bl	800132e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000010c 	.word	0x2000010c

08000b4c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <DMA1_Channel2_IRQHandler+0x10>)
 8000b52:	f000 fbec 	bl	800132e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000016c 	.word	0x2000016c

08000b60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b68:	f000 fee4 	bl	8001934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <LPUART1_IRQHandler+0x10>)
 8000b76:	f002 f8db 	bl	8002d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000078 	.word	0x20000078

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b8c:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <_sbrk+0x5c>)
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <_sbrk+0x60>)
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <_sbrk+0x64>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <_sbrk+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d207      	bcs.n	8000bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb4:	f003 fcf2 	bl	800459c <__errno>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	220c      	movs	r2, #12
 8000bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	e009      	b.n	8000bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <_sbrk+0x64>)
 8000bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20020000 	.word	0x20020000
 8000be4:	00000400 	.word	0x00000400
 8000be8:	2000020c 	.word	0x2000020c
 8000bec:	20000360 	.word	0x20000360

08000bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <SystemInit+0x20>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <SystemInit+0x20>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c18:	f7ff ffea 	bl	8000bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <LoopForever+0xe>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <LoopForever+0x16>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c42:	f003 fcb1 	bl	80045a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c46:	f7ff fcc1 	bl	80005cc <main>

08000c4a <LoopForever>:

LoopForever:
    b LoopForever
 8000c4a:	e7fe      	b.n	8000c4a <LoopForever>
  ldr   r0, =_estack
 8000c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c58:	08004f64 	.word	0x08004f64
  ldr r2, =_sbss
 8000c5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c60:	2000035c 	.word	0x2000035c

08000c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC1_2_IRQHandler>

08000c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f000 f939 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c76:	2000      	movs	r0, #0
 8000c78:	f000 f80e 	bl	8000c98 <HAL_InitTick>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	e001      	b.n	8000c8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c88:	f7ff fe4c 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_InitTick+0x68>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d022      	beq.n	8000cf2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_InitTick+0x6c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_InitTick+0x68>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f944 	bl	8000f4e <HAL_SYSTICK_Config>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10f      	bne.n	8000cec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b0f      	cmp	r3, #15
 8000cd0:	d809      	bhi.n	8000ce6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cda:	f000 f910 	bl	8000efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_InitTick+0x70>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	e007      	b.n	8000cf6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e004      	b.n	8000cf6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e001      	b.n	8000cf6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000004 	.word	0x20000004

08000d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x1c>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_IncTick+0x20>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a03      	ldr	r2, [pc, #12]	; (8000d28 <HAL_IncTick+0x1c>)
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000210 	.word	0x20000210
 8000d2c:	20000008 	.word	0x20000008

08000d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_GetTick+0x14>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000210 	.word	0x20000210

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff29 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff40 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff90 	bl	8000e3c <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5f 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff33 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffa4 	bl	8000ea4 <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e08d      	b.n	8001096 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HAL_DMA_Init+0x138>)
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d80f      	bhi.n	8000fa6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <HAL_DMA_Init+0x13c>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a45      	ldr	r2, [pc, #276]	; (80010a8 <HAL_DMA_Init+0x140>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	009a      	lsls	r2, r3, #2
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a42      	ldr	r2, [pc, #264]	; (80010ac <HAL_DMA_Init+0x144>)
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa4:	e00e      	b.n	8000fc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_DMA_Init+0x148>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a3d      	ldr	r2, [pc, #244]	; (80010a8 <HAL_DMA_Init+0x140>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	009a      	lsls	r2, r3, #2
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a3c      	ldr	r2, [pc, #240]	; (80010b4 <HAL_DMA_Init+0x14c>)
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 fa76 	bl	8001508 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001024:	d102      	bne.n	800102c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001040:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d010      	beq.n	800106c <HAL_DMA_Init+0x104>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b04      	cmp	r3, #4
 8001050:	d80c      	bhi.n	800106c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fa96 	bl	8001584 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	e008      	b.n	800107e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020407 	.word	0x40020407
 80010a4:	bffdfff8 	.word	0xbffdfff8
 80010a8:	cccccccd 	.word	0xcccccccd
 80010ac:	40020000 	.word	0x40020000
 80010b0:	bffdfbf8 	.word	0xbffdfbf8
 80010b4:	40020400 	.word	0x40020400

080010b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_DMA_Start_IT+0x20>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e066      	b.n	80011a6 <HAL_DMA_Start_IT+0xee>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d155      	bne.n	8001198 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2202      	movs	r2, #2
 80010f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2200      	movs	r2, #0
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f9bb 	bl	800148c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 020e 	orr.w	r2, r2, #14
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e00f      	b.n	8001150 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0204 	bic.w	r2, r2, #4
 800113e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 020a 	orr.w	r2, r2, #10
 800114e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800116c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001184:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e005      	b.n	80011a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80011a0:	2302      	movs	r3, #2
 80011a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b085      	sub	sp, #20
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d005      	beq.n	80011d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2204      	movs	r2, #4
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e037      	b.n	8001242 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 020e 	bic.w	r2, r2, #14
 80011e0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011f0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 021f 	and.w	r2, r3, #31
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800121e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001236:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001240:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d00d      	beq.n	8001294 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2204      	movs	r2, #4
 800127c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e047      	b.n	8001324 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 020e 	bic.w	r2, r2, #14
 80012a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00c      	beq.n	8001304 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001302:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
    }
  }
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b084      	sub	sp, #16
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2204      	movs	r2, #4
 8001350:	409a      	lsls	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d026      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x7a>
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d021      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	2b00      	cmp	r3, #0
 8001370:	d107      	bne.n	8001382 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0204 	bic.w	r2, r2, #4
 8001380:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 021f 	and.w	r2, r3, #31
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2104      	movs	r1, #4
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	2b00      	cmp	r3, #0
 800139c:	d071      	beq.n	8001482 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80013a6:	e06c      	b.n	8001482 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	2202      	movs	r2, #2
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d02e      	beq.n	800141a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d029      	beq.n	800141a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10b      	bne.n	80013ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 020a 	bic.w	r2, r2, #10
 80013e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	2102      	movs	r1, #2
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	2b00      	cmp	r3, #0
 800140e:	d038      	beq.n	8001482 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001418:	e033      	b.n	8001482 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	2208      	movs	r2, #8
 8001424:	409a      	lsls	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d02a      	beq.n	8001484 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d025      	beq.n	8001484 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 020e 	bic.w	r2, r2, #14
 8001446:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f202 	lsl.w	r2, r1, r2
 800145a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001476:	2b00      	cmp	r3, #0
 8001478:	d004      	beq.n	8001484 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001482:	bf00      	nop
 8001484:	bf00      	nop
}
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f003 021f 	and.w	r2, r3, #31
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	2101      	movs	r1, #1
 80014c4:	fa01 f202 	lsl.w	r2, r1, r2
 80014c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b10      	cmp	r3, #16
 80014d8:	d108      	bne.n	80014ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014ea:	e007      	b.n	80014fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	60da      	str	r2, [r3, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001518:	429a      	cmp	r2, r3
 800151a:	d802      	bhi.n	8001522 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e001      	b.n	8001526 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001524:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	3b08      	subs	r3, #8
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	009a      	lsls	r2, r3, #2
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4413      	add	r3, r2
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001552:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	2201      	movs	r2, #1
 800155c:	409a      	lsls	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001562:	bf00      	nop
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40020407 	.word	0x40020407
 8001574:	40020800 	.word	0x40020800
 8001578:	40020820 	.word	0x40020820
 800157c:	cccccccd 	.word	0xcccccccd
 8001580:	40020880 	.word	0x40020880

08001584 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015a6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f003 031f 	and.w	r3, r3, #31
 80015b0:	2201      	movs	r2, #1
 80015b2:	409a      	lsls	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	1000823f 	.word	0x1000823f
 80015c8:	40020940 	.word	0x40020940

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015da:	e15a      	b.n	8001892 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2101      	movs	r1, #1
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 814c 	beq.w	800188c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d005      	beq.n	800160c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001608:	2b02      	cmp	r3, #2
 800160a:	d130      	bne.n	800166e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001642:	2201      	movs	r2, #1
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	f003 0201 	and.w	r2, r3, #1
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b03      	cmp	r3, #3
 8001678:	d017      	beq.n	80016aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d123      	bne.n	80016fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	08da      	lsrs	r2, r3, #3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3208      	adds	r2, #8
 80016f8:	6939      	ldr	r1, [r7, #16]
 80016fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0203 	and.w	r2, r3, #3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80a6 	beq.w	800188c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001740:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 8001742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001744:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6613      	str	r3, [r2, #96]	; 0x60
 800174c:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_GPIO_Init+0x2e4>)
 800174e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001758:	4a56      	ldr	r2, [pc, #344]	; (80018b4 <HAL_GPIO_Init+0x2e8>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3302      	adds	r3, #2
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001782:	d01f      	beq.n	80017c4 <HAL_GPIO_Init+0x1f8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a4c      	ldr	r2, [pc, #304]	; (80018b8 <HAL_GPIO_Init+0x2ec>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d019      	beq.n	80017c0 <HAL_GPIO_Init+0x1f4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a4b      	ldr	r2, [pc, #300]	; (80018bc <HAL_GPIO_Init+0x2f0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d013      	beq.n	80017bc <HAL_GPIO_Init+0x1f0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a4a      	ldr	r2, [pc, #296]	; (80018c0 <HAL_GPIO_Init+0x2f4>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d00d      	beq.n	80017b8 <HAL_GPIO_Init+0x1ec>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <HAL_GPIO_Init+0x2f8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d007      	beq.n	80017b4 <HAL_GPIO_Init+0x1e8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a48      	ldr	r2, [pc, #288]	; (80018c8 <HAL_GPIO_Init+0x2fc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_GPIO_Init+0x1e4>
 80017ac:	2305      	movs	r3, #5
 80017ae:	e00a      	b.n	80017c6 <HAL_GPIO_Init+0x1fa>
 80017b0:	2306      	movs	r3, #6
 80017b2:	e008      	b.n	80017c6 <HAL_GPIO_Init+0x1fa>
 80017b4:	2304      	movs	r3, #4
 80017b6:	e006      	b.n	80017c6 <HAL_GPIO_Init+0x1fa>
 80017b8:	2303      	movs	r3, #3
 80017ba:	e004      	b.n	80017c6 <HAL_GPIO_Init+0x1fa>
 80017bc:	2302      	movs	r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x1fa>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_GPIO_Init+0x1fa>
 80017c4:	2300      	movs	r3, #0
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	f002 0203 	and.w	r2, r2, #3
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d6:	4937      	ldr	r1, [pc, #220]	; (80018b4 <HAL_GPIO_Init+0x2e8>)
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_GPIO_Init+0x300>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001808:	4a30      	ldr	r2, [pc, #192]	; (80018cc <HAL_GPIO_Init+0x300>)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001832:	4a26      	ldr	r2, [pc, #152]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_GPIO_Init+0x300>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_GPIO_Init+0x300>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001862:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001886:	4a11      	ldr	r2, [pc, #68]	; (80018cc <HAL_GPIO_Init+0x300>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3301      	adds	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	f47f ae9d 	bne.w	80015dc <HAL_GPIO_Init+0x10>
  }
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	48000c00 	.word	0x48000c00
 80018c4:	48001000 	.word	0x48001000
 80018c8:	48001400 	.word	0x48001400
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001912:	887a      	ldrh	r2, [r7, #2]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43d9      	mvns	r1, r3
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	400b      	ands	r3, r1
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f806 	bl	8001964 <HAL_GPIO_EXTI_Callback>
  }
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d141      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800198a:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d131      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001998:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800199e:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a8:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b0:	4a41      	ldr	r2, [pc, #260]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2232      	movs	r2, #50	; 0x32
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	0c9b      	lsrs	r3, r3, #18
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ce:	e002      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e2:	d102      	bne.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f2      	bne.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d158      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e057      	b.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a0c:	e04d      	b.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d141      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d131      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2a:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2232      	movs	r2, #50	; 0x32
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	0c9b      	lsrs	r3, r3, #18
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5a:	e002      	b.n	8001a62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6e:	d102      	bne.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f2      	bne.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a82:	d112      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e011      	b.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a98:	e007      	b.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad2:	6093      	str	r3, [r2, #8]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e2fe      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d075      	beq.n	8001bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b02:	4b97      	ldr	r3, [pc, #604]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	4b94      	ldr	r3, [pc, #592]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3e>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_OscConfig+0x44>
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b8d      	ldr	r3, [pc, #564]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05b      	beq.n	8001bec <HAL_RCC_OscConfig+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d157      	bne.n	8001bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e2d9      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x74>
 8001b4a:	4b85      	ldr	r3, [pc, #532]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a84      	ldr	r2, [pc, #528]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7e      	ldr	r2, [pc, #504]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7b      	ldr	r2, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a77      	ldr	r2, [pc, #476]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b75      	ldr	r3, [pc, #468]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a74      	ldr	r2, [pc, #464]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f8c8 	bl	8000d30 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f8c4 	bl	8000d30 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e29e      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f8b4 	bl	8000d30 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f8b0 	bl	8000d30 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e28a      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bde:	4b60      	ldr	r3, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0xe8>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d075      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfa:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c04:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_OscConfig+0x136>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_OscConfig+0x13c>
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d11f      	bne.n	8001c60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x154>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e25d      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	061b      	lsls	r3, r3, #24
 8001c46:	4946      	ldr	r1, [pc, #280]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <HAL_RCC_OscConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f821 	bl	8000c98 <HAL_InitTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d043      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e249      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d023      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c68:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a3c      	ldr	r2, [pc, #240]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f85c 	bl	8000d30 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f858 	bl	8000d30 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e232      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	061b      	lsls	r3, r3, #24
 8001ca8:	492d      	ldr	r1, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
 8001cae:	e01a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2a      	ldr	r2, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f838 	bl	8000d30 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7ff f834 	bl	8000d30 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e20e      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1e0>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d041      	beq.n	8001d76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d00:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f811 	bl	8000d30 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff f80d 	bl	8000d30 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e1e7      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ef      	beq.n	8001d12 <HAL_RCC_OscConfig+0x22e>
 8001d32:	e020      	b.n	8001d76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7fe fff4 	bl	8000d30 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4a:	e00d      	b.n	8001d68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7fe fff0 	bl	8000d30 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d906      	bls.n	8001d68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1ca      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d68:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ea      	bne.n	8001d4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80a6 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d88:	4b84      	ldr	r3, [pc, #528]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2b4>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x2b6>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	4a7e      	ldr	r2, [pc, #504]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6593      	str	r3, [r2, #88]	; 0x58
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <HAL_RCC_OscConfig+0x4bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc6:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x4bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a75      	ldr	r2, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x4bc>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7fe ffad 	bl	8000d30 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7fe ffa9 	bl	8000d30 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e183      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dec:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x4bc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d108      	bne.n	8001e12 <HAL_RCC_OscConfig+0x32e>
 8001e00:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e10:	e024      	b.n	8001e5c <HAL_RCC_OscConfig+0x378>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d110      	bne.n	8001e3c <HAL_RCC_OscConfig+0x358>
 8001e1a:	4b60      	ldr	r3, [pc, #384]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	4a5e      	ldr	r2, [pc, #376]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	4a5a      	ldr	r2, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x378>
 8001e3c:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d016      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7fe ff64 	bl	8000d30 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7fe ff60 	bl	8000d30 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e138      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ed      	beq.n	8001e6c <HAL_RCC_OscConfig+0x388>
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7fe ff4d 	bl	8000d30 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7fe ff49 	bl	8000d30 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e121      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ed      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7fe ff1c 	bl	8000d30 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001efc:	f7fe ff18 	bl	8000d30 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0f2      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ef      	beq.n	8001efc <HAL_RCC_OscConfig+0x418>
 8001f1c:	e01b      	b.n	8001f56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7fe feff 	bl	8000d30 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f36:	f7fe fefb 	bl	8000d30 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0d5      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ef      	bne.n	8001f36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80c9 	beq.w	80020f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b0c      	cmp	r3, #12
 8001f6a:	f000 8083 	beq.w	8002074 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d15e      	bne.n	8002034 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe fed5 	bl	8000d30 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	e00c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe fed1 	bl	8000d30 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d905      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0ab      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa4:	4b55      	ldr	r3, [pc, #340]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ec      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb0:	4b52      	ldr	r3, [pc, #328]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b52      	ldr	r3, [pc, #328]	; (8002100 <HAL_RCC_OscConfig+0x61c>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6a11      	ldr	r1, [r2, #32]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fca:	0212      	lsls	r2, r2, #8
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fd2:	0852      	lsrs	r2, r2, #1
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	0552      	lsls	r2, r2, #21
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fde:	0852      	lsrs	r2, r2, #1
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	0652      	lsls	r2, r2, #25
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fea:	06d2      	lsls	r2, r2, #27
 8001fec:	430a      	orrs	r2, r1
 8001fee:	4943      	ldr	r1, [pc, #268]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a40      	ldr	r2, [pc, #256]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002000:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe fe90 	bl	8000d30 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe fe8c 	bl	8000d30 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e066      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x530>
 8002032:	e05e      	b.n	80020f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a30      	ldr	r2, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe fe76 	bl	8000d30 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe fe72 	bl	8000d30 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04c      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4924      	ldr	r1, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <HAL_RCC_OscConfig+0x620>)
 800206e:	4013      	ands	r3, r2
 8002070:	60cb      	str	r3, [r1, #12]
 8002072:	e03e      	b.n	80020f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e039      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	429a      	cmp	r2, r3
 8002092:	d12c      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	3b01      	subs	r3, #1
 80020a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d123      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11b      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d113      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	019f800c 	.word	0x019f800c
 8002104:	feeefffc 	.word	0xfeeefffc

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e11e      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b91      	ldr	r3, [pc, #580]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b8e      	ldr	r3, [pc, #568]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 020f 	bic.w	r2, r3, #15
 8002136:	498c      	ldr	r1, [pc, #560]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b8a      	ldr	r3, [pc, #552]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e106      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d073      	beq.n	8002244 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d129      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002164:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0f4      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002174:	f000 f99e 	bl	80024b4 <RCC_GetSysClockFreqFromPLLSource>
 8002178:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4a7c      	ldr	r2, [pc, #496]	; (8002370 <HAL_RCC_ClockConfig+0x268>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d93f      	bls.n	8002202 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002182:	4b7a      	ldr	r3, [pc, #488]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002196:	2b00      	cmp	r3, #0
 8002198:	d033      	beq.n	8002202 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d12f      	bne.n	8002202 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021a2:	4b72      	ldr	r3, [pc, #456]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021aa:	4a70      	ldr	r2, [pc, #448]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e024      	b.n	8002202 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0c6      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0be      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021e0:	f000 f8ce 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4a61      	ldr	r2, [pc, #388]	; (8002370 <HAL_RCC_ClockConfig+0x268>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d909      	bls.n	8002202 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f6:	4a5d      	ldr	r2, [pc, #372]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4957      	ldr	r1, [pc, #348]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002214:	f7fe fd8c 	bl	8000d30 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	e00a      	b.n	8002232 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7fe fd88 	bl	8000d30 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e095      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b4e      	ldr	r3, [pc, #312]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 020c 	and.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1eb      	bne.n	800221c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d023      	beq.n	8002298 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a42      	ldr	r2, [pc, #264]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002266:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002274:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800227c:	4a3b      	ldr	r2, [pc, #236]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800227e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b39      	ldr	r3, [pc, #228]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4936      	ldr	r1, [pc, #216]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
 8002296:	e008      	b.n	80022aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b80      	cmp	r3, #128	; 0x80
 800229c:	d105      	bne.n	80022aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4a32      	ldr	r2, [pc, #200]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80022a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d21d      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 020f 	bic.w	r2, r3, #15
 80022c0:	4929      	ldr	r1, [pc, #164]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fd32 	bl	8000d30 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fd2e 	bl	8000d30 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e03b      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1ed      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4917      	ldr	r1, [pc, #92]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490f      	ldr	r1, [pc, #60]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002332:	f000 f825 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490c      	ldr	r1, [pc, #48]	; (8002374 <HAL_RCC_ClockConfig+0x26c>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x270>)
 8002350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x274>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fc9e 	bl	8000c98 <HAL_InitTick>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40022000 	.word	0x40022000
 800236c:	40021000 	.word	0x40021000
 8002370:	04c4b400 	.word	0x04c4b400
 8002374:	08004ee0 	.word	0x08004ee0
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d102      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e047      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	e03e      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d136      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3301      	adds	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023d4:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023de:	68d2      	ldr	r2, [r2, #12]
 80023e0:	0a12      	lsrs	r2, r2, #8
 80023e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
      break;
 80023ec:	e00c      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f8:	68d2      	ldr	r2, [r2, #12]
 80023fa:	0a12      	lsrs	r2, r2, #8
 80023fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
      break;
 8002406:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0e5b      	lsrs	r3, r3, #25
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	e001      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002428:	693b      	ldr	r3, [r7, #16]
}
 800242a:	4618      	mov	r0, r3
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	00f42400 	.word	0x00f42400
 8002440:	016e3600 	.word	0x016e3600

08002444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4904      	ldr	r1, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	08004ef0 	.word	0x08004ef0

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800248c:	f7ff ffda 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0adb      	lsrs	r3, r3, #11
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	08004ef0 	.word	0x08004ef0

080024b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3301      	adds	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d10c      	bne.n	80024f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d8:	4a17      	ldr	r2, [pc, #92]	; (8002538 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e2:	68d2      	ldr	r2, [r2, #12]
 80024e4:	0a12      	lsrs	r2, r2, #8
 80024e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
    break;
 80024f0:	e00c      	b.n	800250c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024fc:	68d2      	ldr	r2, [r2, #12]
 80024fe:	0a12      	lsrs	r2, r2, #8
 8002500:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    break;
 800250a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0e5b      	lsrs	r3, r3, #25
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	3301      	adds	r3, #1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40021000 	.word	0x40021000
 8002538:	016e3600 	.word	0x016e3600
 800253c:	00f42400 	.word	0x00f42400

08002540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002548:	2300      	movs	r3, #0
 800254a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800254c:	2300      	movs	r3, #0
 800254e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8098 	beq.w	800268e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b40      	ldr	r3, [pc, #256]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	4a3f      	ldr	r2, [pc, #252]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6593      	str	r3, [r2, #88]	; 0x58
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800258a:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a39      	ldr	r2, [pc, #228]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002596:	f7fe fbcb 	bl	8000d30 <HAL_GetTick>
 800259a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800259c:	e009      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe fbc7 	bl	8000d30 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	74fb      	strb	r3, [r7, #19]
        break;
 80025b0:	e005      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ef      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d159      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01e      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d019      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fb87 	bl	8000d30 <HAL_GetTick>
 8002622:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002624:	e00b      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fb83 	bl	8000d30 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d902      	bls.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	74fb      	strb	r3, [r7, #19]
            break;
 800263c:	e006      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ec      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002668:	e008      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	74bb      	strb	r3, [r7, #18]
 800266e:	e005      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267c:	7c7b      	ldrb	r3, [r7, #17]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d105      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002682:	4ba7      	ldr	r3, [pc, #668]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4aa6      	ldr	r2, [pc, #664]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800269a:	4ba1      	ldr	r3, [pc, #644]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f023 0203 	bic.w	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	499d      	ldr	r1, [pc, #628]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026bc:	4b98      	ldr	r3, [pc, #608]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f023 020c 	bic.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4995      	ldr	r1, [pc, #596]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026de:	4b90      	ldr	r3, [pc, #576]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	498c      	ldr	r1, [pc, #560]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002700:	4b87      	ldr	r3, [pc, #540]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4984      	ldr	r1, [pc, #528]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002722:	4b7f      	ldr	r3, [pc, #508]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	497b      	ldr	r1, [pc, #492]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002744:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4973      	ldr	r1, [pc, #460]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002766:	4b6e      	ldr	r3, [pc, #440]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	496a      	ldr	r1, [pc, #424]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002788:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4962      	ldr	r1, [pc, #392]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027aa:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	4959      	ldr	r1, [pc, #356]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027cc:	4b54      	ldr	r3, [pc, #336]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	4951      	ldr	r1, [pc, #324]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ee:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	4948      	ldr	r1, [pc, #288]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4940      	ldr	r1, [pc, #256]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002848:	4b35      	ldr	r3, [pc, #212]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	4932      	ldr	r1, [pc, #200]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	4924      	ldr	r1, [pc, #144]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289e:	d105      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	4916      	ldr	r1, [pc, #88]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d6:	d105      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a10      	ldr	r2, [pc, #64]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d019      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4908      	ldr	r1, [pc, #32]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800290e:	d109      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a02      	ldr	r2, [pc, #8]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291a:	60d3      	str	r3, [r2, #12]
 800291c:	e002      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4926      	ldr	r1, [pc, #152]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800294e:	d105      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a20      	ldr	r2, [pc, #128]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	4918      	ldr	r1, [pc, #96]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d105      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002992:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029be:	d105      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000

080029dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e042      	b.n	8002a74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d106      	bne.n	8002a06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7fd ffb3 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2224      	movs	r2, #36	; 0x24
 8002a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 ffd6 	bl	80039d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fcd7 	bl	80033e0 <UART_SetConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e01b      	b.n	8002a74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f001 f855 	bl	8003b1c <UART_CheckIdleState>
 8002a72:	4603      	mov	r3, r0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d17b      	bne.n	8002b8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Transmit+0x26>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e074      	b.n	8002b90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe f93b 	bl	8000d30 <HAL_GetTick>
 8002aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad4:	d108      	bne.n	8002ae8 <HAL_UART_Transmit+0x6c>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d104      	bne.n	8002ae8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	e003      	b.n	8002af0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af0:	e030      	b.n	8002b54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2200      	movs	r2, #0
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f001 f8b7 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e03d      	b.n	8002b90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10b      	bne.n	8002b32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	e007      	b.n	8002b42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1c8      	bne.n	8002af2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f001 f880 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e006      	b.n	8002b90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
  }
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d167      	bne.n	8002c80 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_UART_Transmit_DMA+0x24>
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e060      	b.n	8002c82 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2221      	movs	r2, #33	; 0x21
 8002be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d028      	beq.n	8002c40 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf2:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <HAL_UART_Transmit_DMA+0xf4>)
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfa:	4a25      	ldr	r2, [pc, #148]	; (8002c90 <HAL_UART_Transmit_DMA+0xf8>)
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <HAL_UART_Transmit_DMA+0xfc>)
 8002c04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	4619      	mov	r1, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3328      	adds	r3, #40	; 0x28
 8002c1e:	461a      	mov	r2, r3
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	f7fe fa49 	bl	80010b8 <HAL_DMA_Start_IT>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2210      	movs	r2, #16
 8002c30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e020      	b.n	8002c82 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2240      	movs	r2, #64	; 0x40
 8002c46:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	613b      	str	r3, [r7, #16]
   return(result);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3308      	adds	r3, #8
 8002c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c68:	623a      	str	r2, [r7, #32]
 8002c6a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	69f9      	ldr	r1, [r7, #28]
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e5      	bne.n	8002c48 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3728      	adds	r7, #40	; 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	08003fe7 	.word	0x08003fe7
 8002c90:	08004081 	.word	0x08004081
 8002c94:	08004207 	.word	0x08004207

08002c98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	; 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cac:	2b20      	cmp	r3, #32
 8002cae:	d137      	bne.n	8002d20 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_UART_Receive_DMA+0x24>
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e030      	b.n	8002d22 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <HAL_UART_Receive_DMA+0x94>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d01f      	beq.n	8002d10 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d018      	beq.n	8002d10 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	613b      	str	r3, [r7, #16]
   return(result);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	623b      	str	r3, [r7, #32]
 8002cfe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	69f9      	ldr	r1, [r7, #28]
 8002d02:	6a3a      	ldr	r2, [r7, #32]
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e6      	bne.n	8002cde <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f001 f818 	bl	8003d4c <UART_Start_Receive_DMA>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	e000      	b.n	8002d22 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3728      	adds	r7, #40	; 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40008000 	.word	0x40008000

08002d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0ba      	sub	sp, #232	; 0xe8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002d5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002d5e:	4013      	ands	r3, r2
 8002d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11b      	bne.n	8002da4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d015      	beq.n	8002da4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 82e3 	beq.w	8003360 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
      }
      return;
 8002da2:	e2dd      	b.n	8003360 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8123 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002dae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002db2:	4b8d      	ldr	r3, [pc, #564]	; (8002fe8 <HAL_UART_IRQHandler+0x2b8>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002dba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dbe:	4b8b      	ldr	r3, [pc, #556]	; (8002fec <HAL_UART_IRQHandler+0x2bc>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 8116 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d011      	beq.n	8002df8 <HAL_UART_IRQHandler+0xc8>
 8002dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_UART_IRQHandler+0xf8>
 8002e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00b      	beq.n	8002e28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2202      	movs	r2, #2
 8002e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d011      	beq.n	8002e58 <HAL_UART_IRQHandler+0x128>
 8002e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2204      	movs	r2, #4
 8002e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f043 0202 	orr.w	r2, r3, #2
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002e70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002e74:	4b5c      	ldr	r3, [pc, #368]	; (8002fe8 <HAL_UART_IRQHandler+0x2b8>)
 8002e76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2208      	movs	r2, #8
 8002e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f043 0208 	orr.w	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x196>
 8002ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 8249 	beq.w	8003364 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d013      	beq.n	8002f06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d005      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d054      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fff5 	bl	8003f1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	d146      	bne.n	8002fcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3308      	adds	r3, #8
 8002f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3308      	adds	r3, #8
 8002f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1d9      	bne.n	8002f3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d017      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_UART_IRQHandler+0x2c0>)
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe f95b 	bl	8001260 <HAL_DMA_Abort_IT>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d019      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc2:	e00f      	b.n	8002fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f9f5 	bl	80033b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fca:	e00b      	b.n	8002fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f9f1 	bl	80033b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd2:	e007      	b.n	8002fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f9ed 	bl	80033b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002fe2:	e1bf      	b.n	8003364 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe4:	bf00      	nop
    return;
 8002fe6:	e1bd      	b.n	8003364 <HAL_UART_IRQHandler+0x634>
 8002fe8:	10000001 	.word	0x10000001
 8002fec:	04000120 	.word	0x04000120
 8002ff0:	08004287 	.word	0x08004287

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f040 8153 	bne.w	80032a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 814c 	beq.w	80032a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8145 	beq.w	80032a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2210      	movs	r2, #16
 8003020:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	f040 80bb 	bne.w	80031a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 818f 	beq.w	8003368 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003050:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003054:	429a      	cmp	r2, r3
 8003056:	f080 8187 	bcs.w	8003368 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003060:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 8087 	bne.w	8003186 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003084:	e853 3f00 	ldrex	r3, [r3]
 8003088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800308c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1da      	bne.n	8003078 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d4:	f023 0301 	bic.w	r3, r3, #1
 80030d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3308      	adds	r3, #8
 80030e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030f2:	e841 2300 	strex	r3, r2, [r1]
 80030f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e1      	bne.n	80030c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3308      	adds	r3, #8
 800311e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003122:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003124:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003128:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e3      	bne.n	80030fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003154:	f023 0310 	bic.w	r3, r3, #16
 8003158:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003166:	65bb      	str	r3, [r7, #88]	; 0x58
 8003168:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800316c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e4      	bne.n	8003144 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe f814 	bl	80011ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003198:	b29b      	uxth	r3, r3
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	b29b      	uxth	r3, r3
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f911 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031a6:	e0df      	b.n	8003368 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80d1 	beq.w	800336c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80031ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80cc 	beq.w	800336c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031f6:	647b      	str	r3, [r7, #68]	; 0x44
 80031f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e4      	bne.n	80031d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	623b      	str	r3, [r7, #32]
   return(result);
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3308      	adds	r3, #8
 800322e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003232:	633a      	str	r2, [r7, #48]	; 0x30
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e1      	bne.n	800320a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	60fb      	str	r3, [r7, #12]
   return(result);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0310 	bic.w	r3, r3, #16
 800326e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003280:	69b9      	ldr	r1, [r7, #24]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	e841 2300 	strex	r3, r2, [r1]
 8003288:	617b      	str	r3, [r7, #20]
   return(result);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e4      	bne.n	800325a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f893 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032a2:	e063      	b.n	800336c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_UART_IRQHandler+0x59e>
 80032b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f001 f81e 	bl	8004308 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032cc:	e051      	b.n	8003372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d014      	beq.n	8003304 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80032da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80032e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d03a      	beq.n	8003370 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
    }
    return;
 8003302:	e035      	b.n	8003370 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <HAL_UART_IRQHandler+0x5f4>
 8003310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 ffc8 	bl	80042b2 <UART_EndTransmit_IT>
    return;
 8003322:	e026      	b.n	8003372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d009      	beq.n	8003344 <HAL_UART_IRQHandler+0x614>
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003334:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fff7 	bl	8004330 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003342:	e016      	b.n	8003372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d010      	beq.n	8003372 <HAL_UART_IRQHandler+0x642>
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003354:	2b00      	cmp	r3, #0
 8003356:	da0c      	bge.n	8003372 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 ffdf 	bl	800431c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800335e:	e008      	b.n	8003372 <HAL_UART_IRQHandler+0x642>
      return;
 8003360:	bf00      	nop
 8003362:	e006      	b.n	8003372 <HAL_UART_IRQHandler+0x642>
    return;
 8003364:	bf00      	nop
 8003366:	e004      	b.n	8003372 <HAL_UART_IRQHandler+0x642>
      return;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <HAL_UART_IRQHandler+0x642>
      return;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <HAL_UART_IRQHandler+0x642>
    return;
 8003370:	bf00      	nop
  }
}
 8003372:	37e8      	adds	r7, #232	; 0xe8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e4:	b08c      	sub	sp, #48	; 0x30
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	431a      	orrs	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	4313      	orrs	r3, r2
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4baa      	ldr	r3, [pc, #680]	; (80036b8 <UART_SetConfig+0x2d8>)
 8003410:	4013      	ands	r3, r2
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003418:	430b      	orrs	r3, r1
 800341a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a9f      	ldr	r2, [pc, #636]	; (80036bc <UART_SetConfig+0x2dc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003448:	4313      	orrs	r3, r2
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003456:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003460:	430b      	orrs	r3, r1
 8003462:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	f023 010f 	bic.w	r1, r3, #15
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a90      	ldr	r2, [pc, #576]	; (80036c0 <UART_SetConfig+0x2e0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d125      	bne.n	80034d0 <UART_SetConfig+0xf0>
 8003484:	4b8f      	ldr	r3, [pc, #572]	; (80036c4 <UART_SetConfig+0x2e4>)
 8003486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b03      	cmp	r3, #3
 8003490:	d81a      	bhi.n	80034c8 <UART_SetConfig+0xe8>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <UART_SetConfig+0xb8>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034a9 	.word	0x080034a9
 800349c:	080034b9 	.word	0x080034b9
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034c1 	.word	0x080034c1
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ae:	e116      	b.n	80036de <UART_SetConfig+0x2fe>
 80034b0:	2302      	movs	r3, #2
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b6:	e112      	b.n	80036de <UART_SetConfig+0x2fe>
 80034b8:	2304      	movs	r3, #4
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034be:	e10e      	b.n	80036de <UART_SetConfig+0x2fe>
 80034c0:	2308      	movs	r3, #8
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c6:	e10a      	b.n	80036de <UART_SetConfig+0x2fe>
 80034c8:	2310      	movs	r3, #16
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ce:	e106      	b.n	80036de <UART_SetConfig+0x2fe>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a7c      	ldr	r2, [pc, #496]	; (80036c8 <UART_SetConfig+0x2e8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d138      	bne.n	800354c <UART_SetConfig+0x16c>
 80034da:	4b7a      	ldr	r3, [pc, #488]	; (80036c4 <UART_SetConfig+0x2e4>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d82d      	bhi.n	8003544 <UART_SetConfig+0x164>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <UART_SetConfig+0x110>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003525 	.word	0x08003525
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003545 	.word	0x08003545
 80034fc:	08003545 	.word	0x08003545
 8003500:	08003535 	.word	0x08003535
 8003504:	08003545 	.word	0x08003545
 8003508:	08003545 	.word	0x08003545
 800350c:	08003545 	.word	0x08003545
 8003510:	0800352d 	.word	0x0800352d
 8003514:	08003545 	.word	0x08003545
 8003518:	08003545 	.word	0x08003545
 800351c:	08003545 	.word	0x08003545
 8003520:	0800353d 	.word	0x0800353d
 8003524:	2300      	movs	r3, #0
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800352a:	e0d8      	b.n	80036de <UART_SetConfig+0x2fe>
 800352c:	2302      	movs	r3, #2
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003532:	e0d4      	b.n	80036de <UART_SetConfig+0x2fe>
 8003534:	2304      	movs	r3, #4
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353a:	e0d0      	b.n	80036de <UART_SetConfig+0x2fe>
 800353c:	2308      	movs	r3, #8
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003542:	e0cc      	b.n	80036de <UART_SetConfig+0x2fe>
 8003544:	2310      	movs	r3, #16
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354a:	e0c8      	b.n	80036de <UART_SetConfig+0x2fe>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5e      	ldr	r2, [pc, #376]	; (80036cc <UART_SetConfig+0x2ec>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d125      	bne.n	80035a2 <UART_SetConfig+0x1c2>
 8003556:	4b5b      	ldr	r3, [pc, #364]	; (80036c4 <UART_SetConfig+0x2e4>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003560:	2b30      	cmp	r3, #48	; 0x30
 8003562:	d016      	beq.n	8003592 <UART_SetConfig+0x1b2>
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d818      	bhi.n	800359a <UART_SetConfig+0x1ba>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d00a      	beq.n	8003582 <UART_SetConfig+0x1a2>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d814      	bhi.n	800359a <UART_SetConfig+0x1ba>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <UART_SetConfig+0x19a>
 8003574:	2b10      	cmp	r3, #16
 8003576:	d008      	beq.n	800358a <UART_SetConfig+0x1aa>
 8003578:	e00f      	b.n	800359a <UART_SetConfig+0x1ba>
 800357a:	2300      	movs	r3, #0
 800357c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003580:	e0ad      	b.n	80036de <UART_SetConfig+0x2fe>
 8003582:	2302      	movs	r3, #2
 8003584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003588:	e0a9      	b.n	80036de <UART_SetConfig+0x2fe>
 800358a:	2304      	movs	r3, #4
 800358c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003590:	e0a5      	b.n	80036de <UART_SetConfig+0x2fe>
 8003592:	2308      	movs	r3, #8
 8003594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003598:	e0a1      	b.n	80036de <UART_SetConfig+0x2fe>
 800359a:	2310      	movs	r3, #16
 800359c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a0:	e09d      	b.n	80036de <UART_SetConfig+0x2fe>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a4a      	ldr	r2, [pc, #296]	; (80036d0 <UART_SetConfig+0x2f0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d125      	bne.n	80035f8 <UART_SetConfig+0x218>
 80035ac:	4b45      	ldr	r3, [pc, #276]	; (80036c4 <UART_SetConfig+0x2e4>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035b6:	2bc0      	cmp	r3, #192	; 0xc0
 80035b8:	d016      	beq.n	80035e8 <UART_SetConfig+0x208>
 80035ba:	2bc0      	cmp	r3, #192	; 0xc0
 80035bc:	d818      	bhi.n	80035f0 <UART_SetConfig+0x210>
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d00a      	beq.n	80035d8 <UART_SetConfig+0x1f8>
 80035c2:	2b80      	cmp	r3, #128	; 0x80
 80035c4:	d814      	bhi.n	80035f0 <UART_SetConfig+0x210>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <UART_SetConfig+0x1f0>
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d008      	beq.n	80035e0 <UART_SetConfig+0x200>
 80035ce:	e00f      	b.n	80035f0 <UART_SetConfig+0x210>
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d6:	e082      	b.n	80036de <UART_SetConfig+0x2fe>
 80035d8:	2302      	movs	r3, #2
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035de:	e07e      	b.n	80036de <UART_SetConfig+0x2fe>
 80035e0:	2304      	movs	r3, #4
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e6:	e07a      	b.n	80036de <UART_SetConfig+0x2fe>
 80035e8:	2308      	movs	r3, #8
 80035ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ee:	e076      	b.n	80036de <UART_SetConfig+0x2fe>
 80035f0:	2310      	movs	r3, #16
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035f6:	e072      	b.n	80036de <UART_SetConfig+0x2fe>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a35      	ldr	r2, [pc, #212]	; (80036d4 <UART_SetConfig+0x2f4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d12a      	bne.n	8003658 <UART_SetConfig+0x278>
 8003602:	4b30      	ldr	r3, [pc, #192]	; (80036c4 <UART_SetConfig+0x2e4>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003610:	d01a      	beq.n	8003648 <UART_SetConfig+0x268>
 8003612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003616:	d81b      	bhi.n	8003650 <UART_SetConfig+0x270>
 8003618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361c:	d00c      	beq.n	8003638 <UART_SetConfig+0x258>
 800361e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003622:	d815      	bhi.n	8003650 <UART_SetConfig+0x270>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <UART_SetConfig+0x250>
 8003628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362c:	d008      	beq.n	8003640 <UART_SetConfig+0x260>
 800362e:	e00f      	b.n	8003650 <UART_SetConfig+0x270>
 8003630:	2300      	movs	r3, #0
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003636:	e052      	b.n	80036de <UART_SetConfig+0x2fe>
 8003638:	2302      	movs	r3, #2
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363e:	e04e      	b.n	80036de <UART_SetConfig+0x2fe>
 8003640:	2304      	movs	r3, #4
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003646:	e04a      	b.n	80036de <UART_SetConfig+0x2fe>
 8003648:	2308      	movs	r3, #8
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e046      	b.n	80036de <UART_SetConfig+0x2fe>
 8003650:	2310      	movs	r3, #16
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003656:	e042      	b.n	80036de <UART_SetConfig+0x2fe>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a17      	ldr	r2, [pc, #92]	; (80036bc <UART_SetConfig+0x2dc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d13a      	bne.n	80036d8 <UART_SetConfig+0x2f8>
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <UART_SetConfig+0x2e4>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800366c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003670:	d01a      	beq.n	80036a8 <UART_SetConfig+0x2c8>
 8003672:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003676:	d81b      	bhi.n	80036b0 <UART_SetConfig+0x2d0>
 8003678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367c:	d00c      	beq.n	8003698 <UART_SetConfig+0x2b8>
 800367e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003682:	d815      	bhi.n	80036b0 <UART_SetConfig+0x2d0>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <UART_SetConfig+0x2b0>
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368c:	d008      	beq.n	80036a0 <UART_SetConfig+0x2c0>
 800368e:	e00f      	b.n	80036b0 <UART_SetConfig+0x2d0>
 8003690:	2300      	movs	r3, #0
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003696:	e022      	b.n	80036de <UART_SetConfig+0x2fe>
 8003698:	2302      	movs	r3, #2
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369e:	e01e      	b.n	80036de <UART_SetConfig+0x2fe>
 80036a0:	2304      	movs	r3, #4
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a6:	e01a      	b.n	80036de <UART_SetConfig+0x2fe>
 80036a8:	2308      	movs	r3, #8
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ae:	e016      	b.n	80036de <UART_SetConfig+0x2fe>
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b6:	e012      	b.n	80036de <UART_SetConfig+0x2fe>
 80036b8:	cfff69f3 	.word	0xcfff69f3
 80036bc:	40008000 	.word	0x40008000
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40021000 	.word	0x40021000
 80036c8:	40004400 	.word	0x40004400
 80036cc:	40004800 	.word	0x40004800
 80036d0:	40004c00 	.word	0x40004c00
 80036d4:	40005000 	.word	0x40005000
 80036d8:	2310      	movs	r3, #16
 80036da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4aae      	ldr	r2, [pc, #696]	; (800399c <UART_SetConfig+0x5bc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	f040 8097 	bne.w	8003818 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d823      	bhi.n	800373a <UART_SetConfig+0x35a>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0x318>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	0800373b 	.word	0x0800373b
 8003700:	08003725 	.word	0x08003725
 8003704:	0800373b 	.word	0x0800373b
 8003708:	0800372b 	.word	0x0800372b
 800370c:	0800373b 	.word	0x0800373b
 8003710:	0800373b 	.word	0x0800373b
 8003714:	0800373b 	.word	0x0800373b
 8003718:	08003733 	.word	0x08003733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800371c:	f7fe fe9e 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003720:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003722:	e010      	b.n	8003746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003724:	4b9e      	ldr	r3, [pc, #632]	; (80039a0 <UART_SetConfig+0x5c0>)
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003728:	e00d      	b.n	8003746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372a:	f7fe fe29 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003730:	e009      	b.n	8003746 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003738:	e005      	b.n	8003746 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003744:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8130 	beq.w	80039ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	4a94      	ldr	r2, [pc, #592]	; (80039a4 <UART_SetConfig+0x5c4>)
 8003754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003758:	461a      	mov	r2, r3
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003760:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	429a      	cmp	r2, r3
 8003770:	d305      	bcc.n	800377e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	429a      	cmp	r2, r3
 800377c:	d903      	bls.n	8003786 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003784:	e113      	b.n	80039ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2200      	movs	r2, #0
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	60fa      	str	r2, [r7, #12]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	4a84      	ldr	r2, [pc, #528]	; (80039a4 <UART_SetConfig+0x5c4>)
 8003794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003798:	b29b      	uxth	r3, r3
 800379a:	2200      	movs	r2, #0
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a8:	f7fc fd92 	bl	80002d0 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	020b      	lsls	r3, r1, #8
 80037be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037c2:	0202      	lsls	r2, r0, #8
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	6849      	ldr	r1, [r1, #4]
 80037c8:	0849      	lsrs	r1, r1, #1
 80037ca:	2000      	movs	r0, #0
 80037cc:	460c      	mov	r4, r1
 80037ce:	4605      	mov	r5, r0
 80037d0:	eb12 0804 	adds.w	r8, r2, r4
 80037d4:	eb43 0905 	adc.w	r9, r3, r5
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	469a      	mov	sl, r3
 80037e0:	4693      	mov	fp, r2
 80037e2:	4652      	mov	r2, sl
 80037e4:	465b      	mov	r3, fp
 80037e6:	4640      	mov	r0, r8
 80037e8:	4649      	mov	r1, r9
 80037ea:	f7fc fd71 	bl	80002d0 <__aeabi_uldivmod>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4613      	mov	r3, r2
 80037f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fc:	d308      	bcc.n	8003810 <UART_SetConfig+0x430>
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003804:	d204      	bcs.n	8003810 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a3a      	ldr	r2, [r7, #32]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	e0ce      	b.n	80039ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003816:	e0ca      	b.n	80039ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003820:	d166      	bne.n	80038f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003822:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003826:	2b08      	cmp	r3, #8
 8003828:	d827      	bhi.n	800387a <UART_SetConfig+0x49a>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <UART_SetConfig+0x450>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003855 	.word	0x08003855
 8003834:	0800385d 	.word	0x0800385d
 8003838:	08003865 	.word	0x08003865
 800383c:	0800387b 	.word	0x0800387b
 8003840:	0800386b 	.word	0x0800386b
 8003844:	0800387b 	.word	0x0800387b
 8003848:	0800387b 	.word	0x0800387b
 800384c:	0800387b 	.word	0x0800387b
 8003850:	08003873 	.word	0x08003873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003854:	f7fe fe02 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800385a:	e014      	b.n	8003886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7fe fe14 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003862:	e010      	b.n	8003886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003864:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <UART_SetConfig+0x5c0>)
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003868:	e00d      	b.n	8003886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386a:	f7fe fd89 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003870:	e009      	b.n	8003886 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003878:	e005      	b.n	8003886 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8090 	beq.w	80039ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	4a44      	ldr	r2, [pc, #272]	; (80039a4 <UART_SetConfig+0x5c4>)
 8003894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003898:	461a      	mov	r2, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	fbb3 f3f2 	udiv	r3, r3, r2
 80038a0:	005a      	lsls	r2, r3, #1
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	441a      	add	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2b0f      	cmp	r3, #15
 80038b8:	d916      	bls.n	80038e8 <UART_SetConfig+0x508>
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c0:	d212      	bcs.n	80038e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f023 030f 	bic.w	r3, r3, #15
 80038ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	8bfb      	ldrh	r3, [r7, #30]
 80038da:	4313      	orrs	r3, r2
 80038dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	8bfa      	ldrh	r2, [r7, #30]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	e062      	b.n	80039ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038ee:	e05e      	b.n	80039ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d828      	bhi.n	800394a <UART_SetConfig+0x56a>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <UART_SetConfig+0x520>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003925 	.word	0x08003925
 8003904:	0800392d 	.word	0x0800392d
 8003908:	08003935 	.word	0x08003935
 800390c:	0800394b 	.word	0x0800394b
 8003910:	0800393b 	.word	0x0800393b
 8003914:	0800394b 	.word	0x0800394b
 8003918:	0800394b 	.word	0x0800394b
 800391c:	0800394b 	.word	0x0800394b
 8003920:	08003943 	.word	0x08003943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003924:	f7fe fd9a 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003928:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800392a:	e014      	b.n	8003956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800392c:	f7fe fdac 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8003930:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003932:	e010      	b.n	8003956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <UART_SetConfig+0x5c0>)
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003938:	e00d      	b.n	8003956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393a:	f7fe fd21 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003940:	e009      	b.n	8003956 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003948:	e005      	b.n	8003956 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003954:	bf00      	nop
    }

    if (pclk != 0U)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	2b00      	cmp	r3, #0
 800395a:	d028      	beq.n	80039ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <UART_SetConfig+0x5c4>)
 8003962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003966:	461a      	mov	r2, r3
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	fbb3 f2f2 	udiv	r2, r3, r2
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	441a      	add	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	2b0f      	cmp	r3, #15
 8003984:	d910      	bls.n	80039a8 <UART_SetConfig+0x5c8>
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d20c      	bcs.n	80039a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	b29a      	uxth	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	e009      	b.n	80039ae <UART_SetConfig+0x5ce>
 800399a:	bf00      	nop
 800399c:	40008000 	.word	0x40008000
 80039a0:	00f42400 	.word	0x00f42400
 80039a4:	08004ef8 	.word	0x08004ef8
      }
      else
      {
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80039ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3730      	adds	r7, #48	; 0x30
 80039d2:	46bd      	mov	sp, r7
 80039d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01a      	beq.n	8003aee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ad6:	d10a      	bne.n	8003aee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
  }
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b098      	sub	sp, #96	; 0x60
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b2c:	f7fd f900 	bl	8000d30 <HAL_GetTick>
 8003b30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d12f      	bne.n	8003ba0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f88e 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d022      	beq.n	8003ba0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b78:	647b      	str	r3, [r7, #68]	; 0x44
 8003b7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e6      	bne.n	8003b5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e063      	b.n	8003c68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d149      	bne.n	8003c42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f857 	bl	8003c70 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d03c      	beq.n	8003c42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
 8003be8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e6      	bne.n	8003bc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3308      	adds	r3, #8
 8003c00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	e853 3f00 	ldrex	r3, [r3]
 8003c08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3308      	adds	r3, #8
 8003c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c1a:	61fa      	str	r2, [r7, #28]
 8003c1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	69b9      	ldr	r1, [r7, #24]
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	617b      	str	r3, [r7, #20]
   return(result);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e5      	bne.n	8003bfa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e012      	b.n	8003c68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3758      	adds	r7, #88	; 0x58
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c80:	e04f      	b.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d04b      	beq.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7fd f851 	bl	8000d30 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e04e      	b.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d037      	beq.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b80      	cmp	r3, #128	; 0x80
 8003cb6:	d034      	beq.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d031      	beq.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d110      	bne.n	8003cee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f920 	bl	8003f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2208      	movs	r2, #8
 8003cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e029      	b.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfc:	d111      	bne.n	8003d22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f906 	bl	8003f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e00f      	b.n	8003d42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	bf0c      	ite	eq
 8003d32:	2301      	moveq	r3, #1
 8003d34:	2300      	movne	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d0a0      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
	...

08003d4c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b096      	sub	sp, #88	; 0x58
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	4613      	mov	r3, r2
 8003d58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2222      	movs	r2, #34	; 0x22
 8003d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d02d      	beq.n	8003dde <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d88:	4a40      	ldr	r2, [pc, #256]	; (8003e8c <UART_Start_Receive_DMA+0x140>)
 8003d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d92:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <UART_Start_Receive_DMA+0x144>)
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9c:	4a3d      	ldr	r2, [pc, #244]	; (8003e94 <UART_Start_Receive_DMA+0x148>)
 8003d9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	2200      	movs	r2, #0
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3324      	adds	r3, #36	; 0x24
 8003db6:	4619      	mov	r1, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	f7fd f97a 	bl	80010b8 <HAL_DMA_Start_IT>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2210      	movs	r2, #16
 8003dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e051      	b.n	8003e82 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d018      	beq.n	8003e18 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e06:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e6      	bne.n	8003de6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e38:	637a      	str	r2, [r7, #52]	; 0x34
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e5      	bne.n	8003e18 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e6c:	623a      	str	r2, [r7, #32]
 8003e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	69f9      	ldr	r1, [r7, #28]
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e5      	bne.n	8003e4c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3758      	adds	r7, #88	; 0x58
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	0800409d 	.word	0x0800409d
 8003e90:	080041c9 	.word	0x080041c9
 8003e94:	08004207 	.word	0x08004207

08003e98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b08f      	sub	sp, #60	; 0x3c
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e6      	bne.n	8003ea0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef2:	61ba      	str	r2, [r7, #24]
 8003ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef6:	6979      	ldr	r1, [r7, #20]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	e841 2300 	strex	r3, r2, [r1]
 8003efe:	613b      	str	r3, [r7, #16]
   return(result);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1e5      	bne.n	8003ed2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003f0e:	bf00      	nop
 8003f10:	373c      	adds	r7, #60	; 0x3c
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b095      	sub	sp, #84	; 0x54
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f40:	643b      	str	r3, [r7, #64]	; 0x40
 8003f42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e6      	bne.n	8003f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e3      	bne.n	8003f54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d118      	bne.n	8003fc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6979      	ldr	r1, [r7, #20]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e6      	bne.n	8003f94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003fda:	bf00      	nop
 8003fdc:	3754      	adds	r7, #84	; 0x54
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b090      	sub	sp, #64	; 0x40
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d137      	bne.n	8004072 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3308      	adds	r3, #8
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	623b      	str	r3, [r7, #32]
   return(result);
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004020:	63bb      	str	r3, [r7, #56]	; 0x38
 8004022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800402a:	633a      	str	r2, [r7, #48]	; 0x30
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e5      	bne.n	800400a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800403e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	60fb      	str	r3, [r7, #12]
   return(result);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004052:	637b      	str	r3, [r7, #52]	; 0x34
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	69b9      	ldr	r1, [r7, #24]
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	617b      	str	r3, [r7, #20]
   return(result);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004070:	e002      	b.n	8004078 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004072:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004074:	f7ff f980 	bl	8003378 <HAL_UART_TxCpltCallback>
}
 8004078:	bf00      	nop
 800407a:	3740      	adds	r7, #64	; 0x40
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff f97c 	bl	800338c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b09c      	sub	sp, #112	; 0x70
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d171      	bne.n	800419c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80040b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040de:	65bb      	str	r3, [r7, #88]	; 0x58
 80040e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e6      	bne.n	80040c0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3308      	adds	r3, #8
 80040f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004104:	f023 0301 	bic.w	r3, r3, #1
 8004108:	667b      	str	r3, [r7, #100]	; 0x64
 800410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004112:	647a      	str	r2, [r7, #68]	; 0x44
 8004114:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e5      	bne.n	80040f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3308      	adds	r3, #8
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	623b      	str	r3, [r7, #32]
   return(result);
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413c:	663b      	str	r3, [r7, #96]	; 0x60
 800413e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004146:	633a      	str	r2, [r7, #48]	; 0x30
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800414c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800415a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004166:	2b01      	cmp	r3, #1
 8004168:	d118      	bne.n	800419c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60fb      	str	r3, [r7, #12]
   return(result);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	69b9      	ldr	r1, [r7, #24]
 800418e:	69fa      	ldr	r2, [r7, #28]
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	617b      	str	r3, [r7, #20]
   return(result);
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800419c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419e:	2200      	movs	r2, #0
 80041a0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041b0:	4619      	mov	r1, r3
 80041b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041b4:	f7ff f908 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041b8:	e002      	b.n	80041c0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80041ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041bc:	f7fc fb86 	bl	80008cc <HAL_UART_RxCpltCallback>
}
 80041c0:	bf00      	nop
 80041c2:	3770      	adds	r7, #112	; 0x70
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d109      	bne.n	80041f8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	4619      	mov	r1, r3
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff f8e9 	bl	80033c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041f6:	e002      	b.n	80041fe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff f8d1 	bl	80033a0 <HAL_UART_RxHalfCpltCallback>
}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004222:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d109      	bne.n	8004246 <UART_DMAError+0x40>
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b21      	cmp	r3, #33	; 0x21
 8004236:	d106      	bne.n	8004246 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2200      	movs	r2, #0
 800423c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004240:	6978      	ldr	r0, [r7, #20]
 8004242:	f7ff fe29 	bl	8003e98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d109      	bne.n	8004268 <UART_DMAError+0x62>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b22      	cmp	r3, #34	; 0x22
 8004258:	d106      	bne.n	8004268 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004262:	6978      	ldr	r0, [r7, #20]
 8004264:	f7ff fe59 	bl	8003f1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f043 0210 	orr.w	r2, r3, #16
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004278:	6978      	ldr	r0, [r7, #20]
 800427a:	f7ff f89b 	bl	80033b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427e:	bf00      	nop
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff f885 	bl	80033b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b088      	sub	sp, #32
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	613b      	str	r3, [r7, #16]
   return(result);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e6      	bne.n	80042ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff f83c 	bl	8003378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004300:	bf00      	nop
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_UARTEx_DisableFifoMode+0x16>
 8004356:	2302      	movs	r3, #2
 8004358:	e027      	b.n	80043aa <HAL_UARTEx_DisableFifoMode+0x66>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2224      	movs	r2, #36	; 0x24
 8004366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004388:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e02d      	b.n	800442a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2224      	movs	r2, #36	; 0x24
 80043da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f850 	bl	80044b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004446:	2302      	movs	r3, #2
 8004448:	e02d      	b.n	80044a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2224      	movs	r2, #36	; 0x24
 8004456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f812 	bl	80044b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
	...

080044b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d108      	bne.n	80044d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044d0:	e031      	b.n	8004536 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044d2:	2308      	movs	r3, #8
 80044d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044d6:	2308      	movs	r3, #8
 80044d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	0e5b      	lsrs	r3, r3, #25
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	0f5b      	lsrs	r3, r3, #29
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044fa:	7bbb      	ldrb	r3, [r7, #14]
 80044fc:	7b3a      	ldrb	r2, [r7, #12]
 80044fe:	4911      	ldr	r1, [pc, #68]	; (8004544 <UARTEx_SetNbDataToProcess+0x94>)
 8004500:	5c8a      	ldrb	r2, [r1, r2]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004506:	7b3a      	ldrb	r2, [r7, #12]
 8004508:	490f      	ldr	r1, [pc, #60]	; (8004548 <UARTEx_SetNbDataToProcess+0x98>)
 800450a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800450c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	7b7a      	ldrb	r2, [r7, #13]
 800451c:	4909      	ldr	r1, [pc, #36]	; (8004544 <UARTEx_SetNbDataToProcess+0x94>)
 800451e:	5c8a      	ldrb	r2, [r1, r2]
 8004520:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004524:	7b7a      	ldrb	r2, [r7, #13]
 8004526:	4908      	ldr	r1, [pc, #32]	; (8004548 <UARTEx_SetNbDataToProcess+0x98>)
 8004528:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800452a:	fb93 f3f2 	sdiv	r3, r3, r2
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	08004f10 	.word	0x08004f10
 8004548:	08004f18 	.word	0x08004f18

0800454c <siprintf>:
 800454c:	b40e      	push	{r1, r2, r3}
 800454e:	b500      	push	{lr}
 8004550:	b09c      	sub	sp, #112	; 0x70
 8004552:	ab1d      	add	r3, sp, #116	; 0x74
 8004554:	9002      	str	r0, [sp, #8]
 8004556:	9006      	str	r0, [sp, #24]
 8004558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800455c:	4809      	ldr	r0, [pc, #36]	; (8004584 <siprintf+0x38>)
 800455e:	9107      	str	r1, [sp, #28]
 8004560:	9104      	str	r1, [sp, #16]
 8004562:	4909      	ldr	r1, [pc, #36]	; (8004588 <siprintf+0x3c>)
 8004564:	f853 2b04 	ldr.w	r2, [r3], #4
 8004568:	9105      	str	r1, [sp, #20]
 800456a:	6800      	ldr	r0, [r0, #0]
 800456c:	9301      	str	r3, [sp, #4]
 800456e:	a902      	add	r1, sp, #8
 8004570:	f000 f992 	bl	8004898 <_svfiprintf_r>
 8004574:	9b02      	ldr	r3, [sp, #8]
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	b01c      	add	sp, #112	; 0x70
 800457c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004580:	b003      	add	sp, #12
 8004582:	4770      	bx	lr
 8004584:	20000058 	.word	0x20000058
 8004588:	ffff0208 	.word	0xffff0208

0800458c <memset>:
 800458c:	4402      	add	r2, r0
 800458e:	4603      	mov	r3, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <__errno>:
 800459c:	4b01      	ldr	r3, [pc, #4]	; (80045a4 <__errno+0x8>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000058 	.word	0x20000058

080045a8 <__libc_init_array>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4d0d      	ldr	r5, [pc, #52]	; (80045e0 <__libc_init_array+0x38>)
 80045ac:	4c0d      	ldr	r4, [pc, #52]	; (80045e4 <__libc_init_array+0x3c>)
 80045ae:	1b64      	subs	r4, r4, r5
 80045b0:	10a4      	asrs	r4, r4, #2
 80045b2:	2600      	movs	r6, #0
 80045b4:	42a6      	cmp	r6, r4
 80045b6:	d109      	bne.n	80045cc <__libc_init_array+0x24>
 80045b8:	4d0b      	ldr	r5, [pc, #44]	; (80045e8 <__libc_init_array+0x40>)
 80045ba:	4c0c      	ldr	r4, [pc, #48]	; (80045ec <__libc_init_array+0x44>)
 80045bc:	f000 fc6a 	bl	8004e94 <_init>
 80045c0:	1b64      	subs	r4, r4, r5
 80045c2:	10a4      	asrs	r4, r4, #2
 80045c4:	2600      	movs	r6, #0
 80045c6:	42a6      	cmp	r6, r4
 80045c8:	d105      	bne.n	80045d6 <__libc_init_array+0x2e>
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d0:	4798      	blx	r3
 80045d2:	3601      	adds	r6, #1
 80045d4:	e7ee      	b.n	80045b4 <__libc_init_array+0xc>
 80045d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045da:	4798      	blx	r3
 80045dc:	3601      	adds	r6, #1
 80045de:	e7f2      	b.n	80045c6 <__libc_init_array+0x1e>
 80045e0:	08004f5c 	.word	0x08004f5c
 80045e4:	08004f5c 	.word	0x08004f5c
 80045e8:	08004f5c 	.word	0x08004f5c
 80045ec:	08004f60 	.word	0x08004f60

080045f0 <__retarget_lock_acquire_recursive>:
 80045f0:	4770      	bx	lr

080045f2 <__retarget_lock_release_recursive>:
 80045f2:	4770      	bx	lr

080045f4 <_free_r>:
 80045f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d044      	beq.n	8004684 <_free_r+0x90>
 80045fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fe:	9001      	str	r0, [sp, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f1a1 0404 	sub.w	r4, r1, #4
 8004606:	bfb8      	it	lt
 8004608:	18e4      	addlt	r4, r4, r3
 800460a:	f000 f8df 	bl	80047cc <__malloc_lock>
 800460e:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <_free_r+0x94>)
 8004610:	9801      	ldr	r0, [sp, #4]
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	b933      	cbnz	r3, 8004624 <_free_r+0x30>
 8004616:	6063      	str	r3, [r4, #4]
 8004618:	6014      	str	r4, [r2, #0]
 800461a:	b003      	add	sp, #12
 800461c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004620:	f000 b8da 	b.w	80047d8 <__malloc_unlock>
 8004624:	42a3      	cmp	r3, r4
 8004626:	d908      	bls.n	800463a <_free_r+0x46>
 8004628:	6825      	ldr	r5, [r4, #0]
 800462a:	1961      	adds	r1, r4, r5
 800462c:	428b      	cmp	r3, r1
 800462e:	bf01      	itttt	eq
 8004630:	6819      	ldreq	r1, [r3, #0]
 8004632:	685b      	ldreq	r3, [r3, #4]
 8004634:	1949      	addeq	r1, r1, r5
 8004636:	6021      	streq	r1, [r4, #0]
 8004638:	e7ed      	b.n	8004616 <_free_r+0x22>
 800463a:	461a      	mov	r2, r3
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	b10b      	cbz	r3, 8004644 <_free_r+0x50>
 8004640:	42a3      	cmp	r3, r4
 8004642:	d9fa      	bls.n	800463a <_free_r+0x46>
 8004644:	6811      	ldr	r1, [r2, #0]
 8004646:	1855      	adds	r5, r2, r1
 8004648:	42a5      	cmp	r5, r4
 800464a:	d10b      	bne.n	8004664 <_free_r+0x70>
 800464c:	6824      	ldr	r4, [r4, #0]
 800464e:	4421      	add	r1, r4
 8004650:	1854      	adds	r4, r2, r1
 8004652:	42a3      	cmp	r3, r4
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	d1e0      	bne.n	800461a <_free_r+0x26>
 8004658:	681c      	ldr	r4, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	6053      	str	r3, [r2, #4]
 800465e:	440c      	add	r4, r1
 8004660:	6014      	str	r4, [r2, #0]
 8004662:	e7da      	b.n	800461a <_free_r+0x26>
 8004664:	d902      	bls.n	800466c <_free_r+0x78>
 8004666:	230c      	movs	r3, #12
 8004668:	6003      	str	r3, [r0, #0]
 800466a:	e7d6      	b.n	800461a <_free_r+0x26>
 800466c:	6825      	ldr	r5, [r4, #0]
 800466e:	1961      	adds	r1, r4, r5
 8004670:	428b      	cmp	r3, r1
 8004672:	bf04      	itt	eq
 8004674:	6819      	ldreq	r1, [r3, #0]
 8004676:	685b      	ldreq	r3, [r3, #4]
 8004678:	6063      	str	r3, [r4, #4]
 800467a:	bf04      	itt	eq
 800467c:	1949      	addeq	r1, r1, r5
 800467e:	6021      	streq	r1, [r4, #0]
 8004680:	6054      	str	r4, [r2, #4]
 8004682:	e7ca      	b.n	800461a <_free_r+0x26>
 8004684:	b003      	add	sp, #12
 8004686:	bd30      	pop	{r4, r5, pc}
 8004688:	20000354 	.word	0x20000354

0800468c <sbrk_aligned>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4e0e      	ldr	r6, [pc, #56]	; (80046c8 <sbrk_aligned+0x3c>)
 8004690:	460c      	mov	r4, r1
 8004692:	6831      	ldr	r1, [r6, #0]
 8004694:	4605      	mov	r5, r0
 8004696:	b911      	cbnz	r1, 800469e <sbrk_aligned+0x12>
 8004698:	f000 fba6 	bl	8004de8 <_sbrk_r>
 800469c:	6030      	str	r0, [r6, #0]
 800469e:	4621      	mov	r1, r4
 80046a0:	4628      	mov	r0, r5
 80046a2:	f000 fba1 	bl	8004de8 <_sbrk_r>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	d00a      	beq.n	80046c0 <sbrk_aligned+0x34>
 80046aa:	1cc4      	adds	r4, r0, #3
 80046ac:	f024 0403 	bic.w	r4, r4, #3
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d007      	beq.n	80046c4 <sbrk_aligned+0x38>
 80046b4:	1a21      	subs	r1, r4, r0
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 fb96 	bl	8004de8 <_sbrk_r>
 80046bc:	3001      	adds	r0, #1
 80046be:	d101      	bne.n	80046c4 <sbrk_aligned+0x38>
 80046c0:	f04f 34ff 	mov.w	r4, #4294967295
 80046c4:	4620      	mov	r0, r4
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	20000358 	.word	0x20000358

080046cc <_malloc_r>:
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	1ccd      	adds	r5, r1, #3
 80046d2:	f025 0503 	bic.w	r5, r5, #3
 80046d6:	3508      	adds	r5, #8
 80046d8:	2d0c      	cmp	r5, #12
 80046da:	bf38      	it	cc
 80046dc:	250c      	movcc	r5, #12
 80046de:	2d00      	cmp	r5, #0
 80046e0:	4607      	mov	r7, r0
 80046e2:	db01      	blt.n	80046e8 <_malloc_r+0x1c>
 80046e4:	42a9      	cmp	r1, r5
 80046e6:	d905      	bls.n	80046f4 <_malloc_r+0x28>
 80046e8:	230c      	movs	r3, #12
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	2600      	movs	r6, #0
 80046ee:	4630      	mov	r0, r6
 80046f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047c8 <_malloc_r+0xfc>
 80046f8:	f000 f868 	bl	80047cc <__malloc_lock>
 80046fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004700:	461c      	mov	r4, r3
 8004702:	bb5c      	cbnz	r4, 800475c <_malloc_r+0x90>
 8004704:	4629      	mov	r1, r5
 8004706:	4638      	mov	r0, r7
 8004708:	f7ff ffc0 	bl	800468c <sbrk_aligned>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	4604      	mov	r4, r0
 8004710:	d155      	bne.n	80047be <_malloc_r+0xf2>
 8004712:	f8d8 4000 	ldr.w	r4, [r8]
 8004716:	4626      	mov	r6, r4
 8004718:	2e00      	cmp	r6, #0
 800471a:	d145      	bne.n	80047a8 <_malloc_r+0xdc>
 800471c:	2c00      	cmp	r4, #0
 800471e:	d048      	beq.n	80047b2 <_malloc_r+0xe6>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	4631      	mov	r1, r6
 8004724:	4638      	mov	r0, r7
 8004726:	eb04 0903 	add.w	r9, r4, r3
 800472a:	f000 fb5d 	bl	8004de8 <_sbrk_r>
 800472e:	4581      	cmp	r9, r0
 8004730:	d13f      	bne.n	80047b2 <_malloc_r+0xe6>
 8004732:	6821      	ldr	r1, [r4, #0]
 8004734:	1a6d      	subs	r5, r5, r1
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ffa7 	bl	800468c <sbrk_aligned>
 800473e:	3001      	adds	r0, #1
 8004740:	d037      	beq.n	80047b2 <_malloc_r+0xe6>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	442b      	add	r3, r5
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	f8d8 3000 	ldr.w	r3, [r8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d038      	beq.n	80047c2 <_malloc_r+0xf6>
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	42a2      	cmp	r2, r4
 8004754:	d12b      	bne.n	80047ae <_malloc_r+0xe2>
 8004756:	2200      	movs	r2, #0
 8004758:	605a      	str	r2, [r3, #4]
 800475a:	e00f      	b.n	800477c <_malloc_r+0xb0>
 800475c:	6822      	ldr	r2, [r4, #0]
 800475e:	1b52      	subs	r2, r2, r5
 8004760:	d41f      	bmi.n	80047a2 <_malloc_r+0xd6>
 8004762:	2a0b      	cmp	r2, #11
 8004764:	d917      	bls.n	8004796 <_malloc_r+0xca>
 8004766:	1961      	adds	r1, r4, r5
 8004768:	42a3      	cmp	r3, r4
 800476a:	6025      	str	r5, [r4, #0]
 800476c:	bf18      	it	ne
 800476e:	6059      	strne	r1, [r3, #4]
 8004770:	6863      	ldr	r3, [r4, #4]
 8004772:	bf08      	it	eq
 8004774:	f8c8 1000 	streq.w	r1, [r8]
 8004778:	5162      	str	r2, [r4, r5]
 800477a:	604b      	str	r3, [r1, #4]
 800477c:	4638      	mov	r0, r7
 800477e:	f104 060b 	add.w	r6, r4, #11
 8004782:	f000 f829 	bl	80047d8 <__malloc_unlock>
 8004786:	f026 0607 	bic.w	r6, r6, #7
 800478a:	1d23      	adds	r3, r4, #4
 800478c:	1af2      	subs	r2, r6, r3
 800478e:	d0ae      	beq.n	80046ee <_malloc_r+0x22>
 8004790:	1b9b      	subs	r3, r3, r6
 8004792:	50a3      	str	r3, [r4, r2]
 8004794:	e7ab      	b.n	80046ee <_malloc_r+0x22>
 8004796:	42a3      	cmp	r3, r4
 8004798:	6862      	ldr	r2, [r4, #4]
 800479a:	d1dd      	bne.n	8004758 <_malloc_r+0x8c>
 800479c:	f8c8 2000 	str.w	r2, [r8]
 80047a0:	e7ec      	b.n	800477c <_malloc_r+0xb0>
 80047a2:	4623      	mov	r3, r4
 80047a4:	6864      	ldr	r4, [r4, #4]
 80047a6:	e7ac      	b.n	8004702 <_malloc_r+0x36>
 80047a8:	4634      	mov	r4, r6
 80047aa:	6876      	ldr	r6, [r6, #4]
 80047ac:	e7b4      	b.n	8004718 <_malloc_r+0x4c>
 80047ae:	4613      	mov	r3, r2
 80047b0:	e7cc      	b.n	800474c <_malloc_r+0x80>
 80047b2:	230c      	movs	r3, #12
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	4638      	mov	r0, r7
 80047b8:	f000 f80e 	bl	80047d8 <__malloc_unlock>
 80047bc:	e797      	b.n	80046ee <_malloc_r+0x22>
 80047be:	6025      	str	r5, [r4, #0]
 80047c0:	e7dc      	b.n	800477c <_malloc_r+0xb0>
 80047c2:	605b      	str	r3, [r3, #4]
 80047c4:	deff      	udf	#255	; 0xff
 80047c6:	bf00      	nop
 80047c8:	20000354 	.word	0x20000354

080047cc <__malloc_lock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__malloc_lock+0x8>)
 80047ce:	f7ff bf0f 	b.w	80045f0 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	20000350 	.word	0x20000350

080047d8 <__malloc_unlock>:
 80047d8:	4801      	ldr	r0, [pc, #4]	; (80047e0 <__malloc_unlock+0x8>)
 80047da:	f7ff bf0a 	b.w	80045f2 <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	20000350 	.word	0x20000350

080047e4 <__ssputs_r>:
 80047e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e8:	688e      	ldr	r6, [r1, #8]
 80047ea:	461f      	mov	r7, r3
 80047ec:	42be      	cmp	r6, r7
 80047ee:	680b      	ldr	r3, [r1, #0]
 80047f0:	4682      	mov	sl, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	4690      	mov	r8, r2
 80047f6:	d82c      	bhi.n	8004852 <__ssputs_r+0x6e>
 80047f8:	898a      	ldrh	r2, [r1, #12]
 80047fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047fe:	d026      	beq.n	800484e <__ssputs_r+0x6a>
 8004800:	6965      	ldr	r5, [r4, #20]
 8004802:	6909      	ldr	r1, [r1, #16]
 8004804:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004808:	eba3 0901 	sub.w	r9, r3, r1
 800480c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004810:	1c7b      	adds	r3, r7, #1
 8004812:	444b      	add	r3, r9
 8004814:	106d      	asrs	r5, r5, #1
 8004816:	429d      	cmp	r5, r3
 8004818:	bf38      	it	cc
 800481a:	461d      	movcc	r5, r3
 800481c:	0553      	lsls	r3, r2, #21
 800481e:	d527      	bpl.n	8004870 <__ssputs_r+0x8c>
 8004820:	4629      	mov	r1, r5
 8004822:	f7ff ff53 	bl	80046cc <_malloc_r>
 8004826:	4606      	mov	r6, r0
 8004828:	b360      	cbz	r0, 8004884 <__ssputs_r+0xa0>
 800482a:	6921      	ldr	r1, [r4, #16]
 800482c:	464a      	mov	r2, r9
 800482e:	f000 faeb 	bl	8004e08 <memcpy>
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483c:	81a3      	strh	r3, [r4, #12]
 800483e:	6126      	str	r6, [r4, #16]
 8004840:	6165      	str	r5, [r4, #20]
 8004842:	444e      	add	r6, r9
 8004844:	eba5 0509 	sub.w	r5, r5, r9
 8004848:	6026      	str	r6, [r4, #0]
 800484a:	60a5      	str	r5, [r4, #8]
 800484c:	463e      	mov	r6, r7
 800484e:	42be      	cmp	r6, r7
 8004850:	d900      	bls.n	8004854 <__ssputs_r+0x70>
 8004852:	463e      	mov	r6, r7
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	4632      	mov	r2, r6
 8004858:	4641      	mov	r1, r8
 800485a:	f000 faab 	bl	8004db4 <memmove>
 800485e:	68a3      	ldr	r3, [r4, #8]
 8004860:	1b9b      	subs	r3, r3, r6
 8004862:	60a3      	str	r3, [r4, #8]
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	4433      	add	r3, r6
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	2000      	movs	r0, #0
 800486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004870:	462a      	mov	r2, r5
 8004872:	f000 fad7 	bl	8004e24 <_realloc_r>
 8004876:	4606      	mov	r6, r0
 8004878:	2800      	cmp	r0, #0
 800487a:	d1e0      	bne.n	800483e <__ssputs_r+0x5a>
 800487c:	6921      	ldr	r1, [r4, #16]
 800487e:	4650      	mov	r0, sl
 8004880:	f7ff feb8 	bl	80045f4 <_free_r>
 8004884:	230c      	movs	r3, #12
 8004886:	f8ca 3000 	str.w	r3, [sl]
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	e7e9      	b.n	800486c <__ssputs_r+0x88>

08004898 <_svfiprintf_r>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	4698      	mov	r8, r3
 800489e:	898b      	ldrh	r3, [r1, #12]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	b09d      	sub	sp, #116	; 0x74
 80048a4:	4607      	mov	r7, r0
 80048a6:	460d      	mov	r5, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	d50e      	bpl.n	80048ca <_svfiprintf_r+0x32>
 80048ac:	690b      	ldr	r3, [r1, #16]
 80048ae:	b963      	cbnz	r3, 80048ca <_svfiprintf_r+0x32>
 80048b0:	2140      	movs	r1, #64	; 0x40
 80048b2:	f7ff ff0b 	bl	80046cc <_malloc_r>
 80048b6:	6028      	str	r0, [r5, #0]
 80048b8:	6128      	str	r0, [r5, #16]
 80048ba:	b920      	cbnz	r0, 80048c6 <_svfiprintf_r+0x2e>
 80048bc:	230c      	movs	r3, #12
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	e0d0      	b.n	8004a68 <_svfiprintf_r+0x1d0>
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	616b      	str	r3, [r5, #20]
 80048ca:	2300      	movs	r3, #0
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	2320      	movs	r3, #32
 80048d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d8:	2330      	movs	r3, #48	; 0x30
 80048da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a80 <_svfiprintf_r+0x1e8>
 80048de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048e2:	f04f 0901 	mov.w	r9, #1
 80048e6:	4623      	mov	r3, r4
 80048e8:	469a      	mov	sl, r3
 80048ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ee:	b10a      	cbz	r2, 80048f4 <_svfiprintf_r+0x5c>
 80048f0:	2a25      	cmp	r2, #37	; 0x25
 80048f2:	d1f9      	bne.n	80048e8 <_svfiprintf_r+0x50>
 80048f4:	ebba 0b04 	subs.w	fp, sl, r4
 80048f8:	d00b      	beq.n	8004912 <_svfiprintf_r+0x7a>
 80048fa:	465b      	mov	r3, fp
 80048fc:	4622      	mov	r2, r4
 80048fe:	4629      	mov	r1, r5
 8004900:	4638      	mov	r0, r7
 8004902:	f7ff ff6f 	bl	80047e4 <__ssputs_r>
 8004906:	3001      	adds	r0, #1
 8004908:	f000 80a9 	beq.w	8004a5e <_svfiprintf_r+0x1c6>
 800490c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800490e:	445a      	add	r2, fp
 8004910:	9209      	str	r2, [sp, #36]	; 0x24
 8004912:	f89a 3000 	ldrb.w	r3, [sl]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80a1 	beq.w	8004a5e <_svfiprintf_r+0x1c6>
 800491c:	2300      	movs	r3, #0
 800491e:	f04f 32ff 	mov.w	r2, #4294967295
 8004922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004926:	f10a 0a01 	add.w	sl, sl, #1
 800492a:	9304      	str	r3, [sp, #16]
 800492c:	9307      	str	r3, [sp, #28]
 800492e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004932:	931a      	str	r3, [sp, #104]	; 0x68
 8004934:	4654      	mov	r4, sl
 8004936:	2205      	movs	r2, #5
 8004938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493c:	4850      	ldr	r0, [pc, #320]	; (8004a80 <_svfiprintf_r+0x1e8>)
 800493e:	f7fb fc77 	bl	8000230 <memchr>
 8004942:	9a04      	ldr	r2, [sp, #16]
 8004944:	b9d8      	cbnz	r0, 800497e <_svfiprintf_r+0xe6>
 8004946:	06d0      	lsls	r0, r2, #27
 8004948:	bf44      	itt	mi
 800494a:	2320      	movmi	r3, #32
 800494c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004950:	0711      	lsls	r1, r2, #28
 8004952:	bf44      	itt	mi
 8004954:	232b      	movmi	r3, #43	; 0x2b
 8004956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800495a:	f89a 3000 	ldrb.w	r3, [sl]
 800495e:	2b2a      	cmp	r3, #42	; 0x2a
 8004960:	d015      	beq.n	800498e <_svfiprintf_r+0xf6>
 8004962:	9a07      	ldr	r2, [sp, #28]
 8004964:	4654      	mov	r4, sl
 8004966:	2000      	movs	r0, #0
 8004968:	f04f 0c0a 	mov.w	ip, #10
 800496c:	4621      	mov	r1, r4
 800496e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004972:	3b30      	subs	r3, #48	; 0x30
 8004974:	2b09      	cmp	r3, #9
 8004976:	d94d      	bls.n	8004a14 <_svfiprintf_r+0x17c>
 8004978:	b1b0      	cbz	r0, 80049a8 <_svfiprintf_r+0x110>
 800497a:	9207      	str	r2, [sp, #28]
 800497c:	e014      	b.n	80049a8 <_svfiprintf_r+0x110>
 800497e:	eba0 0308 	sub.w	r3, r0, r8
 8004982:	fa09 f303 	lsl.w	r3, r9, r3
 8004986:	4313      	orrs	r3, r2
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	46a2      	mov	sl, r4
 800498c:	e7d2      	b.n	8004934 <_svfiprintf_r+0x9c>
 800498e:	9b03      	ldr	r3, [sp, #12]
 8004990:	1d19      	adds	r1, r3, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	9103      	str	r1, [sp, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfbb      	ittet	lt
 800499a:	425b      	neglt	r3, r3
 800499c:	f042 0202 	orrlt.w	r2, r2, #2
 80049a0:	9307      	strge	r3, [sp, #28]
 80049a2:	9307      	strlt	r3, [sp, #28]
 80049a4:	bfb8      	it	lt
 80049a6:	9204      	strlt	r2, [sp, #16]
 80049a8:	7823      	ldrb	r3, [r4, #0]
 80049aa:	2b2e      	cmp	r3, #46	; 0x2e
 80049ac:	d10c      	bne.n	80049c8 <_svfiprintf_r+0x130>
 80049ae:	7863      	ldrb	r3, [r4, #1]
 80049b0:	2b2a      	cmp	r3, #42	; 0x2a
 80049b2:	d134      	bne.n	8004a1e <_svfiprintf_r+0x186>
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	1d1a      	adds	r2, r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	9203      	str	r2, [sp, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bfb8      	it	lt
 80049c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80049c4:	3402      	adds	r4, #2
 80049c6:	9305      	str	r3, [sp, #20]
 80049c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004a90 <_svfiprintf_r+0x1f8>
 80049cc:	7821      	ldrb	r1, [r4, #0]
 80049ce:	2203      	movs	r2, #3
 80049d0:	4650      	mov	r0, sl
 80049d2:	f7fb fc2d 	bl	8000230 <memchr>
 80049d6:	b138      	cbz	r0, 80049e8 <_svfiprintf_r+0x150>
 80049d8:	9b04      	ldr	r3, [sp, #16]
 80049da:	eba0 000a 	sub.w	r0, r0, sl
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	4082      	lsls	r2, r0
 80049e2:	4313      	orrs	r3, r2
 80049e4:	3401      	adds	r4, #1
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ec:	4825      	ldr	r0, [pc, #148]	; (8004a84 <_svfiprintf_r+0x1ec>)
 80049ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049f2:	2206      	movs	r2, #6
 80049f4:	f7fb fc1c 	bl	8000230 <memchr>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d038      	beq.n	8004a6e <_svfiprintf_r+0x1d6>
 80049fc:	4b22      	ldr	r3, [pc, #136]	; (8004a88 <_svfiprintf_r+0x1f0>)
 80049fe:	bb1b      	cbnz	r3, 8004a48 <_svfiprintf_r+0x1b0>
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	3307      	adds	r3, #7
 8004a04:	f023 0307 	bic.w	r3, r3, #7
 8004a08:	3308      	adds	r3, #8
 8004a0a:	9303      	str	r3, [sp, #12]
 8004a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0e:	4433      	add	r3, r6
 8004a10:	9309      	str	r3, [sp, #36]	; 0x24
 8004a12:	e768      	b.n	80048e6 <_svfiprintf_r+0x4e>
 8004a14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a18:	460c      	mov	r4, r1
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	e7a6      	b.n	800496c <_svfiprintf_r+0xd4>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	3401      	adds	r4, #1
 8004a22:	9305      	str	r3, [sp, #20]
 8004a24:	4619      	mov	r1, r3
 8004a26:	f04f 0c0a 	mov.w	ip, #10
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a30:	3a30      	subs	r2, #48	; 0x30
 8004a32:	2a09      	cmp	r2, #9
 8004a34:	d903      	bls.n	8004a3e <_svfiprintf_r+0x1a6>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0c6      	beq.n	80049c8 <_svfiprintf_r+0x130>
 8004a3a:	9105      	str	r1, [sp, #20]
 8004a3c:	e7c4      	b.n	80049c8 <_svfiprintf_r+0x130>
 8004a3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a42:	4604      	mov	r4, r0
 8004a44:	2301      	movs	r3, #1
 8004a46:	e7f0      	b.n	8004a2a <_svfiprintf_r+0x192>
 8004a48:	ab03      	add	r3, sp, #12
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	462a      	mov	r2, r5
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <_svfiprintf_r+0x1f4>)
 8004a50:	a904      	add	r1, sp, #16
 8004a52:	4638      	mov	r0, r7
 8004a54:	f3af 8000 	nop.w
 8004a58:	1c42      	adds	r2, r0, #1
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	d1d6      	bne.n	8004a0c <_svfiprintf_r+0x174>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	065b      	lsls	r3, r3, #25
 8004a62:	f53f af2d 	bmi.w	80048c0 <_svfiprintf_r+0x28>
 8004a66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a68:	b01d      	add	sp, #116	; 0x74
 8004a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6e:	ab03      	add	r3, sp, #12
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	462a      	mov	r2, r5
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <_svfiprintf_r+0x1f4>)
 8004a76:	a904      	add	r1, sp, #16
 8004a78:	4638      	mov	r0, r7
 8004a7a:	f000 f879 	bl	8004b70 <_printf_i>
 8004a7e:	e7eb      	b.n	8004a58 <_svfiprintf_r+0x1c0>
 8004a80:	08004f20 	.word	0x08004f20
 8004a84:	08004f2a 	.word	0x08004f2a
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	080047e5 	.word	0x080047e5
 8004a90:	08004f26 	.word	0x08004f26

08004a94 <_printf_common>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4616      	mov	r6, r2
 8004a9a:	4699      	mov	r9, r3
 8004a9c:	688a      	ldr	r2, [r1, #8]
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bfb8      	it	lt
 8004aa8:	4613      	movlt	r3, r2
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	b10a      	cbz	r2, 8004aba <_printf_common+0x26>
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0699      	lsls	r1, r3, #26
 8004abe:	bf42      	ittt	mi
 8004ac0:	6833      	ldrmi	r3, [r6, #0]
 8004ac2:	3302      	addmi	r3, #2
 8004ac4:	6033      	strmi	r3, [r6, #0]
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	f015 0506 	ands.w	r5, r5, #6
 8004acc:	d106      	bne.n	8004adc <_printf_common+0x48>
 8004ace:	f104 0a19 	add.w	sl, r4, #25
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	dc26      	bgt.n	8004b2a <_printf_common+0x96>
 8004adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ae0:	1e13      	subs	r3, r2, #0
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	0692      	lsls	r2, r2, #26
 8004aea:	d42b      	bmi.n	8004b44 <_printf_common+0xb0>
 8004aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004af0:	4649      	mov	r1, r9
 8004af2:	4638      	mov	r0, r7
 8004af4:	47c0      	blx	r8
 8004af6:	3001      	adds	r0, #1
 8004af8:	d01e      	beq.n	8004b38 <_printf_common+0xa4>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	f003 0306 	and.w	r3, r3, #6
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	bf02      	ittt	eq
 8004b06:	68e5      	ldreq	r5, [r4, #12]
 8004b08:	6833      	ldreq	r3, [r6, #0]
 8004b0a:	1aed      	subeq	r5, r5, r3
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	bf0c      	ite	eq
 8004b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b14:	2500      	movne	r5, #0
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bfc4      	itt	gt
 8004b1a:	1a9b      	subgt	r3, r3, r2
 8004b1c:	18ed      	addgt	r5, r5, r3
 8004b1e:	2600      	movs	r6, #0
 8004b20:	341a      	adds	r4, #26
 8004b22:	42b5      	cmp	r5, r6
 8004b24:	d11a      	bne.n	8004b5c <_printf_common+0xc8>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e008      	b.n	8004b3c <_printf_common+0xa8>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4638      	mov	r0, r7
 8004b32:	47c0      	blx	r8
 8004b34:	3001      	adds	r0, #1
 8004b36:	d103      	bne.n	8004b40 <_printf_common+0xac>
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7c6      	b.n	8004ad2 <_printf_common+0x3e>
 8004b44:	18e1      	adds	r1, r4, r3
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	2030      	movs	r0, #48	; 0x30
 8004b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b4e:	4422      	add	r2, r4
 8004b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b58:	3302      	adds	r3, #2
 8004b5a:	e7c7      	b.n	8004aec <_printf_common+0x58>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d0e6      	beq.n	8004b38 <_printf_common+0xa4>
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	e7d9      	b.n	8004b22 <_printf_common+0x8e>
	...

08004b70 <_printf_i>:
 8004b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	7e0f      	ldrb	r7, [r1, #24]
 8004b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b78:	2f78      	cmp	r7, #120	; 0x78
 8004b7a:	4691      	mov	r9, r2
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	469a      	mov	sl, r3
 8004b82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b86:	d807      	bhi.n	8004b98 <_printf_i+0x28>
 8004b88:	2f62      	cmp	r7, #98	; 0x62
 8004b8a:	d80a      	bhi.n	8004ba2 <_printf_i+0x32>
 8004b8c:	2f00      	cmp	r7, #0
 8004b8e:	f000 80d4 	beq.w	8004d3a <_printf_i+0x1ca>
 8004b92:	2f58      	cmp	r7, #88	; 0x58
 8004b94:	f000 80c0 	beq.w	8004d18 <_printf_i+0x1a8>
 8004b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ba0:	e03a      	b.n	8004c18 <_printf_i+0xa8>
 8004ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba6:	2b15      	cmp	r3, #21
 8004ba8:	d8f6      	bhi.n	8004b98 <_printf_i+0x28>
 8004baa:	a101      	add	r1, pc, #4	; (adr r1, 8004bb0 <_printf_i+0x40>)
 8004bac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004b99 	.word	0x08004b99
 8004bbc:	08004b99 	.word	0x08004b99
 8004bc0:	08004b99 	.word	0x08004b99
 8004bc4:	08004b99 	.word	0x08004b99
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b99 	.word	0x08004b99
 8004bd0:	08004b99 	.word	0x08004b99
 8004bd4:	08004b99 	.word	0x08004b99
 8004bd8:	08004b99 	.word	0x08004b99
 8004bdc:	08004d21 	.word	0x08004d21
 8004be0:	08004c49 	.word	0x08004c49
 8004be4:	08004cdb 	.word	0x08004cdb
 8004be8:	08004b99 	.word	0x08004b99
 8004bec:	08004b99 	.word	0x08004b99
 8004bf0:	08004d43 	.word	0x08004d43
 8004bf4:	08004b99 	.word	0x08004b99
 8004bf8:	08004c49 	.word	0x08004c49
 8004bfc:	08004b99 	.word	0x08004b99
 8004c00:	08004b99 	.word	0x08004b99
 8004c04:	08004ce3 	.word	0x08004ce3
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	602a      	str	r2, [r5, #0]
 8004c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e09f      	b.n	8004d5c <_printf_i+0x1ec>
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	682b      	ldr	r3, [r5, #0]
 8004c20:	0607      	lsls	r7, r0, #24
 8004c22:	f103 0104 	add.w	r1, r3, #4
 8004c26:	6029      	str	r1, [r5, #0]
 8004c28:	d501      	bpl.n	8004c2e <_printf_i+0xbe>
 8004c2a:	681e      	ldr	r6, [r3, #0]
 8004c2c:	e003      	b.n	8004c36 <_printf_i+0xc6>
 8004c2e:	0646      	lsls	r6, r0, #25
 8004c30:	d5fb      	bpl.n	8004c2a <_printf_i+0xba>
 8004c32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	da03      	bge.n	8004c42 <_printf_i+0xd2>
 8004c3a:	232d      	movs	r3, #45	; 0x2d
 8004c3c:	4276      	negs	r6, r6
 8004c3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c42:	485a      	ldr	r0, [pc, #360]	; (8004dac <_printf_i+0x23c>)
 8004c44:	230a      	movs	r3, #10
 8004c46:	e012      	b.n	8004c6e <_printf_i+0xfe>
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	1d19      	adds	r1, r3, #4
 8004c4e:	6029      	str	r1, [r5, #0]
 8004c50:	0605      	lsls	r5, r0, #24
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0xe8>
 8004c54:	681e      	ldr	r6, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <_printf_i+0xee>
 8004c58:	0641      	lsls	r1, r0, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0xe4>
 8004c5c:	881e      	ldrh	r6, [r3, #0]
 8004c5e:	4853      	ldr	r0, [pc, #332]	; (8004dac <_printf_i+0x23c>)
 8004c60:	2f6f      	cmp	r7, #111	; 0x6f
 8004c62:	bf0c      	ite	eq
 8004c64:	2308      	moveq	r3, #8
 8004c66:	230a      	movne	r3, #10
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c6e:	6865      	ldr	r5, [r4, #4]
 8004c70:	60a5      	str	r5, [r4, #8]
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	bfa2      	ittt	ge
 8004c76:	6821      	ldrge	r1, [r4, #0]
 8004c78:	f021 0104 	bicge.w	r1, r1, #4
 8004c7c:	6021      	strge	r1, [r4, #0]
 8004c7e:	b90e      	cbnz	r6, 8004c84 <_printf_i+0x114>
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	d04b      	beq.n	8004d1c <_printf_i+0x1ac>
 8004c84:	4615      	mov	r5, r2
 8004c86:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c8a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c8e:	5dc7      	ldrb	r7, [r0, r7]
 8004c90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c94:	4637      	mov	r7, r6
 8004c96:	42bb      	cmp	r3, r7
 8004c98:	460e      	mov	r6, r1
 8004c9a:	d9f4      	bls.n	8004c86 <_printf_i+0x116>
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d10b      	bne.n	8004cb8 <_printf_i+0x148>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	07de      	lsls	r6, r3, #31
 8004ca4:	d508      	bpl.n	8004cb8 <_printf_i+0x148>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	6861      	ldr	r1, [r4, #4]
 8004caa:	4299      	cmp	r1, r3
 8004cac:	bfde      	ittt	le
 8004cae:	2330      	movle	r3, #48	; 0x30
 8004cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cb8:	1b52      	subs	r2, r2, r5
 8004cba:	6122      	str	r2, [r4, #16]
 8004cbc:	f8cd a000 	str.w	sl, [sp]
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	aa03      	add	r2, sp, #12
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fee4 	bl	8004a94 <_printf_common>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d14a      	bne.n	8004d66 <_printf_i+0x1f6>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	b004      	add	sp, #16
 8004cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	f043 0320 	orr.w	r3, r3, #32
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	4833      	ldr	r0, [pc, #204]	; (8004db0 <_printf_i+0x240>)
 8004ce4:	2778      	movs	r7, #120	; 0x78
 8004ce6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	6829      	ldr	r1, [r5, #0]
 8004cee:	061f      	lsls	r7, r3, #24
 8004cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cf4:	d402      	bmi.n	8004cfc <_printf_i+0x18c>
 8004cf6:	065f      	lsls	r7, r3, #25
 8004cf8:	bf48      	it	mi
 8004cfa:	b2b6      	uxthmi	r6, r6
 8004cfc:	07df      	lsls	r7, r3, #31
 8004cfe:	bf48      	it	mi
 8004d00:	f043 0320 	orrmi.w	r3, r3, #32
 8004d04:	6029      	str	r1, [r5, #0]
 8004d06:	bf48      	it	mi
 8004d08:	6023      	strmi	r3, [r4, #0]
 8004d0a:	b91e      	cbnz	r6, 8004d14 <_printf_i+0x1a4>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	f023 0320 	bic.w	r3, r3, #32
 8004d12:	6023      	str	r3, [r4, #0]
 8004d14:	2310      	movs	r3, #16
 8004d16:	e7a7      	b.n	8004c68 <_printf_i+0xf8>
 8004d18:	4824      	ldr	r0, [pc, #144]	; (8004dac <_printf_i+0x23c>)
 8004d1a:	e7e4      	b.n	8004ce6 <_printf_i+0x176>
 8004d1c:	4615      	mov	r5, r2
 8004d1e:	e7bd      	b.n	8004c9c <_printf_i+0x12c>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	6826      	ldr	r6, [r4, #0]
 8004d24:	6961      	ldr	r1, [r4, #20]
 8004d26:	1d18      	adds	r0, r3, #4
 8004d28:	6028      	str	r0, [r5, #0]
 8004d2a:	0635      	lsls	r5, r6, #24
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	d501      	bpl.n	8004d34 <_printf_i+0x1c4>
 8004d30:	6019      	str	r1, [r3, #0]
 8004d32:	e002      	b.n	8004d3a <_printf_i+0x1ca>
 8004d34:	0670      	lsls	r0, r6, #25
 8004d36:	d5fb      	bpl.n	8004d30 <_printf_i+0x1c0>
 8004d38:	8019      	strh	r1, [r3, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6123      	str	r3, [r4, #16]
 8004d3e:	4615      	mov	r5, r2
 8004d40:	e7bc      	b.n	8004cbc <_printf_i+0x14c>
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	1d1a      	adds	r2, r3, #4
 8004d46:	602a      	str	r2, [r5, #0]
 8004d48:	681d      	ldr	r5, [r3, #0]
 8004d4a:	6862      	ldr	r2, [r4, #4]
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7fb fa6e 	bl	8000230 <memchr>
 8004d54:	b108      	cbz	r0, 8004d5a <_printf_i+0x1ea>
 8004d56:	1b40      	subs	r0, r0, r5
 8004d58:	6060      	str	r0, [r4, #4]
 8004d5a:	6863      	ldr	r3, [r4, #4]
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d64:	e7aa      	b.n	8004cbc <_printf_i+0x14c>
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	462a      	mov	r2, r5
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	47d0      	blx	sl
 8004d70:	3001      	adds	r0, #1
 8004d72:	d0ad      	beq.n	8004cd0 <_printf_i+0x160>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	079b      	lsls	r3, r3, #30
 8004d78:	d413      	bmi.n	8004da2 <_printf_i+0x232>
 8004d7a:	68e0      	ldr	r0, [r4, #12]
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	4298      	cmp	r0, r3
 8004d80:	bfb8      	it	lt
 8004d82:	4618      	movlt	r0, r3
 8004d84:	e7a6      	b.n	8004cd4 <_printf_i+0x164>
 8004d86:	2301      	movs	r3, #1
 8004d88:	4632      	mov	r2, r6
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	47d0      	blx	sl
 8004d90:	3001      	adds	r0, #1
 8004d92:	d09d      	beq.n	8004cd0 <_printf_i+0x160>
 8004d94:	3501      	adds	r5, #1
 8004d96:	68e3      	ldr	r3, [r4, #12]
 8004d98:	9903      	ldr	r1, [sp, #12]
 8004d9a:	1a5b      	subs	r3, r3, r1
 8004d9c:	42ab      	cmp	r3, r5
 8004d9e:	dcf2      	bgt.n	8004d86 <_printf_i+0x216>
 8004da0:	e7eb      	b.n	8004d7a <_printf_i+0x20a>
 8004da2:	2500      	movs	r5, #0
 8004da4:	f104 0619 	add.w	r6, r4, #25
 8004da8:	e7f5      	b.n	8004d96 <_printf_i+0x226>
 8004daa:	bf00      	nop
 8004dac:	08004f31 	.word	0x08004f31
 8004db0:	08004f42 	.word	0x08004f42

08004db4 <memmove>:
 8004db4:	4288      	cmp	r0, r1
 8004db6:	b510      	push	{r4, lr}
 8004db8:	eb01 0402 	add.w	r4, r1, r2
 8004dbc:	d902      	bls.n	8004dc4 <memmove+0x10>
 8004dbe:	4284      	cmp	r4, r0
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	d807      	bhi.n	8004dd4 <memmove+0x20>
 8004dc4:	1e43      	subs	r3, r0, #1
 8004dc6:	42a1      	cmp	r1, r4
 8004dc8:	d008      	beq.n	8004ddc <memmove+0x28>
 8004dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dd2:	e7f8      	b.n	8004dc6 <memmove+0x12>
 8004dd4:	4402      	add	r2, r0
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	428a      	cmp	r2, r1
 8004dda:	d100      	bne.n	8004dde <memmove+0x2a>
 8004ddc:	bd10      	pop	{r4, pc}
 8004dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004de6:	e7f7      	b.n	8004dd8 <memmove+0x24>

08004de8 <_sbrk_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4d06      	ldr	r5, [pc, #24]	; (8004e04 <_sbrk_r+0x1c>)
 8004dec:	2300      	movs	r3, #0
 8004dee:	4604      	mov	r4, r0
 8004df0:	4608      	mov	r0, r1
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	f7fb fec6 	bl	8000b84 <_sbrk>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_sbrk_r+0x1a>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_sbrk_r+0x1a>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	2000034c 	.word	0x2000034c

08004e08 <memcpy>:
 8004e08:	440a      	add	r2, r1
 8004e0a:	4291      	cmp	r1, r2
 8004e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e10:	d100      	bne.n	8004e14 <memcpy+0xc>
 8004e12:	4770      	bx	lr
 8004e14:	b510      	push	{r4, lr}
 8004e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1e:	4291      	cmp	r1, r2
 8004e20:	d1f9      	bne.n	8004e16 <memcpy+0xe>
 8004e22:	bd10      	pop	{r4, pc}

08004e24 <_realloc_r>:
 8004e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e28:	4680      	mov	r8, r0
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	460e      	mov	r6, r1
 8004e2e:	b921      	cbnz	r1, 8004e3a <_realloc_r+0x16>
 8004e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e34:	4611      	mov	r1, r2
 8004e36:	f7ff bc49 	b.w	80046cc <_malloc_r>
 8004e3a:	b92a      	cbnz	r2, 8004e48 <_realloc_r+0x24>
 8004e3c:	f7ff fbda 	bl	80045f4 <_free_r>
 8004e40:	4625      	mov	r5, r4
 8004e42:	4628      	mov	r0, r5
 8004e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e48:	f000 f81b 	bl	8004e82 <_malloc_usable_size_r>
 8004e4c:	4284      	cmp	r4, r0
 8004e4e:	4607      	mov	r7, r0
 8004e50:	d802      	bhi.n	8004e58 <_realloc_r+0x34>
 8004e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e56:	d812      	bhi.n	8004e7e <_realloc_r+0x5a>
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	f7ff fc36 	bl	80046cc <_malloc_r>
 8004e60:	4605      	mov	r5, r0
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d0ed      	beq.n	8004e42 <_realloc_r+0x1e>
 8004e66:	42bc      	cmp	r4, r7
 8004e68:	4622      	mov	r2, r4
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	bf28      	it	cs
 8004e6e:	463a      	movcs	r2, r7
 8004e70:	f7ff ffca 	bl	8004e08 <memcpy>
 8004e74:	4631      	mov	r1, r6
 8004e76:	4640      	mov	r0, r8
 8004e78:	f7ff fbbc 	bl	80045f4 <_free_r>
 8004e7c:	e7e1      	b.n	8004e42 <_realloc_r+0x1e>
 8004e7e:	4635      	mov	r5, r6
 8004e80:	e7df      	b.n	8004e42 <_realloc_r+0x1e>

08004e82 <_malloc_usable_size_r>:
 8004e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e86:	1f18      	subs	r0, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	bfbc      	itt	lt
 8004e8c:	580b      	ldrlt	r3, [r1, r0]
 8004e8e:	18c0      	addlt	r0, r0, r3
 8004e90:	4770      	bx	lr
	...

08004e94 <_init>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr

08004ea0 <_fini>:
 8004ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea2:	bf00      	nop
 8004ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea6:	bc08      	pop	{r3}
 8004ea8:	469e      	mov	lr, r3
 8004eaa:	4770      	bx	lr
