
CS9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080037a4  080037a4  000137a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800380c  0800380c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800380c  0800380c  0001380c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003814  08003814  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003818  08003818  00013818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800381c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000014  08003830  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003830  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e594  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c88  00000000  00000000  0002e61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  000302a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cf  00000000  00000000  00030e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248cb  00000000  00000000  000316ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d403  00000000  00000000  00055fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eabdc  00000000  00000000  000633bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f88  00000000  00000000  0014df9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00150f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800378c 	.word	0x0800378c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	0800378c 	.word	0x0800378c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fae4 	bl	8000ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f84f 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f929 	bl	8000778 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000526:	f000 f8dd 	bl	80006e4 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 800052a:	f000 f895 	bl	8000658 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_FilterTypeDef sFilterConfig =
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <main+0x94>)
 8000530:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000534:	461d      	mov	r5, r3
 8000536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800053e:	e884 0003 	stmia.w	r4, {r0, r1}
  .FilterID1 = 0x123,
  .FilterID2 = 0x123,
  .IdType = FDCAN_STANDARD_ID,
  .FilterType = FDCAN_FILTER_RANGE
  };
  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000546:	4619      	mov	r1, r3
 8000548:	4818      	ldr	r0, [pc, #96]	; (80005ac <main+0x98>)
 800054a:	f000 fdc9 	bl	80010e0 <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_Start(&hfdcan1);
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <main+0x98>)
 8000550:	f000 fe20 	bl	8001194 <HAL_FDCAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  FDCAN_TxHeaderTypeDef pTxHeader = {
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2224      	movs	r2, #36	; 0x24
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 f8ea 	bl	8003734 <memset>
 8000560:	f240 1323 	movw	r3, #291	; 0x123
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	2308      	movs	r3, #8
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	623b      	str	r3, [r7, #32]
 8000570:	2301      	movs	r3, #1
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
	  .Identifier = 0x123,
	  .MessageMarker = 1,
	  .TxEventFifoControl = FDCAN_TX_EVENT
	  };

	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <main+0x9c>)
 800057a:	f001 f9e9 	bl	8001950 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d009      	beq.n	8000598 <main+0x84>
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &pTxHeader, pTxData);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <main+0xa0>)
 8000588:	4619      	mov	r1, r3
 800058a:	4808      	ldr	r0, [pc, #32]	; (80005ac <main+0x98>)
 800058c:	f000 fe2a 	bl	80011e4 <HAL_FDCAN_AddMessageToTxFifoQ>
	  HAL_Delay(1000);}
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f000 fb18 	bl	8000bc8 <HAL_Delay>
	  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &pRxHeader, data);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <main+0xa4>)
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <main+0xa8>)
 800059c:	2140      	movs	r1, #64	; 0x40
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <main+0x98>)
 80005a0:	f000 fe64 	bl	800126c <HAL_FDCAN_GetRxMessage>
  {
 80005a4:	e7d6      	b.n	8000554 <main+0x40>
 80005a6:	bf00      	nop
 80005a8:	080037a4 	.word	0x080037a4
 80005ac:	20000030 	.word	0x20000030
 80005b0:	48000800 	.word	0x48000800
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000150 	.word	0x20000150
 80005bc:	20000128 	.word	0x20000128

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	2238      	movs	r2, #56	; 0x38
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f8b0 	bl	8003734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f001 fa08 	bl	80019f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	2340      	movs	r3, #64	; 0x40
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005fe:	2304      	movs	r3, #4
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000602:	2355      	movs	r3, #85	; 0x55
 8000604:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	4618      	mov	r0, r3
 8000618:	f001 faa2 	bl	8001b60 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000622:	f000 f917 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2104      	movs	r1, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fda0 	bl	8002184 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800064a:	f000 f903 	bl	8000854 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_FDCAN1_Init+0x84>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <MX_FDCAN1_Init+0x88>)
 8000660:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_FDCAN1_Init+0x84>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_FDCAN1_Init+0x84>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_FDCAN1_Init+0x84>)
 8000670:	2203      	movs	r2, #3
 8000672:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_FDCAN1_Init+0x84>)
 8000676:	2200      	movs	r2, #0
 8000678:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_FDCAN1_Init+0x84>)
 800067c:	2200      	movs	r2, #0
 800067e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_FDCAN1_Init+0x84>)
 8000682:	2200      	movs	r2, #0
 8000684:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_FDCAN1_Init+0x84>)
 8000688:	2211      	movs	r2, #17
 800068a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_FDCAN1_Init+0x84>)
 800068e:	2201      	movs	r2, #1
 8000690:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_FDCAN1_Init+0x84>)
 8000694:	2207      	movs	r2, #7
 8000696:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_FDCAN1_Init+0x84>)
 800069a:	2202      	movs	r2, #2
 800069c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_FDCAN1_Init+0x84>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_FDCAN1_Init+0x84>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 7;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_FDCAN1_Init+0x84>)
 80006ac:	2207      	movs	r2, #7
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_FDCAN1_Init+0x84>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_FDCAN1_Init+0x84>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_FDCAN1_Init+0x84>)
 80006be:	2200      	movs	r2, #0
 80006c0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_FDCAN1_Init+0x84>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_FDCAN1_Init+0x84>)
 80006ca:	f000 fbaf 	bl	8000e2c <HAL_FDCAN_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006d4:	f000 f8be 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000030 	.word	0x20000030
 80006e0:	40006400 	.word	0x40006400

080006e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	4a22      	ldr	r2, [pc, #136]	; (8000774 <MX_LPUART1_UART_Init+0x90>)
 80006ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	f002 f996 	bl	8002a58 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f88f 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	f002 ff31 	bl	80035a0 <HAL_UARTEx_SetTxFifoThreshold>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000744:	f000 f886 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f002 ff66 	bl	800361c <HAL_UARTEx_SetRxFifoThreshold>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000756:	f000 f87d 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800075c:	f002 fee7 	bl	800352e <HAL_UARTEx_DisableFifoMode>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000766:	f000 f875 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000094 	.word	0x20000094
 8000774:	40008000 	.word	0x40008000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_GPIO_Init+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a2e      	ldr	r2, [pc, #184]	; (800084c <MX_GPIO_Init+0xd4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_GPIO_Init+0xd4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0xd4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <MX_GPIO_Init+0xd4>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xd4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xd4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_GPIO_Init+0xd4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0xd4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_GPIO_Init+0xd4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_GPIO_Init+0xd4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_GPIO_Init+0xd4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f001 f8c3 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000800:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <MX_GPIO_Init+0xd8>)
 8000812:	f000 ff1b 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000816:	2320      	movs	r3, #32
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 ff0c 	bl	800164c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f000 fac2 	bl	8000dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f000 fad9 	bl	8000df6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	48000800 	.word	0x48000800

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6613      	str	r3, [r2, #96]	; 0x60
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000896:	f001 f953 	bl	8001b40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09e      	sub	sp, #120	; 0x78
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	2254      	movs	r2, #84	; 0x54
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 ff33 	bl	8003734 <memset>
  if(hfdcan->Instance==FDCAN1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a20      	ldr	r2, [pc, #128]	; (8000954 <HAL_FDCAN_MspInit+0xac>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d139      	bne.n	800094c <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80008de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fe67 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008f4:	f7ff ffae 	bl	8000854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_FDCAN_MspInit+0xb0>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fc:	4a16      	ldr	r2, [pc, #88]	; (8000958 <HAL_FDCAN_MspInit+0xb0>)
 80008fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000902:	6593      	str	r3, [r2, #88]	; 0x58
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_FDCAN_MspInit+0xb0>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_FDCAN_MspInit+0xb0>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	4a10      	ldr	r2, [pc, #64]	; (8000958 <HAL_FDCAN_MspInit+0xb0>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <HAL_FDCAN_MspInit+0xb0>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000928:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800093a:	2309      	movs	r3, #9
 800093c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fe80 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800094c:	bf00      	nop
 800094e:	3778      	adds	r7, #120	; 0x78
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40006400 	.word	0x40006400
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09e      	sub	sp, #120	; 0x78
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	2254      	movs	r2, #84	; 0x54
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f002 fed9 	bl	8003734 <memset>
  if(huart->Instance==LPUART1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <HAL_UART_MspInit+0xa8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d136      	bne.n	80009fa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800098c:	2320      	movs	r3, #32
 800098e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fe0f 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009a4:	f7ff ff56 	bl	8000854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0xac>)
 80009aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <HAL_UART_MspInit+0xac>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_UART_MspInit+0xac>)
 80009b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_UART_MspInit+0xac>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_UART_MspInit+0xac>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_UART_MspInit+0xac>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009d8:	230c      	movs	r3, #12
 80009da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009e8:	230c      	movs	r3, #12
 80009ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009f0:	4619      	mov	r1, r3
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f000 fe29 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3778      	adds	r7, #120	; 0x78
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40008000 	.word	0x40008000
 8000a08:	40021000 	.word	0x40021000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f898 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a68:	f000 ffa2 	bl	80019b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a98:	f7ff ffea 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9e:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <LoopForever+0xe>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab4:	4c0a      	ldr	r4, [pc, #40]	; (8000ae0 <LoopForever+0x16>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f002 fe3f 	bl	8003744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac6:	f7ff fd25 	bl	8000514 <main>

08000aca <LoopForever>:

LoopForever:
    b LoopForever
 8000aca:	e7fe      	b.n	8000aca <LoopForever>
  ldr   r0, =_estack
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ad8:	0800381c 	.word	0x0800381c
  ldr r2, =_sbss
 8000adc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ae0:	2000015c 	.word	0x2000015c

08000ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC1_2_IRQHandler>

08000ae6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f95b 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f80e 	bl	8000b18 <HAL_InitTick>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	e001      	b.n	8000b0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b08:	f7ff feaa 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_InitTick+0x68>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d022      	beq.n	8000b72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_InitTick+0x68>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 f966 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10f      	bne.n	8000b6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	d809      	bhi.n	8000b66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b52:	2200      	movs	r2, #0
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5a:	f000 f932 	bl	8000dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_InitTick+0x70>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	e007      	b.n	8000b76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e004      	b.n	8000b76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e001      	b.n	8000b76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000010 	.word	0x20000010
 8000b84:	20000008 	.word	0x20000008
 8000b88:	2000000c 	.word	0x2000000c

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x20>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b9c:	6013      	str	r3, [r2, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	20000158 	.word	0x20000158
 8000bac:	20000010 	.word	0x20000010

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000158 	.word	0x20000158

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d004      	beq.n	8000bec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_Delay+0x40>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	4413      	add	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bec:	bf00      	nop
 8000bee:	f7ff ffdf 	bl	8000bb0 <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d8f7      	bhi.n	8000bee <HAL_Delay+0x26>
  {
  }
}
 8000bfe:	bf00      	nop
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000010 	.word	0x20000010

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff40 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff90 	bl	8000d00 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5f 	bl	8000cac <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff33 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa4 	bl	8000d68 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e147      	b.n	80010ce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d106      	bne.n	8000e58 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff fd28 	bl	80008a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	699a      	ldr	r2, [r3, #24]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0210 	bic.w	r2, r2, #16
 8000e66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e68:	f7ff fea2 	bl	8000bb0 <HAL_GetTick>
 8000e6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e6e:	e012      	b.n	8000e96 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e70:	f7ff fe9e 	bl	8000bb0 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b0a      	cmp	r3, #10
 8000e7c:	d90b      	bls.n	8000e96 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f043 0201 	orr.w	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e11b      	b.n	80010ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	d0e5      	beq.n	8000e70 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb4:	f7ff fe7c 	bl	8000bb0 <HAL_GetTick>
 8000eb8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000eba:	e012      	b.n	8000ee2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ebc:	f7ff fe78 	bl	8000bb0 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b0a      	cmp	r3, #10
 8000ec8:	d90b      	bls.n	8000ee2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ece:	f043 0201 	orr.w	r2, r3, #1
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e0f5      	b.n	80010ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0e5      	beq.n	8000ebc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0202 	orr.w	r2, r2, #2
 8000efe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a74      	ldr	r2, [pc, #464]	; (80010d8 <HAL_FDCAN_Init+0x2ac>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d103      	bne.n	8000f12 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000f0a:	4a74      	ldr	r2, [pc, #464]	; (80010dc <HAL_FDCAN_Init+0x2b0>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7c1b      	ldrb	r3, [r3, #16]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d108      	bne.n	8000f2c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	699a      	ldr	r2, [r3, #24]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f28:	619a      	str	r2, [r3, #24]
 8000f2a:	e007      	b.n	8000f3c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	699a      	ldr	r2, [r3, #24]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7c5b      	ldrb	r3, [r3, #17]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	699a      	ldr	r2, [r3, #24]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f52:	619a      	str	r2, [r3, #24]
 8000f54:	e007      	b.n	8000f66 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	699a      	ldr	r2, [r3, #24]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f64:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7c9b      	ldrb	r3, [r3, #18]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d108      	bne.n	8000f80 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	699a      	ldr	r2, [r3, #24]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f7c:	619a      	str	r2, [r3, #24]
 8000f7e:	e007      	b.n	8000f90 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f8e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699a      	ldr	r2, [r3, #24]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000fb4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	691a      	ldr	r2, [r3, #16]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0210 	bic.w	r2, r2, #16
 8000fc4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d108      	bne.n	8000fe0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	699a      	ldr	r2, [r3, #24]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0204 	orr.w	r2, r2, #4
 8000fdc:	619a      	str	r2, [r3, #24]
 8000fde:	e02c      	b.n	800103a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d028      	beq.n	800103a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d01c      	beq.n	800102a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ffe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	691a      	ldr	r2, [r3, #16]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0210 	orr.w	r2, r2, #16
 800100e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d110      	bne.n	800103a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	699a      	ldr	r2, [r3, #24]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0220 	orr.w	r2, r2, #32
 8001026:	619a      	str	r2, [r3, #24]
 8001028:	e007      	b.n	800103a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	699a      	ldr	r2, [r3, #24]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0220 	orr.w	r2, r2, #32
 8001038:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	3b01      	subs	r3, #1
 8001040:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	3b01      	subs	r3, #1
 8001048:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800104a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001052:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	3b01      	subs	r3, #1
 800105c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001062:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001064:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800106e:	d115      	bne.n	800109c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	3b01      	subs	r3, #1
 800107c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800107e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	3b01      	subs	r3, #1
 8001086:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001088:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	3b01      	subs	r3, #1
 8001092:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001098:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800109a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f9e2 	bl	800147c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40006400 	.word	0x40006400
 80010dc:	40006500 	.word	0x40006500

080010e0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80010f0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d002      	beq.n	80010fe <HAL_FDCAN_ConfigFilter+0x1e>
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d13d      	bne.n	800117a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d119      	bne.n	800113a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001112:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800111a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e01d      	b.n	8001176 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	075a      	lsls	r2, r3, #29
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	079a      	lsls	r2, r3, #30
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3304      	adds	r3, #4
 800116e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e006      	b.n	8001188 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	f043 0202 	orr.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
  }
}
 8001188:	4618      	mov	r0, r3
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d110      	bne.n	80011ca <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e006      	b.n	80011d8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f043 0204 	orr.w	r2, r3, #4
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
  }
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d12c      	bne.n	8001256 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e023      	b.n	8001264 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001224:	0c1b      	lsrs	r3, r3, #16
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 f98e 	bl	8001554 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	fa01 f202 	lsl.w	r2, r1, r2
 8001244:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001248:	2201      	movs	r2, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	409a      	lsls	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e006      	b.n	8001264 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	f043 0208 	orr.w	r2, r3, #8
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
  }
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800126c:	b480      	push	{r7}
 800126e:	b08b      	sub	sp, #44	; 0x2c
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001284:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	2b02      	cmp	r3, #2
 800128a:	f040 80e8 	bne.w	800145e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b40      	cmp	r3, #64	; 0x40
 8001292:	d137      	bne.n	8001304 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0db      	b.n	800146c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012bc:	0e1b      	lsrs	r3, r3, #24
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10a      	bne.n	80012dc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ce:	0a5b      	lsrs	r3, r3, #9
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d101      	bne.n	80012dc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80012d8:	2301      	movs	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	4413      	add	r3, r2
 80012ee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	4613      	mov	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
 8001302:	e036      	b.n	8001372 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	2b00      	cmp	r3, #0
 8001312:	d107      	bne.n	8001324 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001318:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0a3      	b.n	800146c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800132c:	0e1b      	lsrs	r3, r3, #24
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10a      	bne.n	800134c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	4413      	add	r3, r2
 800135e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001364:	69fa      	ldr	r2, [r7, #28]
 8001366:	4613      	mov	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d107      	bne.n	8001396 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	0c9b      	lsrs	r3, r3, #18
 800138c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e005      	b.n	80013a2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	3304      	adds	r3, #4
 80013be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	f003 020f 	and.w	r2, r3, #15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0e1b      	lsrs	r3, r3, #24
 80013f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	0fda      	lsrs	r2, r3, #31
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	3304      	adds	r3, #4
 800140c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
 8001416:	e00a      	b.n	800142e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	441a      	add	r2, r3
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	440b      	add	r3, r1
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	3301      	adds	r3, #1
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	461a      	mov	r2, r3
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	4293      	cmp	r3, r2
 800143c:	d3ec      	bcc.n	8001418 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b40      	cmp	r3, #64	; 0x40
 8001442:	d105      	bne.n	8001450 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800144e:	e004      	b.n	800145a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e006      	b.n	800146c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	f043 0208 	orr.w	r2, r3, #8
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	372c      	adds	r7, #44	; 0x2c
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	080037d4 	.word	0x080037d4

0800147c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001484:	4b30      	ldr	r3, [pc, #192]	; (8001548 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001486:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2f      	ldr	r2, [pc, #188]	; (800154c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d103      	bne.n	800149a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001498:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d103      	bne.n	80014ac <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80014aa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ba:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c2:	041a      	lsls	r2, r3, #16
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e8:	061a      	lsls	r2, r3, #24
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e005      	b.n	800152e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3304      	adds	r3, #4
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3f3      	bcc.n	8001522 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800153a:	bf00      	nop
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	4000a400 	.word	0x4000a400
 800154c:	40006800 	.word	0x40006800
 8001550:	40006c00 	.word	0x40006c00

08001554 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10a      	bne.n	8001580 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001572:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800157a:	4313      	orrs	r3, r2
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e00a      	b.n	8001596 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001588:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800158e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001594:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80015a0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80015a6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80015ac:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	4613      	mov	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	440b      	add	r3, r1
 80015c8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	3304      	adds	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	3304      	adds	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e020      	b.n	800162a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3303      	adds	r3, #3
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3302      	adds	r3, #2
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	440b      	add	r3, r1
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001600:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	440b      	add	r3, r1
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800160e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	440a      	add	r2, r1
 8001616:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001618:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	3304      	adds	r3, #4
 8001622:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3304      	adds	r3, #4
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4a06      	ldr	r2, [pc, #24]	; (8001648 <FDCAN_CopyMessageToRAM+0xf4>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	461a      	mov	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	4293      	cmp	r3, r2
 8001638:	d3d6      	bcc.n	80015e8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	3724      	adds	r7, #36	; 0x24
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	080037d4 	.word	0x080037d4

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800165a:	e15a      	b.n	8001912 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 814c 	beq.w	800190c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d005      	beq.n	800168c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001688:	2b02      	cmp	r3, #2
 800168a:	d130      	bne.n	80016ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 0201 	and.w	r2, r3, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d017      	beq.n	800172a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d123      	bne.n	800177e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	6939      	ldr	r1, [r7, #16]
 800177a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0203 	and.w	r2, r3, #3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80a6 	beq.w	800190c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c0:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c4:	4a5a      	ldr	r2, [pc, #360]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6613      	str	r3, [r2, #96]	; 0x60
 80017cc:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d8:	4a56      	ldr	r2, [pc, #344]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001802:	d01f      	beq.n	8001844 <HAL_GPIO_Init+0x1f8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <HAL_GPIO_Init+0x2ec>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d019      	beq.n	8001840 <HAL_GPIO_Init+0x1f4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a4b      	ldr	r2, [pc, #300]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d013      	beq.n	800183c <HAL_GPIO_Init+0x1f0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a4a      	ldr	r2, [pc, #296]	; (8001940 <HAL_GPIO_Init+0x2f4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00d      	beq.n	8001838 <HAL_GPIO_Init+0x1ec>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a49      	ldr	r2, [pc, #292]	; (8001944 <HAL_GPIO_Init+0x2f8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d007      	beq.n	8001834 <HAL_GPIO_Init+0x1e8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a48      	ldr	r2, [pc, #288]	; (8001948 <HAL_GPIO_Init+0x2fc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_GPIO_Init+0x1e4>
 800182c:	2305      	movs	r3, #5
 800182e:	e00a      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001830:	2306      	movs	r3, #6
 8001832:	e008      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001834:	2304      	movs	r3, #4
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001838:	2303      	movs	r3, #3
 800183a:	e004      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 800183c:	2302      	movs	r3, #2
 800183e:	e002      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001844:	2300      	movs	r3, #0
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	f002 0203 	and.w	r2, r2, #3
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	4093      	lsls	r3, r2
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001856:	4937      	ldr	r1, [pc, #220]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001864:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_GPIO_Init+0x300>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001888:	4a30      	ldr	r2, [pc, #192]	; (800194c <HAL_GPIO_Init+0x300>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <HAL_GPIO_Init+0x300>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b2:	4a26      	ldr	r2, [pc, #152]	; (800194c <HAL_GPIO_Init+0x300>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_GPIO_Init+0x300>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018dc:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_GPIO_Init+0x300>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_GPIO_Init+0x300>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <HAL_GPIO_Init+0x300>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f ae9d 	bne.w	800165c <HAL_GPIO_Init+0x10>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800
 8001940:	48000c00 	.word	0x48000c00
 8001944:	48001000 	.word	0x48001000
 8001948:	48001400 	.word	0x48001400
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f806 	bl	80019e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d141      	bne.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a06:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a12:	d131      	bne.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a1a:	4a46      	ldr	r2, [pc, #280]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2c:	4a41      	ldr	r2, [pc, #260]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2232      	movs	r2, #50	; 0x32
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	4a3f      	ldr	r2, [pc, #252]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9b      	lsrs	r3, r3, #18
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4a:	e002      	b.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d102      	bne.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f2      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d158      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e057      	b.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a7e:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a88:	e04d      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a90:	d141      	bne.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9e:	d131      	bne.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2232      	movs	r2, #50	; 0x32
 8001ac6:	fb02 f303 	mul.w	r3, r2, r3
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9b      	lsrs	r3, r3, #18
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad6:	e002      	b.n	8001ade <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aea:	d102      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f2      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	d112      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e011      	b.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b14:	e007      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40007000 	.word	0x40007000
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	431bde83 	.word	0x431bde83

08001b40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4e:	6093      	str	r3, [r2, #8]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40007000 	.word	0x40007000

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e2fe      	b.n	8002170 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d075      	beq.n	8001c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7e:	4b97      	ldr	r3, [pc, #604]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b88:	4b94      	ldr	r3, [pc, #592]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3e>
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x44>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d10b      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	4b8d      	ldr	r3, [pc, #564]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d05b      	beq.n	8001c68 <HAL_RCC_OscConfig+0x108>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d157      	bne.n	8001c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e2d9      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x74>
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a84      	ldr	r2, [pc, #528]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xb0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x98>
 8001bde:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b7c      	ldr	r3, [pc, #496]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7b      	ldr	r2, [pc, #492]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xb0>
 8001bf8:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a77      	ldr	r2, [pc, #476]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a74      	ldr	r2, [pc, #464]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe ffca 	bl	8000bb0 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7fe ffc6 	bl	8000bb0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e29e      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xc0>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7fe ffb6 	bl	8000bb0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7fe ffb2 	bl	8000bb0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e28a      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0xe8>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d075      	beq.n	8001d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c76:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c80:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_OscConfig+0x136>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_OscConfig+0x13c>
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d11f      	bne.n	8001cdc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x154>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e25d      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	4946      	ldr	r1, [pc, #280]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HAL_RCC_OscConfig+0x280>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe ff23 	bl	8000b18 <HAL_InitTick>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d043      	beq.n	8001d60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e249      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d023      	beq.n	8001d2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3c      	ldr	r2, [pc, #240]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7fe ff5e 	bl	8000bb0 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7fe ff5a 	bl	8000bb0 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e232      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	492d      	ldr	r1, [pc, #180]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
 8001d2a:	e01a      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7fe ff3a 	bl	8000bb0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7fe ff36 	bl	8000bb0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e20e      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1e0>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d041      	beq.n	8001df2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff13 	bl	8000bb0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7fe ff0f 	bl	8000bb0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1e7      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ef      	beq.n	8001d8e <HAL_RCC_OscConfig+0x22e>
 8001dae:	e020      	b.n	8001df2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7fe fef6 	bl	8000bb0 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc6:	e00d      	b.n	8001de4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7fe fef2 	bl	8000bb0 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d906      	bls.n	8001de4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1ca      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de4:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ea      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80a6 	beq.w	8001f4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e04:	4b84      	ldr	r3, [pc, #528]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2b4>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x2b6>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00d      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	4a7e      	ldr	r2, [pc, #504]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
 8001e26:	4b7c      	ldr	r3, [pc, #496]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e32:	2301      	movs	r3, #1
 8001e34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e36:	4b79      	ldr	r3, [pc, #484]	; (800201c <HAL_RCC_OscConfig+0x4bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d118      	bne.n	8001e74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e42:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_RCC_OscConfig+0x4bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a75      	ldr	r2, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x4bc>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe feaf 	bl	8000bb0 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7fe feab 	bl	8000bb0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e183      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e68:	4b6c      	ldr	r3, [pc, #432]	; (800201c <HAL_RCC_OscConfig+0x4bc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d108      	bne.n	8001e8e <HAL_RCC_OscConfig+0x32e>
 8001e7c:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8c:	e024      	b.n	8001ed8 <HAL_RCC_OscConfig+0x378>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d110      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x358>
 8001e96:	4b60      	ldr	r3, [pc, #384]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	4a5e      	ldr	r2, [pc, #376]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	4a5a      	ldr	r2, [pc, #360]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb6:	e00f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x378>
 8001eb8:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d016      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7fe fe66 	bl	8000bb0 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe fe62 	bl	8000bb0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e138      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ed      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x388>
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fe4f 	bl	8000bb0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7fe fe4b 	bl	8000bb0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e121      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ed      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	4a34      	ldr	r2, [pc, #208]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d03c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f66:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7fe fe1e 	bl	8000bb0 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f78:	f7fe fe1a 	bl	8000bb0 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0f2      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ef      	beq.n	8001f78 <HAL_RCC_OscConfig+0x418>
 8001f98:	e01b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7fe fe01 	bl	8000bb0 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb2:	f7fe fdfd 	bl	8000bb0 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0d5      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ef      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80c9 	beq.w	800216e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	f000 8083 	beq.w	80020f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d15e      	bne.n	80020b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fdd7 	bl	8000bb0 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	e00c      	b.n	8002020 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7fe fdd3 	bl	8000bb0 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d905      	bls.n	8002020 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0ab      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	4b55      	ldr	r3, [pc, #340]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1ec      	bne.n	8002006 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b52      	ldr	r3, [pc, #328]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_RCC_OscConfig+0x61c>)
 8002032:	4013      	ands	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6a11      	ldr	r1, [r2, #32]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800203c:	3a01      	subs	r2, #1
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002046:	0212      	lsls	r2, r2, #8
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800204e:	0852      	lsrs	r2, r2, #1
 8002050:	3a01      	subs	r2, #1
 8002052:	0552      	lsls	r2, r2, #21
 8002054:	4311      	orrs	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800205a:	0852      	lsrs	r2, r2, #1
 800205c:	3a01      	subs	r2, #1
 800205e:	0652      	lsls	r2, r2, #25
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002066:	06d2      	lsls	r2, r2, #27
 8002068:	430a      	orrs	r2, r1
 800206a:	4943      	ldr	r1, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a40      	ldr	r2, [pc, #256]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800207c:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a3d      	ldr	r2, [pc, #244]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002086:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fd92 	bl	8000bb0 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7fe fd8e 	bl	8000bb0 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e066      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	4b35      	ldr	r3, [pc, #212]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x530>
 80020ae:	e05e      	b.n	800216e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7fe fd78 	bl	8000bb0 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fd74 	bl	8000bb0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e04c      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4924      	ldr	r1, [pc, #144]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_RCC_OscConfig+0x620>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60cb      	str	r3, [r1, #12]
 80020ee:	e03e      	b.n	800216e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e039      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	429a      	cmp	r2, r3
 800210e:	d12c      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	3b01      	subs	r3, #1
 800211c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d123      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d11b      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d113      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d109      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	3b01      	subs	r3, #1
 8002164:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	019f800c 	.word	0x019f800c
 8002180:	feeefffc 	.word	0xfeeefffc

08002184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e11e      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b91      	ldr	r3, [pc, #580]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b8e      	ldr	r3, [pc, #568]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 020f 	bic.w	r2, r3, #15
 80021b2:	498c      	ldr	r1, [pc, #560]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b8a      	ldr	r3, [pc, #552]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e106      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d073      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d129      	bne.n	8002234 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e0:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0f4      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021f0:	f000 f99e 	bl	8002530 <RCC_GetSysClockFreqFromPLLSource>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4a7c      	ldr	r2, [pc, #496]	; (80023ec <HAL_RCC_ClockConfig+0x268>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d93f      	bls.n	800227e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021fe:	4b7a      	ldr	r3, [pc, #488]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002212:	2b00      	cmp	r3, #0
 8002214:	d033      	beq.n	800227e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12f      	bne.n	800227e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002226:	4a70      	ldr	r2, [pc, #448]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e024      	b.n	800227e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d107      	bne.n	800224c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0c6      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0be      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800225c:	f000 f8ce 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8002260:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4a61      	ldr	r2, [pc, #388]	; (80023ec <HAL_RCC_ClockConfig+0x268>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d909      	bls.n	800227e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002272:	4a5d      	ldr	r2, [pc, #372]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4957      	ldr	r1, [pc, #348]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002290:	f7fe fc8e 	bl	8000bb0 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7fe fc8a 	bl	8000bb0 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e095      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d023      	beq.n	8002314 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a42      	ldr	r2, [pc, #264]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022f8:	4a3b      	ldr	r2, [pc, #236]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4936      	ldr	r1, [pc, #216]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
 8002312:	e008      	b.n	8002326 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b80      	cmp	r3, #128	; 0x80
 8002318:	d105      	bne.n	8002326 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800231a:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4a32      	ldr	r2, [pc, #200]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002324:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002326:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d21d      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 020f 	bic.w	r2, r3, #15
 800233c:	4929      	ldr	r1, [pc, #164]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002344:	f7fe fc34 	bl	8000bb0 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7fe fc30 	bl	8000bb0 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e03b      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d1ed      	bne.n	800234c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4917      	ldr	r1, [pc, #92]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490f      	ldr	r1, [pc, #60]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ae:	f000 f825 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490c      	ldr	r1, [pc, #48]	; (80023f0 <HAL_RCC_ClockConfig+0x26c>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_RCC_ClockConfig+0x270>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fba0 	bl	8000b18 <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	04c4b400 	.word	0x04c4b400
 80023f0:	080037bc 	.word	0x080037bc
 80023f4:	20000008 	.word	0x20000008
 80023f8:	2000000c 	.word	0x2000000c

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002402:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d102      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800240e:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e047      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d102      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002420:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e03e      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d136      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d10c      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002450:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245a:	68d2      	ldr	r2, [r2, #12]
 800245c:	0a12      	lsrs	r2, r2, #8
 800245e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
      break;
 8002468:	e00c      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	0a12      	lsrs	r2, r2, #8
 8002478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
      break;
 8002482:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0e5b      	lsrs	r3, r3, #25
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	e001      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024a4:	693b      	ldr	r3, [r7, #16]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	00f42400 	.word	0x00f42400
 80024bc:	016e3600 	.word	0x016e3600

080024c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000008 	.word	0x20000008

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024dc:	f7ff fff0 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4904      	ldr	r1, [pc, #16]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	080037cc 	.word	0x080037cc

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002508:	f7ff ffda 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0adb      	lsrs	r3, r3, #11
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4904      	ldr	r1, [pc, #16]	; (800252c <HAL_RCC_GetPCLK2Freq+0x28>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	080037cc 	.word	0x080037cc

08002530 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3301      	adds	r3, #1
 800254c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d10c      	bne.n	800256e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002554:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	0a12      	lsrs	r2, r2, #8
 8002562:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	617b      	str	r3, [r7, #20]
    break;
 800256c:	e00c      	b.n	8002588 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	0a12      	lsrs	r2, r2, #8
 800257c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    break;
 8002586:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0e5b      	lsrs	r3, r3, #25
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025a2:	687b      	ldr	r3, [r7, #4]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40021000 	.word	0x40021000
 80025b4:	016e3600 	.word	0x016e3600
 80025b8:	00f42400 	.word	0x00f42400

080025bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c4:	2300      	movs	r3, #0
 80025c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c8:	2300      	movs	r3, #0
 80025ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8098 	beq.w	800270a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a3f      	ldr	r2, [pc, #252]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002606:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a39      	ldr	r2, [pc, #228]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002612:	f7fe facd 	bl	8000bb0 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002618:	e009      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe fac9 	bl	8000bb0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d902      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	74fb      	strb	r3, [r7, #19]
        break;
 800262c:	e005      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800262e:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ef      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d159      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01e      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	429a      	cmp	r2, r3
 800265a:	d019      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002688:	4a18      	ldr	r2, [pc, #96]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fa89 	bl	8000bb0 <HAL_GetTick>
 800269e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a0:	e00b      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe fa85 	bl	8000bb0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d902      	bls.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	74fb      	strb	r3, [r7, #19]
            break;
 80026b8:	e006      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ec      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10b      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026e4:	e008      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	74bb      	strb	r3, [r7, #18]
 80026ea:	e005      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f8:	7c7b      	ldrb	r3, [r7, #17]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d105      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4ba7      	ldr	r3, [pc, #668]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	4aa6      	ldr	r2, [pc, #664]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002716:	4ba1      	ldr	r3, [pc, #644]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f023 0203 	bic.w	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	499d      	ldr	r1, [pc, #628]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002738:	4b98      	ldr	r3, [pc, #608]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f023 020c 	bic.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4995      	ldr	r1, [pc, #596]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800275a:	4b90      	ldr	r3, [pc, #576]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	498c      	ldr	r1, [pc, #560]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800277c:	4b87      	ldr	r3, [pc, #540]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4984      	ldr	r1, [pc, #528]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	497b      	ldr	r1, [pc, #492]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027c0:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	4973      	ldr	r1, [pc, #460]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e2:	4b6e      	ldr	r3, [pc, #440]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	496a      	ldr	r1, [pc, #424]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002804:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4962      	ldr	r1, [pc, #392]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002826:	4b5d      	ldr	r3, [pc, #372]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	4959      	ldr	r1, [pc, #356]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002848:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	4951      	ldr	r1, [pc, #324]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800286a:	4b4c      	ldr	r3, [pc, #304]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	4948      	ldr	r1, [pc, #288]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4940      	ldr	r1, [pc, #256]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028aa:	d105      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a3a      	ldr	r2, [pc, #232]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	4932      	ldr	r1, [pc, #200]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e2:	d105      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a2c      	ldr	r2, [pc, #176]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	4924      	ldr	r1, [pc, #144]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291a:	d105      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002926:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d019      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298a:	d109      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
 8002998:	e002      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4926      	ldr	r1, [pc, #152]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ca:	d105      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	4918      	ldr	r1, [pc, #96]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d105      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d015      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a48:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e042      	b.n	8002af0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7fd ff6d 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2224      	movs	r2, #36	; 0x24
 8002a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fb24 	bl	80030f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f825 	bl	8002af8 <UART_SetConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e01b      	b.n	8002af0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fba3 	bl	8003234 <UART_CheckIdleState>
 8002aee:	4603      	mov	r3, r0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b08c      	sub	sp, #48	; 0x30
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4baa      	ldr	r3, [pc, #680]	; (8002dd0 <UART_SetConfig+0x2d8>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a9f      	ldr	r2, [pc, #636]	; (8002dd4 <UART_SetConfig+0x2dc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b60:	4313      	orrs	r3, r2
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002b6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f023 010f 	bic.w	r1, r3, #15
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a90      	ldr	r2, [pc, #576]	; (8002dd8 <UART_SetConfig+0x2e0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d125      	bne.n	8002be8 <UART_SetConfig+0xf0>
 8002b9c:	4b8f      	ldr	r3, [pc, #572]	; (8002ddc <UART_SetConfig+0x2e4>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d81a      	bhi.n	8002be0 <UART_SetConfig+0xe8>
 8002baa:	a201      	add	r2, pc, #4	; (adr r2, 8002bb0 <UART_SetConfig+0xb8>)
 8002bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb0:	08002bc1 	.word	0x08002bc1
 8002bb4:	08002bd1 	.word	0x08002bd1
 8002bb8:	08002bc9 	.word	0x08002bc9
 8002bbc:	08002bd9 	.word	0x08002bd9
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bc6:	e116      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bce:	e112      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bd6:	e10e      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002bd8:	2308      	movs	r3, #8
 8002bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bde:	e10a      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002be0:	2310      	movs	r3, #16
 8002be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002be6:	e106      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <UART_SetConfig+0x2e8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d138      	bne.n	8002c64 <UART_SetConfig+0x16c>
 8002bf2:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <UART_SetConfig+0x2e4>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d82d      	bhi.n	8002c5c <UART_SetConfig+0x164>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <UART_SetConfig+0x110>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c3d 	.word	0x08002c3d
 8002c0c:	08002c5d 	.word	0x08002c5d
 8002c10:	08002c5d 	.word	0x08002c5d
 8002c14:	08002c5d 	.word	0x08002c5d
 8002c18:	08002c4d 	.word	0x08002c4d
 8002c1c:	08002c5d 	.word	0x08002c5d
 8002c20:	08002c5d 	.word	0x08002c5d
 8002c24:	08002c5d 	.word	0x08002c5d
 8002c28:	08002c45 	.word	0x08002c45
 8002c2c:	08002c5d 	.word	0x08002c5d
 8002c30:	08002c5d 	.word	0x08002c5d
 8002c34:	08002c5d 	.word	0x08002c5d
 8002c38:	08002c55 	.word	0x08002c55
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c42:	e0d8      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002c44:	2302      	movs	r3, #2
 8002c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c4a:	e0d4      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c52:	e0d0      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002c54:	2308      	movs	r3, #8
 8002c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c5a:	e0cc      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c62:	e0c8      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a5e      	ldr	r2, [pc, #376]	; (8002de4 <UART_SetConfig+0x2ec>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d125      	bne.n	8002cba <UART_SetConfig+0x1c2>
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	; (8002ddc <UART_SetConfig+0x2e4>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c78:	2b30      	cmp	r3, #48	; 0x30
 8002c7a:	d016      	beq.n	8002caa <UART_SetConfig+0x1b2>
 8002c7c:	2b30      	cmp	r3, #48	; 0x30
 8002c7e:	d818      	bhi.n	8002cb2 <UART_SetConfig+0x1ba>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d00a      	beq.n	8002c9a <UART_SetConfig+0x1a2>
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d814      	bhi.n	8002cb2 <UART_SetConfig+0x1ba>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <UART_SetConfig+0x19a>
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d008      	beq.n	8002ca2 <UART_SetConfig+0x1aa>
 8002c90:	e00f      	b.n	8002cb2 <UART_SetConfig+0x1ba>
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c98:	e0ad      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca0:	e0a9      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca8:	e0a5      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002caa:	2308      	movs	r3, #8
 8002cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb0:	e0a1      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb8:	e09d      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a4a      	ldr	r2, [pc, #296]	; (8002de8 <UART_SetConfig+0x2f0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d125      	bne.n	8002d10 <UART_SetConfig+0x218>
 8002cc4:	4b45      	ldr	r3, [pc, #276]	; (8002ddc <UART_SetConfig+0x2e4>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002cce:	2bc0      	cmp	r3, #192	; 0xc0
 8002cd0:	d016      	beq.n	8002d00 <UART_SetConfig+0x208>
 8002cd2:	2bc0      	cmp	r3, #192	; 0xc0
 8002cd4:	d818      	bhi.n	8002d08 <UART_SetConfig+0x210>
 8002cd6:	2b80      	cmp	r3, #128	; 0x80
 8002cd8:	d00a      	beq.n	8002cf0 <UART_SetConfig+0x1f8>
 8002cda:	2b80      	cmp	r3, #128	; 0x80
 8002cdc:	d814      	bhi.n	8002d08 <UART_SetConfig+0x210>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <UART_SetConfig+0x1f0>
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d008      	beq.n	8002cf8 <UART_SetConfig+0x200>
 8002ce6:	e00f      	b.n	8002d08 <UART_SetConfig+0x210>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cee:	e082      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cf6:	e07e      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cfe:	e07a      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002d00:	2308      	movs	r3, #8
 8002d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d06:	e076      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002d08:	2310      	movs	r3, #16
 8002d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d0e:	e072      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a35      	ldr	r2, [pc, #212]	; (8002dec <UART_SetConfig+0x2f4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d12a      	bne.n	8002d70 <UART_SetConfig+0x278>
 8002d1a:	4b30      	ldr	r3, [pc, #192]	; (8002ddc <UART_SetConfig+0x2e4>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d28:	d01a      	beq.n	8002d60 <UART_SetConfig+0x268>
 8002d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d2e:	d81b      	bhi.n	8002d68 <UART_SetConfig+0x270>
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d34:	d00c      	beq.n	8002d50 <UART_SetConfig+0x258>
 8002d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3a:	d815      	bhi.n	8002d68 <UART_SetConfig+0x270>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <UART_SetConfig+0x250>
 8002d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d44:	d008      	beq.n	8002d58 <UART_SetConfig+0x260>
 8002d46:	e00f      	b.n	8002d68 <UART_SetConfig+0x270>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d4e:	e052      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002d50:	2302      	movs	r3, #2
 8002d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d56:	e04e      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d5e:	e04a      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002d60:	2308      	movs	r3, #8
 8002d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d66:	e046      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d6e:	e042      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <UART_SetConfig+0x2dc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d13a      	bne.n	8002df0 <UART_SetConfig+0x2f8>
 8002d7a:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <UART_SetConfig+0x2e4>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d88:	d01a      	beq.n	8002dc0 <UART_SetConfig+0x2c8>
 8002d8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d8e:	d81b      	bhi.n	8002dc8 <UART_SetConfig+0x2d0>
 8002d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d94:	d00c      	beq.n	8002db0 <UART_SetConfig+0x2b8>
 8002d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9a:	d815      	bhi.n	8002dc8 <UART_SetConfig+0x2d0>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <UART_SetConfig+0x2b0>
 8002da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da4:	d008      	beq.n	8002db8 <UART_SetConfig+0x2c0>
 8002da6:	e00f      	b.n	8002dc8 <UART_SetConfig+0x2d0>
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dae:	e022      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002db0:	2302      	movs	r3, #2
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002db6:	e01e      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002db8:	2304      	movs	r3, #4
 8002dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dbe:	e01a      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc6:	e016      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dce:	e012      	b.n	8002df6 <UART_SetConfig+0x2fe>
 8002dd0:	cfff69f3 	.word	0xcfff69f3
 8002dd4:	40008000 	.word	0x40008000
 8002dd8:	40013800 	.word	0x40013800
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40004400 	.word	0x40004400
 8002de4:	40004800 	.word	0x40004800
 8002de8:	40004c00 	.word	0x40004c00
 8002dec:	40005000 	.word	0x40005000
 8002df0:	2310      	movs	r3, #16
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4aae      	ldr	r2, [pc, #696]	; (80030b4 <UART_SetConfig+0x5bc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	f040 8097 	bne.w	8002f30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d823      	bhi.n	8002e52 <UART_SetConfig+0x35a>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <UART_SetConfig+0x318>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e53 	.word	0x08002e53
 8002e18:	08002e3d 	.word	0x08002e3d
 8002e1c:	08002e53 	.word	0x08002e53
 8002e20:	08002e43 	.word	0x08002e43
 8002e24:	08002e53 	.word	0x08002e53
 8002e28:	08002e53 	.word	0x08002e53
 8002e2c:	08002e53 	.word	0x08002e53
 8002e30:	08002e4b 	.word	0x08002e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7ff fb50 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8002e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e3a:	e010      	b.n	8002e5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e3c:	4b9e      	ldr	r3, [pc, #632]	; (80030b8 <UART_SetConfig+0x5c0>)
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e40:	e00d      	b.n	8002e5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e42:	f7ff fadb 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e48:	e009      	b.n	8002e5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e50:	e005      	b.n	8002e5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002e5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8130 	beq.w	80030c6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	4a94      	ldr	r2, [pc, #592]	; (80030bc <UART_SetConfig+0x5c4>)
 8002e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d305      	bcc.n	8002e96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d903      	bls.n	8002e9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e9c:	e113      	b.n	80030c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	60fa      	str	r2, [r7, #12]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	4a84      	ldr	r2, [pc, #528]	; (80030bc <UART_SetConfig+0x5c4>)
 8002eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ebc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ec0:	f7fd f9aa 	bl	8000218 <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	020b      	lsls	r3, r1, #8
 8002ed6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002eda:	0202      	lsls	r2, r0, #8
 8002edc:	6979      	ldr	r1, [r7, #20]
 8002ede:	6849      	ldr	r1, [r1, #4]
 8002ee0:	0849      	lsrs	r1, r1, #1
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	eb12 0804 	adds.w	r8, r2, r4
 8002eec:	eb43 0905 	adc.w	r9, r3, r5
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	469a      	mov	sl, r3
 8002ef8:	4693      	mov	fp, r2
 8002efa:	4652      	mov	r2, sl
 8002efc:	465b      	mov	r3, fp
 8002efe:	4640      	mov	r0, r8
 8002f00:	4649      	mov	r1, r9
 8002f02:	f7fd f989 	bl	8000218 <__aeabi_uldivmod>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f14:	d308      	bcc.n	8002f28 <UART_SetConfig+0x430>
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1c:	d204      	bcs.n	8002f28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a3a      	ldr	r2, [r7, #32]
 8002f24:	60da      	str	r2, [r3, #12]
 8002f26:	e0ce      	b.n	80030c6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f2e:	e0ca      	b.n	80030c6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f38:	d166      	bne.n	8003008 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d827      	bhi.n	8002f92 <UART_SetConfig+0x49a>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <UART_SetConfig+0x450>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f6d 	.word	0x08002f6d
 8002f4c:	08002f75 	.word	0x08002f75
 8002f50:	08002f7d 	.word	0x08002f7d
 8002f54:	08002f93 	.word	0x08002f93
 8002f58:	08002f83 	.word	0x08002f83
 8002f5c:	08002f93 	.word	0x08002f93
 8002f60:	08002f93 	.word	0x08002f93
 8002f64:	08002f93 	.word	0x08002f93
 8002f68:	08002f8b 	.word	0x08002f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f7ff fab4 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8002f70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f72:	e014      	b.n	8002f9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f74:	f7ff fac6 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8002f78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f7a:	e010      	b.n	8002f9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f7c:	4b4e      	ldr	r3, [pc, #312]	; (80030b8 <UART_SetConfig+0x5c0>)
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f80:	e00d      	b.n	8002f9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f82:	f7ff fa3b 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8002f86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f88:	e009      	b.n	8002f9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f90:	e005      	b.n	8002f9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8090 	beq.w	80030c6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	4a44      	ldr	r2, [pc, #272]	; (80030bc <UART_SetConfig+0x5c4>)
 8002fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fb8:	005a      	lsls	r2, r3, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	441a      	add	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2b0f      	cmp	r3, #15
 8002fd0:	d916      	bls.n	8003000 <UART_SetConfig+0x508>
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d212      	bcs.n	8003000 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f023 030f 	bic.w	r3, r3, #15
 8002fe2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	085b      	lsrs	r3, r3, #1
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	8bfb      	ldrh	r3, [r7, #30]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	8bfa      	ldrh	r2, [r7, #30]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	e062      	b.n	80030c6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003006:	e05e      	b.n	80030c6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800300c:	2b08      	cmp	r3, #8
 800300e:	d828      	bhi.n	8003062 <UART_SetConfig+0x56a>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0x520>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800303d 	.word	0x0800303d
 800301c:	08003045 	.word	0x08003045
 8003020:	0800304d 	.word	0x0800304d
 8003024:	08003063 	.word	0x08003063
 8003028:	08003053 	.word	0x08003053
 800302c:	08003063 	.word	0x08003063
 8003030:	08003063 	.word	0x08003063
 8003034:	08003063 	.word	0x08003063
 8003038:	0800305b 	.word	0x0800305b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800303c:	f7ff fa4c 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003042:	e014      	b.n	800306e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003044:	f7ff fa5e 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 8003048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800304a:	e010      	b.n	800306e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <UART_SetConfig+0x5c0>)
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003050:	e00d      	b.n	800306e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003052:	f7ff f9d3 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8003056:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003058:	e009      	b.n	800306e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003060:	e005      	b.n	800306e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800306c:	bf00      	nop
    }

    if (pclk != 0U)
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d028      	beq.n	80030c6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	4a10      	ldr	r2, [pc, #64]	; (80030bc <UART_SetConfig+0x5c4>)
 800307a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307e:	461a      	mov	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	fbb3 f2f2 	udiv	r2, r3, r2
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	441a      	add	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d910      	bls.n	80030c0 <UART_SetConfig+0x5c8>
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d20c      	bcs.n	80030c0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	e009      	b.n	80030c6 <UART_SetConfig+0x5ce>
 80030b2:	bf00      	nop
 80030b4:	40008000 	.word	0x40008000
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	080037e4 	.word	0x080037e4
      }
      else
      {
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80030e2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3730      	adds	r7, #48	; 0x30
 80030ea:	46bd      	mov	sp, r7
 80030ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01a      	beq.n	8003206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ee:	d10a      	bne.n	8003206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
  }
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b098      	sub	sp, #96	; 0x60
 8003238:	af02      	add	r7, sp, #8
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003244:	f7fd fcb4 	bl	8000bb0 <HAL_GetTick>
 8003248:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b08      	cmp	r3, #8
 8003256:	d12f      	bne.n	80032b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003258:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003260:	2200      	movs	r2, #0
 8003262:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f88e 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d022      	beq.n	80032b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	e853 3f00 	ldrex	r3, [r3]
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003286:	653b      	str	r3, [r7, #80]	; 0x50
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003290:	647b      	str	r3, [r7, #68]	; 0x44
 8003292:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003294:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003296:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003298:	e841 2300 	strex	r3, r2, [r1]
 800329c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e6      	bne.n	8003272 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e063      	b.n	8003380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d149      	bne.n	800335a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ce:	2200      	movs	r2, #0
 80032d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f857 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d03c      	beq.n	800335a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	623b      	str	r3, [r7, #32]
   return(result);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003300:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e6      	bne.n	80032e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3308      	adds	r3, #8
 8003318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	60fb      	str	r3, [r7, #12]
   return(result);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	64bb      	str	r3, [r7, #72]	; 0x48
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003332:	61fa      	str	r2, [r7, #28]
 8003334:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	69b9      	ldr	r1, [r7, #24]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	617b      	str	r3, [r7, #20]
   return(result);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e012      	b.n	8003380 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3758      	adds	r7, #88	; 0x58
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003398:	e04f      	b.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d04b      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fd fc05 	bl	8000bb0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e04e      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d037      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b80      	cmp	r3, #128	; 0x80
 80033ce:	d034      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b40      	cmp	r3, #64	; 0x40
 80033d4:	d031      	beq.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 0308 	and.w	r3, r3, #8
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d110      	bne.n	8003406 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2208      	movs	r2, #8
 80033ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f838 	bl	8003462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2208      	movs	r2, #8
 80033f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e029      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003414:	d111      	bne.n	800343a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800341e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f81e 	bl	8003462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e00f      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4013      	ands	r3, r2
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	429a      	cmp	r2, r3
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	429a      	cmp	r2, r3
 8003456:	d0a0      	beq.n	800339a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003462:	b480      	push	{r7}
 8003464:	b095      	sub	sp, #84	; 0x54
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	643b      	str	r3, [r7, #64]	; 0x40
 800348a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800348e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e6      	bne.n	800346a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3308      	adds	r3, #8
 80034a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e3      	bne.n	800349c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d118      	bne.n	800350e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f023 0310 	bic.w	r3, r3, #16
 80034f0:	647b      	str	r3, [r7, #68]	; 0x44
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	6979      	ldr	r1, [r7, #20]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	e841 2300 	strex	r3, r2, [r1]
 8003506:	613b      	str	r3, [r7, #16]
   return(result);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1e6      	bne.n	80034dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003522:	bf00      	nop
 8003524:	3754      	adds	r7, #84	; 0x54
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_UARTEx_DisableFifoMode+0x16>
 8003540:	2302      	movs	r3, #2
 8003542:	e027      	b.n	8003594 <HAL_UARTEx_DisableFifoMode+0x66>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	; 0x24
 8003550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003572:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d101      	bne.n	80035b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80035b4:	2302      	movs	r3, #2
 80035b6:	e02d      	b.n	8003614 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f84f 	bl	8003698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003630:	2302      	movs	r3, #2
 8003632:	e02d      	b.n	8003690 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2224      	movs	r2, #36	; 0x24
 8003640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f811 	bl	8003698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d108      	bne.n	80036ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036b8:	e031      	b.n	800371e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036ba:	2308      	movs	r3, #8
 80036bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036be:	2308      	movs	r3, #8
 80036c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	0e5b      	lsrs	r3, r3, #25
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	0f5b      	lsrs	r3, r3, #29
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036e2:	7bbb      	ldrb	r3, [r7, #14]
 80036e4:	7b3a      	ldrb	r2, [r7, #12]
 80036e6:	4911      	ldr	r1, [pc, #68]	; (800372c <UARTEx_SetNbDataToProcess+0x94>)
 80036e8:	5c8a      	ldrb	r2, [r1, r2]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036ee:	7b3a      	ldrb	r2, [r7, #12]
 80036f0:	490f      	ldr	r1, [pc, #60]	; (8003730 <UARTEx_SetNbDataToProcess+0x98>)
 80036f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	7b7a      	ldrb	r2, [r7, #13]
 8003704:	4909      	ldr	r1, [pc, #36]	; (800372c <UARTEx_SetNbDataToProcess+0x94>)
 8003706:	5c8a      	ldrb	r2, [r1, r2]
 8003708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800370c:	7b7a      	ldrb	r2, [r7, #13]
 800370e:	4908      	ldr	r1, [pc, #32]	; (8003730 <UARTEx_SetNbDataToProcess+0x98>)
 8003710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003712:	fb93 f3f2 	sdiv	r3, r3, r2
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	080037fc 	.word	0x080037fc
 8003730:	08003804 	.word	0x08003804

08003734 <memset>:
 8003734:	4402      	add	r2, r0
 8003736:	4603      	mov	r3, r0
 8003738:	4293      	cmp	r3, r2
 800373a:	d100      	bne.n	800373e <memset+0xa>
 800373c:	4770      	bx	lr
 800373e:	f803 1b01 	strb.w	r1, [r3], #1
 8003742:	e7f9      	b.n	8003738 <memset+0x4>

08003744 <__libc_init_array>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	4d0d      	ldr	r5, [pc, #52]	; (800377c <__libc_init_array+0x38>)
 8003748:	4c0d      	ldr	r4, [pc, #52]	; (8003780 <__libc_init_array+0x3c>)
 800374a:	1b64      	subs	r4, r4, r5
 800374c:	10a4      	asrs	r4, r4, #2
 800374e:	2600      	movs	r6, #0
 8003750:	42a6      	cmp	r6, r4
 8003752:	d109      	bne.n	8003768 <__libc_init_array+0x24>
 8003754:	4d0b      	ldr	r5, [pc, #44]	; (8003784 <__libc_init_array+0x40>)
 8003756:	4c0c      	ldr	r4, [pc, #48]	; (8003788 <__libc_init_array+0x44>)
 8003758:	f000 f818 	bl	800378c <_init>
 800375c:	1b64      	subs	r4, r4, r5
 800375e:	10a4      	asrs	r4, r4, #2
 8003760:	2600      	movs	r6, #0
 8003762:	42a6      	cmp	r6, r4
 8003764:	d105      	bne.n	8003772 <__libc_init_array+0x2e>
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	f855 3b04 	ldr.w	r3, [r5], #4
 800376c:	4798      	blx	r3
 800376e:	3601      	adds	r6, #1
 8003770:	e7ee      	b.n	8003750 <__libc_init_array+0xc>
 8003772:	f855 3b04 	ldr.w	r3, [r5], #4
 8003776:	4798      	blx	r3
 8003778:	3601      	adds	r6, #1
 800377a:	e7f2      	b.n	8003762 <__libc_init_array+0x1e>
 800377c:	08003814 	.word	0x08003814
 8003780:	08003814 	.word	0x08003814
 8003784:	08003814 	.word	0x08003814
 8003788:	08003818 	.word	0x08003818

0800378c <_init>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr

08003798 <_fini>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr
