
Cl9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b08  08003b08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b10  08003b10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  08003b24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003b24  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efcb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002043  00000000  00000000  0002f04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf8  00000000  00000000  00031090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000941  00000000  00000000  00031c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024660  00000000  00000000  000325c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecce  00000000  00000000  00056c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7d9a  00000000  00000000  000658f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030f0  00000000  00000000  0014d694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00150784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003ab0 	.word	0x08003ab0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003ab0 	.word	0x08003ab0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 faf9 	bl	8000b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80b 	bl	8000536 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8dc 	bl	80006dc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f852 	bl	80005cc <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000528:	f000 f89a 	bl	8000660 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 800052c:	f000 f966 	bl	80007fc <SPITxRx_Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 8000530:	f000 f97a 	bl	8000828 <SPITxRx_readIO>
  {
 8000534:	e7fc      	b.n	8000530 <main+0x1c>

08000536 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b094      	sub	sp, #80	; 0x50
 800053a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	2238      	movs	r2, #56	; 0x38
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f003 fa87 	bl	8003a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 feb7 	bl	80012cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055e:	2302      	movs	r3, #2
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000566:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	2340      	movs	r3, #64	; 0x40
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000574:	2304      	movs	r3, #4
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000578:	2355      	movs	r3, #85	; 0x55
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ff51 	bl	8001434 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000598:	f000 f974 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2104      	movs	r1, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fa4f 	bl	8001a58 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005c0:	f000 f960 	bl	8000884 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 80005d2:	4a22      	ldr	r2, [pc, #136]	; (800065c <MX_LPUART1_UART_Init+0x90>)
 80005d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b1c      	ldr	r3, [pc, #112]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800060e:	4812      	ldr	r0, [pc, #72]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 8000610:	f002 fbb4 	bl	8002d7c <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 f933 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800061e:	2100      	movs	r1, #0
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 8000622:	f003 f94f 	bl	80038c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800062c:	f000 f92a 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000630:	2100      	movs	r1, #0
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 8000634:	f003 f984 	bl	8003940 <HAL_UARTEx_SetRxFifoThreshold>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800063e:	f000 f921 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_LPUART1_UART_Init+0x8c>)
 8000644:	f003 f905 	bl	8003852 <HAL_UARTEx_DisableFifoMode>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800064e:	f000 f919 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028
 800065c:	40008000 	.word	0x40008000

08000660 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_SPI3_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_SPI3_Init+0x74>)
 800066c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000670:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_SPI3_Init+0x74>)
 800067a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800067e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_SPI3_Init+0x74>)
 800068e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000692:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_SPI3_Init+0x74>)
 8000696:	2238      	movs	r2, #56	; 0x38
 8000698:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_SPI3_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006ae:	2207      	movs	r2, #7
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006ba:	2208      	movs	r2, #8
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_SPI3_Init+0x74>)
 80006c0:	f001 fe34 	bl	800232c <HAL_SPI_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f8db 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000bc 	.word	0x200000bc
 80006d8:	40003c00 	.word	0x40003c00

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b3f      	ldr	r3, [pc, #252]	; (80007f0 <MX_GPIO_Init+0x114>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a3e      	ldr	r2, [pc, #248]	; (80007f0 <MX_GPIO_Init+0x114>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b3c      	ldr	r3, [pc, #240]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <MX_GPIO_Init+0x114>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b33      	ldr	r3, [pc, #204]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a32      	ldr	r2, [pc, #200]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_GPIO_Init+0x114>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a2c      	ldr	r2, [pc, #176]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a26      	ldr	r2, [pc, #152]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_GPIO_Init+0x114>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f000 fd6f 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2104      	movs	r1, #4
 800077a:	481e      	ldr	r0, [pc, #120]	; (80007f4 <MX_GPIO_Init+0x118>)
 800077c:	f000 fd6a 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000786:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4818      	ldr	r0, [pc, #96]	; (80007f8 <MX_GPIO_Init+0x11c>)
 8000798:	f000 fbc2 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800079c:	2320      	movs	r3, #32
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b6:	f000 fbb3 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ba:	2304      	movs	r3, #4
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <MX_GPIO_Init+0x118>)
 80007d2:	f000 fba5 	bl	8000f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2028      	movs	r0, #40	; 0x28
 80007dc:	f000 fb05 	bl	8000dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e0:	2028      	movs	r0, #40	; 0x28
 80007e2:	f000 fb1c 	bl	8000e1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000c00 	.word	0x48000c00
 80007f8:	48000800 	.word	0x48000800

080007fc <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */
void SPITxRx_Setup()
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000800:	2200      	movs	r2, #0
 8000802:	2104      	movs	r1, #4
 8000804:	4807      	ldr	r0, [pc, #28]	; (8000824 <SPITxRx_Setup+0x28>)
 8000806:	f000 fd25 	bl	8001254 <HAL_GPIO_WritePin>
HAL_Delay(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 f9f0 	bl	8000bf0 <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000810:	2201      	movs	r2, #1
 8000812:	2104      	movs	r1, #4
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <SPITxRx_Setup+0x28>)
 8000816:	f000 fd1d 	bl	8001254 <HAL_GPIO_WritePin>
HAL_Delay(1);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 f9e8 	bl	8000bf0 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	48000c00 	.word	0x48000c00

08000828 <SPITxRx_readIO>:
void SPITxRx_readIO()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 800082c:	2104      	movs	r1, #4
 800082e:	4809      	ldr	r0, [pc, #36]	; (8000854 <SPITxRx_readIO+0x2c>)
 8000830:	f000 fcf8 	bl	8001224 <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00a      	beq.n	8000850 <SPITxRx_readIO+0x28>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 800083a:	2200      	movs	r2, #0
 800083c:	2104      	movs	r1, #4
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <SPITxRx_readIO+0x2c>)
 8000840:	f000 fd08 	bl	8001254 <HAL_GPIO_WritePin>
//SPITx[0] = 0b01000001;
//SPITx[1] = 0x12;
//SPITx[2] = 0;
//SPITx[3] = 0;
//HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000844:	2304      	movs	r3, #4
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <SPITxRx_readIO+0x30>)
 8000848:	4904      	ldr	r1, [pc, #16]	; (800085c <SPITxRx_readIO+0x34>)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <SPITxRx_readIO+0x38>)
 800084c:	f001 fe1a 	bl	8002484 <HAL_SPI_TransmitReceive_IT>

}
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	48000c00 	.word	0x48000c00
 8000858:	20000120 	.word	0x20000120
 800085c:	2000012c 	.word	0x2000012c
 8000860:	200000bc 	.word	0x200000bc

08000864 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 800086c:	2201      	movs	r2, #1
 800086e:	2104      	movs	r1, #4
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000872:	f000 fcef 	bl	8001254 <HAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	48000c00 	.word	0x48000c00

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x44>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_MspInit+0x44>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6613      	str	r3, [r2, #96]	; 0x60
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x44>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x44>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x44>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x44>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008c6:	f000 fda5 	bl	8001414 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09e      	sub	sp, #120	; 0x78
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	2254      	movs	r2, #84	; 0x54
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 f8ad 	bl	8003a58 <memset>
  if(huart->Instance==LPUART1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <HAL_UART_MspInit+0xa8>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d136      	bne.n	8000976 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000908:	2320      	movs	r3, #32
 800090a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fabb 	bl	8001e90 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000920:	f7ff ffb0 	bl	8000884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_UART_MspInit+0xac>)
 8000926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000928:	4a16      	ldr	r2, [pc, #88]	; (8000984 <HAL_UART_MspInit+0xac>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_UART_MspInit+0xac>)
 8000932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0xac>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_UART_MspInit+0xac>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_UART_MspInit+0xac>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000954:	230c      	movs	r3, #12
 8000956:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000964:	230c      	movs	r3, #12
 8000966:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800096c:	4619      	mov	r1, r3
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f000 fad5 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3778      	adds	r7, #120	; 0x78
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40008000 	.word	0x40008000
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <HAL_SPI_MspInit+0x8c>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d130      	bne.n	8000a0c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_SPI_MspInit+0x90>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a1a      	ldr	r2, [pc, #104]	; (8000a18 <HAL_SPI_MspInit+0x90>)
 80009b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_SPI_MspInit+0x90>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <HAL_SPI_MspInit+0x90>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <HAL_SPI_MspInit+0x90>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_SPI_MspInit+0x90>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ec:	2306      	movs	r3, #6
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <HAL_SPI_MspInit+0x94>)
 80009f8:	f000 fa92 	bl	8000f20 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2033      	movs	r0, #51	; 0x33
 8000a02:	f000 f9f2 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000a06:	2033      	movs	r0, #51	; 0x33
 8000a08:	f000 fa09 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40003c00 	.word	0x40003c00
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000800 	.word	0x48000800

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f8a2 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a7c:	f000 fc02 	bl	8001284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <SPI3_IRQHandler+0x10>)
 8000a8a:	f001 fda9 	bl	80025e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000bc 	.word	0x200000bc

08000a98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000abe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac0:	f7ff ffea 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	; (8000afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <LoopForever+0xe>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <LoopForever+0x16>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f002 ffbd 	bl	8003a68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aee:	f7ff fd11 	bl	8000514 <main>

08000af2 <LoopForever>:

LoopForever:
    b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   r0, =_estack
 8000af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b00:	08003b18 	.word	0x08003b18
  ldr r2, =_sbss
 8000b04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b08:	2000013c 	.word	0x2000013c

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>

08000b0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f95b 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f80e 	bl	8000b40 <HAL_InitTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e001      	b.n	8000b34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b30:	f7ff feae 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b34:	79fb      	ldrb	r3, [r7, #7]

}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_InitTick+0x68>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d022      	beq.n	8000b9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_InitTick+0x6c>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <HAL_InitTick+0x68>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f966 	bl	8000e3a <HAL_SYSTICK_Config>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10f      	bne.n	8000b94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b0f      	cmp	r3, #15
 8000b78:	d809      	bhi.n	8000b8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b82:	f000 f932 	bl	8000dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_InitTick+0x70>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e007      	b.n	8000b9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e004      	b.n	8000b9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e001      	b.n	8000b9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a03      	ldr	r2, [pc, #12]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bc4:	6013      	str	r3, [r2, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	20000138 	.word	0x20000138
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000138 	.word	0x20000138

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff ffee 	bl	8000bd8 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d004      	beq.n	8000c14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <HAL_Delay+0x40>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4413      	add	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c14:	bf00      	nop
 8000c16:	f7ff ffdf 	bl	8000bd8 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d8f7      	bhi.n	8000c16 <HAL_Delay+0x26>
  {
  }
}
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000008 	.word	0x20000008

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff8e 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff29 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff40 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff90 	bl	8000d28 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5f 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff33 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa4 	bl	8000d90 <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d00d      	beq.n	8000e86 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e047      	b.n	8000f16 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 020e 	bic.w	r2, r2, #14
 8000e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f003 021f 	and.w	r2, r3, #31
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ed2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00c      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000ef4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	4798      	blx	r3
    }
  }
  return status;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b087      	sub	sp, #28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f2e:	e15a      	b.n	80011e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2101      	movs	r1, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 814c 	beq.w	80011e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d005      	beq.n	8000f60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d130      	bne.n	8000fc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f96:	2201      	movs	r2, #1
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 0201 	and.w	r2, r3, #1
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d017      	beq.n	8000ffe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d123      	bne.n	8001052 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	6939      	ldr	r1, [r7, #16]
 800104e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0203 	and.w	r2, r3, #3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 80a6 	beq.w	80011e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001094:	4b5b      	ldr	r3, [pc, #364]	; (8001204 <HAL_GPIO_Init+0x2e4>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001098:	4a5a      	ldr	r2, [pc, #360]	; (8001204 <HAL_GPIO_Init+0x2e4>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	6613      	str	r3, [r2, #96]	; 0x60
 80010a0:	4b58      	ldr	r3, [pc, #352]	; (8001204 <HAL_GPIO_Init+0x2e4>)
 80010a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ac:	4a56      	ldr	r2, [pc, #344]	; (8001208 <HAL_GPIO_Init+0x2e8>)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3302      	adds	r3, #2
 80010b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d6:	d01f      	beq.n	8001118 <HAL_GPIO_Init+0x1f8>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x2ec>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d019      	beq.n	8001114 <HAL_GPIO_Init+0x1f4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x2f0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d013      	beq.n	8001110 <HAL_GPIO_Init+0x1f0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_GPIO_Init+0x2f4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d00d      	beq.n	800110c <HAL_GPIO_Init+0x1ec>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a49      	ldr	r2, [pc, #292]	; (8001218 <HAL_GPIO_Init+0x2f8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d007      	beq.n	8001108 <HAL_GPIO_Init+0x1e8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_GPIO_Init+0x2fc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d101      	bne.n	8001104 <HAL_GPIO_Init+0x1e4>
 8001100:	2305      	movs	r3, #5
 8001102:	e00a      	b.n	800111a <HAL_GPIO_Init+0x1fa>
 8001104:	2306      	movs	r3, #6
 8001106:	e008      	b.n	800111a <HAL_GPIO_Init+0x1fa>
 8001108:	2304      	movs	r3, #4
 800110a:	e006      	b.n	800111a <HAL_GPIO_Init+0x1fa>
 800110c:	2303      	movs	r3, #3
 800110e:	e004      	b.n	800111a <HAL_GPIO_Init+0x1fa>
 8001110:	2302      	movs	r3, #2
 8001112:	e002      	b.n	800111a <HAL_GPIO_Init+0x1fa>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <HAL_GPIO_Init+0x1fa>
 8001118:	2300      	movs	r3, #0
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	f002 0203 	and.w	r2, r2, #3
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4093      	lsls	r3, r2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112a:	4937      	ldr	r1, [pc, #220]	; (8001208 <HAL_GPIO_Init+0x2e8>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001138:	4b39      	ldr	r3, [pc, #228]	; (8001220 <HAL_GPIO_Init+0x300>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800115c:	4a30      	ldr	r2, [pc, #192]	; (8001220 <HAL_GPIO_Init+0x300>)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x300>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001186:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x300>)
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <HAL_GPIO_Init+0x300>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_GPIO_Init+0x300>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x300>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011da:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_GPIO_Init+0x300>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa22 f303 	lsr.w	r3, r2, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f47f ae9d 	bne.w	8000f30 <HAL_GPIO_Init+0x10>
  }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000
 800120c:	48000400 	.word	0x48000400
 8001210:	48000800 	.word	0x48000800
 8001214:	48000c00 	.word	0x48000c00
 8001218:	48001000 	.word	0x48001000
 800121c:	48001400 	.word	0x48001400
 8001220:	40010400 	.word	0x40010400

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001270:	e002      	b.n	8001278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d006      	beq.n	80012a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f806 	bl	80012b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d141      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012da:	4b4b      	ldr	r3, [pc, #300]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e6:	d131      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012e8:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ee:	4a46      	ldr	r2, [pc, #280]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001300:	4a41      	ldr	r2, [pc, #260]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2232      	movs	r2, #50	; 0x32
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001314:	fba2 2303 	umull	r2, r3, r2, r3
 8001318:	0c9b      	lsrs	r3, r3, #18
 800131a:	3301      	adds	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131e:	e002      	b.n	8001326 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3b01      	subs	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001326:	4b38      	ldr	r3, [pc, #224]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001332:	d102      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f2      	bne.n	8001320 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800133a:	4b33      	ldr	r3, [pc, #204]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001346:	d158      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e057      	b.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800134c:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800134e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001358:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800135c:	e04d      	b.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001364:	d141      	bne.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001366:	4b28      	ldr	r3, [pc, #160]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001372:	d131      	bne.n	80013d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800137a:	4a23      	ldr	r2, [pc, #140]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800138c:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2232      	movs	r2, #50	; 0x32
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013aa:	e002      	b.n	80013b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013be:	d102      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f2      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d2:	d112      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e011      	b.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013e8:	e007      	b.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	40007000 	.word	0x40007000
 800140c:	20000000 	.word	0x20000000
 8001410:	431bde83 	.word	0x431bde83

08001414 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	6093      	str	r3, [r2, #8]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40007000 	.word	0x40007000

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e2fe      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d075      	beq.n	800153e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800145c:	4b94      	ldr	r3, [pc, #592]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d102      	bne.n	8001472 <HAL_RCC_OscConfig+0x3e>
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d002      	beq.n	8001478 <HAL_RCC_OscConfig+0x44>
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d10b      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b8d      	ldr	r3, [pc, #564]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d05b      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d157      	bne.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e2d9      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x74>
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a84      	ldr	r2, [pc, #528]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7e      	ldr	r2, [pc, #504]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b7c      	ldr	r3, [pc, #496]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a7b      	ldr	r2, [pc, #492]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014cc:	4b78      	ldr	r3, [pc, #480]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b75      	ldr	r3, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a74      	ldr	r2, [pc, #464]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fb74 	bl	8000bd8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fb70 	bl	8000bd8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e29e      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001506:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xc0>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fb60 	bl	8000bd8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fb5c 	bl	8000bd8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e28a      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152e:	4b60      	ldr	r3, [pc, #384]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d075      	beq.n	8001636 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154a:	4b59      	ldr	r3, [pc, #356]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001554:	4b56      	ldr	r3, [pc, #344]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b0c      	cmp	r3, #12
 8001562:	d102      	bne.n	800156a <HAL_RCC_OscConfig+0x136>
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d002      	beq.n	8001570 <HAL_RCC_OscConfig+0x13c>
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d11f      	bne.n	80015b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x154>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e25d      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	4946      	ldr	r1, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800159c:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <HAL_RCC_OscConfig+0x280>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff facd 	bl	8000b40 <HAL_InitTick>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d043      	beq.n	8001634 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e249      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d023      	beq.n	8001600 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b8:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a3c      	ldr	r2, [pc, #240]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80015be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fb08 	bl	8000bd8 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fb04 	bl	8000bd8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e232      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015de:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	061b      	lsls	r3, r3, #24
 80015f8:	492d      	ldr	r1, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
 80015fe:	e01a      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fae4 	bl	8000bd8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001614:	f7ff fae0 	bl	8000bd8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e20e      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x1e0>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d041      	beq.n	80016c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01c      	beq.n	8001684 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 800164c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001650:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff fabd 	bl	8000bd8 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fab9 	bl	8000bd8 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1e7      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ef      	beq.n	8001662 <HAL_RCC_OscConfig+0x22e>
 8001682:	e020      	b.n	80016c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <HAL_RCC_OscConfig+0x27c>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001694:	f7ff faa0 	bl	8000bd8 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800169a:	e00d      	b.n	80016b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fa9c 	bl	8000bd8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d906      	bls.n	80016b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1ca      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b8:	4b8c      	ldr	r3, [pc, #560]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80016ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ea      	bne.n	800169c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80a6 	beq.w	8001820 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d4:	2300      	movs	r3, #0
 80016d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016d8:	4b84      	ldr	r3, [pc, #528]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2b4>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x2b6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00d      	beq.n	800170a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b7f      	ldr	r3, [pc, #508]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a7e      	ldr	r2, [pc, #504]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b7c      	ldr	r3, [pc, #496]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001706:	2301      	movs	r3, #1
 8001708:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170a:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <HAL_RCC_OscConfig+0x4bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d118      	bne.n	8001748 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0x4bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a75      	ldr	r2, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x4bc>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001722:	f7ff fa59 	bl	8000bd8 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff fa55 	bl	8000bd8 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e183      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173c:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <HAL_RCC_OscConfig+0x4bc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <HAL_RCC_OscConfig+0x32e>
 8001750:	4b66      	ldr	r3, [pc, #408]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a65      	ldr	r2, [pc, #404]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001760:	e024      	b.n	80017ac <HAL_RCC_OscConfig+0x378>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b05      	cmp	r3, #5
 8001768:	d110      	bne.n	800178c <HAL_RCC_OscConfig+0x358>
 800176a:	4b60      	ldr	r3, [pc, #384]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001770:	4a5e      	ldr	r2, [pc, #376]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177a:	4b5c      	ldr	r3, [pc, #368]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001780:	4a5a      	ldr	r2, [pc, #360]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178a:	e00f      	b.n	80017ac <HAL_RCC_OscConfig+0x378>
 800178c:	4b57      	ldr	r3, [pc, #348]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	4a56      	ldr	r2, [pc, #344]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 800179e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a2:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d016      	beq.n	80017e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b4:	f7ff fa10 	bl	8000bd8 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff fa0c 	bl	8000bd8 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e138      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d2:	4b46      	ldr	r3, [pc, #280]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ed      	beq.n	80017bc <HAL_RCC_OscConfig+0x388>
 80017e0:	e015      	b.n	800180e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff f9f9 	bl	8000bd8 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e8:	e00a      	b.n	8001800 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ea:	f7ff f9f5 	bl	8000bd8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e121      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001800:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1ed      	bne.n	80017ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800180e:	7ffb      	ldrb	r3, [r7, #31]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001814:	4b35      	ldr	r3, [pc, #212]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001818:	4a34      	ldr	r2, [pc, #208]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d03c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01c      	beq.n	800186e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800183a:	4a2c      	ldr	r2, [pc, #176]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff f9c8 	bl	8000bd8 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800184c:	f7ff f9c4 	bl	8000bd8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e0f2      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ef      	beq.n	800184c <HAL_RCC_OscConfig+0x418>
 800186c:	e01b      	b.n	80018a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001870:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001874:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff f9ab 	bl	8000bd8 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001886:	f7ff f9a7 	bl	8000bd8 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0d5      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 800189a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ef      	bne.n	8001886 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80c9 	beq.w	8001a42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	f000 8083 	beq.w	80019c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d15e      	bne.n	8001984 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_RCC_OscConfig+0x4b8>)
 80018cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff f981 	bl	8000bd8 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	e00c      	b.n	80018f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff f97d 	bl	8000bd8 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d905      	bls.n	80018f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0ab      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f4:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ec      	bne.n	80018da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001900:	4b52      	ldr	r3, [pc, #328]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <HAL_RCC_OscConfig+0x61c>)
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6a11      	ldr	r1, [r2, #32]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001910:	3a01      	subs	r2, #1
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800191a:	0212      	lsls	r2, r2, #8
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001922:	0852      	lsrs	r2, r2, #1
 8001924:	3a01      	subs	r2, #1
 8001926:	0552      	lsls	r2, r2, #21
 8001928:	4311      	orrs	r1, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800192e:	0852      	lsrs	r2, r2, #1
 8001930:	3a01      	subs	r2, #1
 8001932:	0652      	lsls	r2, r2, #25
 8001934:	4311      	orrs	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800193a:	06d2      	lsls	r2, r2, #27
 800193c:	430a      	orrs	r2, r1
 800193e:	4943      	ldr	r1, [pc, #268]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 8001940:	4313      	orrs	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 800194a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4a3d      	ldr	r2, [pc, #244]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f93c 	bl	8000bd8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f938 	bl	8000bd8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e066      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001976:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x530>
 8001982:	e05e      	b.n	8001a42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 800198a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff f922 	bl	8000bd8 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff f91e 	bl	8000bd8 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e04c      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	4924      	ldr	r1, [pc, #144]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_OscConfig+0x620>)
 80019be:	4013      	ands	r3, r2
 80019c0:	60cb      	str	r3, [r1, #12]
 80019c2:	e03e      	b.n	8001a42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e039      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <HAL_RCC_OscConfig+0x618>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0203 	and.w	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d12c      	bne.n	8001a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d123      	bne.n	8001a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d11b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d113      	bne.n	8001a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
 8001a24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	3b01      	subs	r3, #1
 8001a38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	019f800c 	.word	0x019f800c
 8001a54:	feeefffc 	.word	0xfeeefffc

08001a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e11e      	b.n	8001cae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b91      	ldr	r3, [pc, #580]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 020f 	bic.w	r2, r3, #15
 8001a86:	498c      	ldr	r1, [pc, #560]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b8a      	ldr	r3, [pc, #552]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e106      	b.n	8001cae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d073      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d129      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab4:	4b81      	ldr	r3, [pc, #516]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0f4      	b.n	8001cae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ac4:	f000 f99e 	bl	8001e04 <RCC_GetSysClockFreqFromPLLSource>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4a7c      	ldr	r2, [pc, #496]	; (8001cc0 <HAL_RCC_ClockConfig+0x268>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d93f      	bls.n	8001b52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ad2:	4b7a      	ldr	r3, [pc, #488]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d033      	beq.n	8001b52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d12f      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001af2:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001afa:	4a70      	ldr	r2, [pc, #448]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	e024      	b.n	8001b52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0c6      	b.n	8001cae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0be      	b.n	8001cae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b30:	f000 f8ce 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4a61      	ldr	r2, [pc, #388]	; (8001cc0 <HAL_RCC_ClockConfig+0x268>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d909      	bls.n	8001b52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b3e:	4b5f      	ldr	r3, [pc, #380]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b46:	4a5d      	ldr	r2, [pc, #372]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4957      	ldr	r1, [pc, #348]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b64:	f7ff f838 	bl	8000bd8 <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff f834 	bl	8000bd8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e095      	b.n	8001cae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b4e      	ldr	r3, [pc, #312]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d023      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a42      	ldr	r2, [pc, #264]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bc4:	4b3d      	ldr	r3, [pc, #244]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bcc:	4a3b      	ldr	r2, [pc, #236]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4936      	ldr	r1, [pc, #216]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2b80      	cmp	r3, #128	; 0x80
 8001bec:	d105      	bne.n	8001bfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4a32      	ldr	r2, [pc, #200]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d21d      	bcs.n	8001c44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 020f 	bic.w	r2, r3, #15
 8001c10:	4929      	ldr	r1, [pc, #164]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c18:	f7fe ffde 	bl	8000bd8 <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7fe ffda 	bl	8000bd8 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e03b      	b.n	8001cae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_RCC_ClockConfig+0x260>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1ed      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4917      	ldr	r1, [pc, #92]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490f      	ldr	r1, [pc, #60]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c82:	f000 f825 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490c      	ldr	r1, [pc, #48]	; (8001cc4 <HAL_RCC_ClockConfig+0x26c>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <HAL_RCC_ClockConfig+0x270>)
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_RCC_ClockConfig+0x274>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe ff4a 	bl	8000b40 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	04c4b400 	.word	0x04c4b400
 8001cc4:	08003ac8 	.word	0x08003ac8
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000004 	.word	0x20000004

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d102      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce2:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e047      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	e03e      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d136      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	0a12      	lsrs	r2, r2, #8
 8001d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d36:	fb02 f303 	mul.w	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
      break;
 8001d3c:	e00c      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4a10      	ldr	r2, [pc, #64]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d48:	68d2      	ldr	r2, [r2, #12]
 8001d4a:	0a12      	lsrs	r2, r2, #8
 8001d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d50:	fb02 f303 	mul.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
      break;
 8001d56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0e5b      	lsrs	r3, r3, #25
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	e001      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d78:	693b      	ldr	r3, [r7, #16]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	016e3600 	.word	0x016e3600

08001d94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db0:	f7ff fff0 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4904      	ldr	r1, [pc, #16]	; (8001dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08003ad8 	.word	0x08003ad8

08001dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ddc:	f7ff ffda 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	0adb      	lsrs	r3, r3, #11
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4904      	ldr	r1, [pc, #16]	; (8001e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	08003ad8 	.word	0x08003ad8

08001e04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d10c      	bne.n	8001e42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e28:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	0a12      	lsrs	r2, r2, #8
 8001e36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
    break;
 8001e40:	e00c      	b.n	8001e5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e4c:	68d2      	ldr	r2, [r2, #12]
 8001e4e:	0a12      	lsrs	r2, r2, #8
 8001e50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    break;
 8001e5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0e5b      	lsrs	r3, r3, #25
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	3301      	adds	r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e76:	687b      	ldr	r3, [r7, #4]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	016e3600 	.word	0x016e3600
 8001e8c:	00f42400 	.word	0x00f42400

08001e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e98:	2300      	movs	r3, #0
 8001e9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8098 	beq.w	8001fde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10d      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b40      	ldr	r3, [pc, #256]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a39      	ldr	r2, [pc, #228]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ee6:	f7fe fe77 	bl	8000bd8 <HAL_GetTick>
 8001eea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eec:	e009      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eee:	f7fe fe73 	bl	8000bd8 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d902      	bls.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	74fb      	strb	r3, [r7, #19]
        break;
 8001f00:	e005      	b.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ef      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f0e:	7cfb      	ldrb	r3, [r7, #19]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d159      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01e      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d019      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f30:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f42:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f5c:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d016      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fe33 	bl	8000bd8 <HAL_GetTick>
 8001f72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f74:	e00b      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7fe fe2f 	bl	8000bd8 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d902      	bls.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f8c:	e006      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ec      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb0:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fb8:	e008      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fba:	7cfb      	ldrb	r3, [r7, #19]
 8001fbc:	74bb      	strb	r3, [r7, #18]
 8001fbe:	e005      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fcc:	7c7b      	ldrb	r3, [r7, #17]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d105      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd2:	4ba7      	ldr	r3, [pc, #668]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	4aa6      	ldr	r2, [pc, #664]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fea:	4ba1      	ldr	r3, [pc, #644]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f023 0203 	bic.w	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	499d      	ldr	r1, [pc, #628]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800200c:	4b98      	ldr	r3, [pc, #608]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 020c 	bic.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	4995      	ldr	r1, [pc, #596]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800202e:	4b90      	ldr	r3, [pc, #576]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	498c      	ldr	r1, [pc, #560]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002050:	4b87      	ldr	r3, [pc, #540]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	4984      	ldr	r1, [pc, #528]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	497b      	ldr	r1, [pc, #492]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002094:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4973      	ldr	r1, [pc, #460]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b6:	4b6e      	ldr	r3, [pc, #440]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	496a      	ldr	r1, [pc, #424]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020d8:	4b65      	ldr	r3, [pc, #404]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4962      	ldr	r1, [pc, #392]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020fa:	4b5d      	ldr	r3, [pc, #372]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	4959      	ldr	r1, [pc, #356]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800211c:	4b54      	ldr	r3, [pc, #336]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	4951      	ldr	r1, [pc, #324]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800213e:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	4948      	ldr	r1, [pc, #288]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d015      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002160:	4b43      	ldr	r3, [pc, #268]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4940      	ldr	r1, [pc, #256]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800217e:	d105      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a3a      	ldr	r2, [pc, #232]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a6:	4932      	ldr	r1, [pc, #200]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b6:	d105      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021de:	4924      	ldr	r1, [pc, #144]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ee:	d105      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a1e      	ldr	r2, [pc, #120]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d015      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	4916      	ldr	r1, [pc, #88]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002226:	d105      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	4a10      	ldr	r2, [pc, #64]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002232:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d019      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800225e:	d109      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a02      	ldr	r2, [pc, #8]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800226a:	60d3      	str	r3, [r2, #12]
 800226c:	e002      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4926      	ldr	r1, [pc, #152]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022a0:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a20      	ldr	r2, [pc, #128]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c6:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	490a      	ldr	r1, [pc, #40]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800231c:	7cbb      	ldrb	r3, [r7, #18]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e09d      	b.n	800247a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	2b00      	cmp	r3, #0
 8002344:	d108      	bne.n	8002358 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800234e:	d009      	beq.n	8002364 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
 8002356:	e005      	b.n	8002364 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe fb02 	bl	8000988 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800239a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023a4:	d902      	bls.n	80023ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	e002      	b.n	80023b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80023ba:	d007      	beq.n	80023cc <HAL_SPI_Init+0xa0>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80023c4:	d002      	beq.n	80023cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	ea42 0103 	orr.w	r1, r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	0c1b      	lsrs	r3, r3, #16
 8002428:	f003 0204 	and.w	r2, r3, #4
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002448:	ea42 0103 	orr.w	r1, r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69da      	ldr	r2, [r3, #28]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800249c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024a4:	7dbb      	ldrb	r3, [r7, #22]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d00d      	beq.n	80024c6 <HAL_SPI_TransmitReceive_IT+0x42>
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b0:	d106      	bne.n	80024c0 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_SPI_TransmitReceive_IT+0x3c>
 80024ba:	7dbb      	ldrb	r3, [r7, #22]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d002      	beq.n	80024c6 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
 80024c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024c4:	e07d      	b.n	80025c2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_SPI_TransmitReceive_IT+0x54>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_TransmitReceive_IT+0x54>
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024dc:	e071      	b.n	80025c2 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_SPI_TransmitReceive_IT+0x68>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e06b      	b.n	80025c4 <HAL_SPI_TransmitReceive_IT+0x140>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d003      	beq.n	8002508 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2205      	movs	r2, #5
 8002504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	887a      	ldrh	r2, [r7, #2]
 800251e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	887a      	ldrh	r2, [r7, #2]
 800252a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	887a      	ldrh	r2, [r7, #2]
 8002532:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800253e:	d906      	bls.n	800254e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a23      	ldr	r2, [pc, #140]	; (80025d0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002544:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4a22      	ldr	r2, [pc, #136]	; (80025d4 <HAL_SPI_TransmitReceive_IT+0x150>)
 800254a:	651a      	str	r2, [r3, #80]	; 0x50
 800254c:	e005      	b.n	800255a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002552:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a21      	ldr	r2, [pc, #132]	; (80025dc <HAL_SPI_TransmitReceive_IT+0x158>)
 8002558:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002562:	d802      	bhi.n	800256a <HAL_SPI_TransmitReceive_IT+0xe6>
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d908      	bls.n	800257c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	e007      	b.n	800258c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800258a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	2b40      	cmp	r3, #64	; 0x40
 8002598:	d007      	beq.n	80025aa <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80025c0:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	0800296b 	.word	0x0800296b
 80025d4:	080029d1 	.word	0x080029d1
 80025d8:	0800281b 	.word	0x0800281b
 80025dc:	080028d9 	.word	0x080028d9

080025e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10e      	bne.n	8002620 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
    return;
 800261e:	e0ce      	b.n	80027be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_SPI_IRQHandler+0x5e>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
    return;
 800263c:	e0bf      	b.n	80027be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10a      	bne.n	800265e <HAL_SPI_IRQHandler+0x7e>
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80b0 	beq.w	80027be <HAL_SPI_IRQHandler+0x1de>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80aa 	beq.w	80027be <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b03      	cmp	r3, #3
 800267e:	d011      	beq.n	80026a4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	e00b      	b.n	80026bc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]
        return;
 80026ba:	e080      	b.n	80027be <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d014      	beq.n	80026f0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	f043 0201 	orr.w	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00c      	beq.n	8002714 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	f043 0208 	orr.w	r2, r3, #8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002718:	2b00      	cmp	r3, #0
 800271a:	d04f      	beq.n	80027bc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800272a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <HAL_SPI_IRQHandler+0x168>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d034      	beq.n	80027b2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0203 	bic.w	r2, r2, #3
 8002756:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	2b00      	cmp	r3, #0
 800275e:	d011      	beq.n	8002784 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_SPI_IRQHandler+0x1e4>)
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe fb70 	bl	8000e52 <HAL_DMA_Abort_IT>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	2b00      	cmp	r3, #0
 800278a:	d016      	beq.n	80027ba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_SPI_IRQHandler+0x1e4>)
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fb5a 	bl	8000e52 <HAL_DMA_Abort_IT>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80027b0:	e003      	b.n	80027ba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f812 	bl	80027dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027b8:	e000      	b.n	80027bc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80027ba:	bf00      	nop
    return;
 80027bc:	bf00      	nop
  }
}
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	080027f1 	.word	0x080027f1

080027c8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7ff ffe5 	bl	80027dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d923      	bls.n	8002876 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	b292      	uxth	r2, r2
 800283a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	1c9a      	adds	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800284c:	b29b      	uxth	r3, r3
 800284e:	3b02      	subs	r3, #2
 8002850:	b29a      	uxth	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d11f      	bne.n	80028a4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	e016      	b.n	80028a4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f103 020c 	add.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	7812      	ldrb	r2, [r2, #0]
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10f      	bne.n	80028d0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d102      	bne.n	80028d0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fa14 	bl	8002cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d912      	bls.n	8002910 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	881a      	ldrh	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	1c9a      	adds	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b02      	subs	r3, #2
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800290e:	e012      	b.n	8002936 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330c      	adds	r3, #12
 800291a:	7812      	ldrb	r2, [r2, #0]
 800291c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d110      	bne.n	8002962 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d102      	bne.n	8002962 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f9cb 	bl	8002cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	b292      	uxth	r2, r2
 800297e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	1c9a      	adds	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10f      	bne.n	80029c8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f998 	bl	8002cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d110      	bne.n	8002a28 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a14:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f968 	bl	8002cf8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a40:	f7fe f8ca 	bl	8000bd8 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a50:	f7fe f8c2 	bl	8000bd8 <HAL_GetTick>
 8002a54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a56:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	015b      	lsls	r3, r3, #5
 8002a5c:	0d1b      	lsrs	r3, r3, #20
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	fb02 f303 	mul.w	r3, r2, r3
 8002a64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a66:	e054      	b.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d050      	beq.n	8002b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a70:	f7fe f8b2 	bl	8000bd8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d902      	bls.n	8002a86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d13d      	bne.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9e:	d111      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa8:	d004      	beq.n	8002ab4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d107      	bne.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002acc:	d10f      	bne.n	8002aee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e017      	b.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d19b      	bne.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000000 	.word	0x20000000

08002b40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b52:	f7fe f841 	bl	8000bd8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002b62:	f7fe f839 	bl	8000bd8 <HAL_GetTick>
 8002b66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b70:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00da      	lsls	r2, r3, #3
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	0d1b      	lsrs	r3, r3, #20
 8002b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002b88:	e060      	b.n	8002c4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b90:	d107      	bne.n	8002ba2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d050      	beq.n	8002c4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002baa:	f7fe f815 	bl	8000bd8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d902      	bls.n	8002bc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d13d      	bne.n	8002c3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd8:	d111      	bne.n	8002bfe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be2:	d004      	beq.n	8002bee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d107      	bne.n	8002bfe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c06:	d10f      	bne.n	8002c28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e010      	b.n	8002c5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d196      	bne.n	8002b8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3728      	adds	r7, #40	; 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20000000 	.word	0x20000000

08002c6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff ff5b 	bl	8002b40 <SPI_WaitFifoStateUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c94:	f043 0220 	orr.w	r2, r3, #32
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e027      	b.n	8002cf0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff fec0 	bl	8002a30 <SPI_WaitFlagStateUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e014      	b.n	8002cf0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff ff34 	bl	8002b40 <SPI_WaitFifoStateUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce2:	f043 0220 	orr.w	r2, r3, #32
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e000      	b.n	8002cf0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d00:	f7fd ff6a 	bl	8000bd8 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0220 	bic.w	r2, r2, #32
 8002d14:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	2164      	movs	r1, #100	; 0x64
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffa6 	bl	8002c6c <SPI_EndRxTxTransaction>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d115      	bne.n	8002d66 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d107      	bne.n	8002d56 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fd3a 	bl	80027c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002d54:	e00e      	b.n	8002d74 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd fd80 	bl	8000864 <HAL_SPI_TxRxCpltCallback>
}
 8002d64:	e006      	b.n	8002d74 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fd34 	bl	80027dc <HAL_SPI_ErrorCallback>
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e042      	b.n	8002e14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fd fd99 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2224      	movs	r2, #36	; 0x24
 8002daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fb24 	bl	8003414 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f825 	bl	8002e1c <UART_SetConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e01b      	b.n	8002e14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fba3 	bl	8003558 <UART_CheckIdleState>
 8002e12:	4603      	mov	r3, r0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e20:	b08c      	sub	sp, #48	; 0x30
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4baa      	ldr	r3, [pc, #680]	; (80030f4 <UART_SetConfig+0x2d8>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a9f      	ldr	r2, [pc, #636]	; (80030f8 <UART_SetConfig+0x2dc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e84:	4313      	orrs	r3, r2
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f023 010f 	bic.w	r1, r3, #15
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a90      	ldr	r2, [pc, #576]	; (80030fc <UART_SetConfig+0x2e0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d125      	bne.n	8002f0c <UART_SetConfig+0xf0>
 8002ec0:	4b8f      	ldr	r3, [pc, #572]	; (8003100 <UART_SetConfig+0x2e4>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d81a      	bhi.n	8002f04 <UART_SetConfig+0xe8>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0xb8>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002ef5 	.word	0x08002ef5
 8002edc:	08002eed 	.word	0x08002eed
 8002ee0:	08002efd 	.word	0x08002efd
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eea:	e116      	b.n	800311a <UART_SetConfig+0x2fe>
 8002eec:	2302      	movs	r3, #2
 8002eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ef2:	e112      	b.n	800311a <UART_SetConfig+0x2fe>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002efa:	e10e      	b.n	800311a <UART_SetConfig+0x2fe>
 8002efc:	2308      	movs	r3, #8
 8002efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f02:	e10a      	b.n	800311a <UART_SetConfig+0x2fe>
 8002f04:	2310      	movs	r3, #16
 8002f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f0a:	e106      	b.n	800311a <UART_SetConfig+0x2fe>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a7c      	ldr	r2, [pc, #496]	; (8003104 <UART_SetConfig+0x2e8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d138      	bne.n	8002f88 <UART_SetConfig+0x16c>
 8002f16:	4b7a      	ldr	r3, [pc, #488]	; (8003100 <UART_SetConfig+0x2e4>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d82d      	bhi.n	8002f80 <UART_SetConfig+0x164>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <UART_SetConfig+0x110>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f61 	.word	0x08002f61
 8002f30:	08002f81 	.word	0x08002f81
 8002f34:	08002f81 	.word	0x08002f81
 8002f38:	08002f81 	.word	0x08002f81
 8002f3c:	08002f71 	.word	0x08002f71
 8002f40:	08002f81 	.word	0x08002f81
 8002f44:	08002f81 	.word	0x08002f81
 8002f48:	08002f81 	.word	0x08002f81
 8002f4c:	08002f69 	.word	0x08002f69
 8002f50:	08002f81 	.word	0x08002f81
 8002f54:	08002f81 	.word	0x08002f81
 8002f58:	08002f81 	.word	0x08002f81
 8002f5c:	08002f79 	.word	0x08002f79
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f66:	e0d8      	b.n	800311a <UART_SetConfig+0x2fe>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f6e:	e0d4      	b.n	800311a <UART_SetConfig+0x2fe>
 8002f70:	2304      	movs	r3, #4
 8002f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f76:	e0d0      	b.n	800311a <UART_SetConfig+0x2fe>
 8002f78:	2308      	movs	r3, #8
 8002f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f7e:	e0cc      	b.n	800311a <UART_SetConfig+0x2fe>
 8002f80:	2310      	movs	r3, #16
 8002f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f86:	e0c8      	b.n	800311a <UART_SetConfig+0x2fe>
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <UART_SetConfig+0x2ec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d125      	bne.n	8002fde <UART_SetConfig+0x1c2>
 8002f92:	4b5b      	ldr	r3, [pc, #364]	; (8003100 <UART_SetConfig+0x2e4>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f9c:	2b30      	cmp	r3, #48	; 0x30
 8002f9e:	d016      	beq.n	8002fce <UART_SetConfig+0x1b2>
 8002fa0:	2b30      	cmp	r3, #48	; 0x30
 8002fa2:	d818      	bhi.n	8002fd6 <UART_SetConfig+0x1ba>
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d00a      	beq.n	8002fbe <UART_SetConfig+0x1a2>
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d814      	bhi.n	8002fd6 <UART_SetConfig+0x1ba>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <UART_SetConfig+0x19a>
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d008      	beq.n	8002fc6 <UART_SetConfig+0x1aa>
 8002fb4:	e00f      	b.n	8002fd6 <UART_SetConfig+0x1ba>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fbc:	e0ad      	b.n	800311a <UART_SetConfig+0x2fe>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fc4:	e0a9      	b.n	800311a <UART_SetConfig+0x2fe>
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fcc:	e0a5      	b.n	800311a <UART_SetConfig+0x2fe>
 8002fce:	2308      	movs	r3, #8
 8002fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fd4:	e0a1      	b.n	800311a <UART_SetConfig+0x2fe>
 8002fd6:	2310      	movs	r3, #16
 8002fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fdc:	e09d      	b.n	800311a <UART_SetConfig+0x2fe>
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a4a      	ldr	r2, [pc, #296]	; (800310c <UART_SetConfig+0x2f0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d125      	bne.n	8003034 <UART_SetConfig+0x218>
 8002fe8:	4b45      	ldr	r3, [pc, #276]	; (8003100 <UART_SetConfig+0x2e4>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ff4:	d016      	beq.n	8003024 <UART_SetConfig+0x208>
 8002ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8002ff8:	d818      	bhi.n	800302c <UART_SetConfig+0x210>
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d00a      	beq.n	8003014 <UART_SetConfig+0x1f8>
 8002ffe:	2b80      	cmp	r3, #128	; 0x80
 8003000:	d814      	bhi.n	800302c <UART_SetConfig+0x210>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <UART_SetConfig+0x1f0>
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d008      	beq.n	800301c <UART_SetConfig+0x200>
 800300a:	e00f      	b.n	800302c <UART_SetConfig+0x210>
 800300c:	2300      	movs	r3, #0
 800300e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003012:	e082      	b.n	800311a <UART_SetConfig+0x2fe>
 8003014:	2302      	movs	r3, #2
 8003016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800301a:	e07e      	b.n	800311a <UART_SetConfig+0x2fe>
 800301c:	2304      	movs	r3, #4
 800301e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003022:	e07a      	b.n	800311a <UART_SetConfig+0x2fe>
 8003024:	2308      	movs	r3, #8
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800302a:	e076      	b.n	800311a <UART_SetConfig+0x2fe>
 800302c:	2310      	movs	r3, #16
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003032:	e072      	b.n	800311a <UART_SetConfig+0x2fe>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a35      	ldr	r2, [pc, #212]	; (8003110 <UART_SetConfig+0x2f4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d12a      	bne.n	8003094 <UART_SetConfig+0x278>
 800303e:	4b30      	ldr	r3, [pc, #192]	; (8003100 <UART_SetConfig+0x2e4>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800304c:	d01a      	beq.n	8003084 <UART_SetConfig+0x268>
 800304e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003052:	d81b      	bhi.n	800308c <UART_SetConfig+0x270>
 8003054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003058:	d00c      	beq.n	8003074 <UART_SetConfig+0x258>
 800305a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305e:	d815      	bhi.n	800308c <UART_SetConfig+0x270>
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <UART_SetConfig+0x250>
 8003064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003068:	d008      	beq.n	800307c <UART_SetConfig+0x260>
 800306a:	e00f      	b.n	800308c <UART_SetConfig+0x270>
 800306c:	2300      	movs	r3, #0
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003072:	e052      	b.n	800311a <UART_SetConfig+0x2fe>
 8003074:	2302      	movs	r3, #2
 8003076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800307a:	e04e      	b.n	800311a <UART_SetConfig+0x2fe>
 800307c:	2304      	movs	r3, #4
 800307e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003082:	e04a      	b.n	800311a <UART_SetConfig+0x2fe>
 8003084:	2308      	movs	r3, #8
 8003086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800308a:	e046      	b.n	800311a <UART_SetConfig+0x2fe>
 800308c:	2310      	movs	r3, #16
 800308e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003092:	e042      	b.n	800311a <UART_SetConfig+0x2fe>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <UART_SetConfig+0x2dc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d13a      	bne.n	8003114 <UART_SetConfig+0x2f8>
 800309e:	4b18      	ldr	r3, [pc, #96]	; (8003100 <UART_SetConfig+0x2e4>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ac:	d01a      	beq.n	80030e4 <UART_SetConfig+0x2c8>
 80030ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b2:	d81b      	bhi.n	80030ec <UART_SetConfig+0x2d0>
 80030b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b8:	d00c      	beq.n	80030d4 <UART_SetConfig+0x2b8>
 80030ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030be:	d815      	bhi.n	80030ec <UART_SetConfig+0x2d0>
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <UART_SetConfig+0x2b0>
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d008      	beq.n	80030dc <UART_SetConfig+0x2c0>
 80030ca:	e00f      	b.n	80030ec <UART_SetConfig+0x2d0>
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d2:	e022      	b.n	800311a <UART_SetConfig+0x2fe>
 80030d4:	2302      	movs	r3, #2
 80030d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030da:	e01e      	b.n	800311a <UART_SetConfig+0x2fe>
 80030dc:	2304      	movs	r3, #4
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e2:	e01a      	b.n	800311a <UART_SetConfig+0x2fe>
 80030e4:	2308      	movs	r3, #8
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ea:	e016      	b.n	800311a <UART_SetConfig+0x2fe>
 80030ec:	2310      	movs	r3, #16
 80030ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f2:	e012      	b.n	800311a <UART_SetConfig+0x2fe>
 80030f4:	cfff69f3 	.word	0xcfff69f3
 80030f8:	40008000 	.word	0x40008000
 80030fc:	40013800 	.word	0x40013800
 8003100:	40021000 	.word	0x40021000
 8003104:	40004400 	.word	0x40004400
 8003108:	40004800 	.word	0x40004800
 800310c:	40004c00 	.word	0x40004c00
 8003110:	40005000 	.word	0x40005000
 8003114:	2310      	movs	r3, #16
 8003116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4aae      	ldr	r2, [pc, #696]	; (80033d8 <UART_SetConfig+0x5bc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	f040 8097 	bne.w	8003254 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003126:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800312a:	2b08      	cmp	r3, #8
 800312c:	d823      	bhi.n	8003176 <UART_SetConfig+0x35a>
 800312e:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <UART_SetConfig+0x318>)
 8003130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003134:	08003159 	.word	0x08003159
 8003138:	08003177 	.word	0x08003177
 800313c:	08003161 	.word	0x08003161
 8003140:	08003177 	.word	0x08003177
 8003144:	08003167 	.word	0x08003167
 8003148:	08003177 	.word	0x08003177
 800314c:	08003177 	.word	0x08003177
 8003150:	08003177 	.word	0x08003177
 8003154:	0800316f 	.word	0x0800316f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003158:	f7fe fe28 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 800315c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800315e:	e010      	b.n	8003182 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003160:	4b9e      	ldr	r3, [pc, #632]	; (80033dc <UART_SetConfig+0x5c0>)
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003164:	e00d      	b.n	8003182 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003166:	f7fe fdb3 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 800316a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800316c:	e009      	b.n	8003182 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003174:	e005      	b.n	8003182 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003180:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8130 	beq.w	80033ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	4a94      	ldr	r2, [pc, #592]	; (80033e0 <UART_SetConfig+0x5c4>)
 8003190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003194:	461a      	mov	r2, r3
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	fbb3 f3f2 	udiv	r3, r3, r2
 800319c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d305      	bcc.n	80031ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d903      	bls.n	80031c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031c0:	e113      	b.n	80033ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	2200      	movs	r2, #0
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	60fa      	str	r2, [r7, #12]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	4a84      	ldr	r2, [pc, #528]	; (80033e0 <UART_SetConfig+0x5c4>)
 80031d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2200      	movs	r2, #0
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031e4:	f7fd f818 	bl	8000218 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	020b      	lsls	r3, r1, #8
 80031fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031fe:	0202      	lsls	r2, r0, #8
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	6849      	ldr	r1, [r1, #4]
 8003204:	0849      	lsrs	r1, r1, #1
 8003206:	2000      	movs	r0, #0
 8003208:	460c      	mov	r4, r1
 800320a:	4605      	mov	r5, r0
 800320c:	eb12 0804 	adds.w	r8, r2, r4
 8003210:	eb43 0905 	adc.w	r9, r3, r5
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	469a      	mov	sl, r3
 800321c:	4693      	mov	fp, r2
 800321e:	4652      	mov	r2, sl
 8003220:	465b      	mov	r3, fp
 8003222:	4640      	mov	r0, r8
 8003224:	4649      	mov	r1, r9
 8003226:	f7fc fff7 	bl	8000218 <__aeabi_uldivmod>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4613      	mov	r3, r2
 8003230:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003238:	d308      	bcc.n	800324c <UART_SetConfig+0x430>
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003240:	d204      	bcs.n	800324c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	e0ce      	b.n	80033ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003252:	e0ca      	b.n	80033ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800325c:	d166      	bne.n	800332c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800325e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003262:	2b08      	cmp	r3, #8
 8003264:	d827      	bhi.n	80032b6 <UART_SetConfig+0x49a>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0x450>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	08003291 	.word	0x08003291
 8003270:	08003299 	.word	0x08003299
 8003274:	080032a1 	.word	0x080032a1
 8003278:	080032b7 	.word	0x080032b7
 800327c:	080032a7 	.word	0x080032a7
 8003280:	080032b7 	.word	0x080032b7
 8003284:	080032b7 	.word	0x080032b7
 8003288:	080032b7 	.word	0x080032b7
 800328c:	080032af 	.word	0x080032af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7fe fd8c 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8003294:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003296:	e014      	b.n	80032c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003298:	f7fe fd9e 	bl	8001dd8 <HAL_RCC_GetPCLK2Freq>
 800329c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800329e:	e010      	b.n	80032c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a0:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <UART_SetConfig+0x5c0>)
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032a4:	e00d      	b.n	80032c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a6:	f7fe fd13 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ac:	e009      	b.n	80032c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032b4:	e005      	b.n	80032c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8090 	beq.w	80033ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	4a44      	ldr	r2, [pc, #272]	; (80033e0 <UART_SetConfig+0x5c4>)
 80032d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d4:	461a      	mov	r2, r3
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032dc:	005a      	lsls	r2, r3, #1
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	441a      	add	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	d916      	bls.n	8003324 <UART_SetConfig+0x508>
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fc:	d212      	bcs.n	8003324 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f023 030f 	bic.w	r3, r3, #15
 8003306:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	b29b      	uxth	r3, r3
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	b29a      	uxth	r2, r3
 8003314:	8bfb      	ldrh	r3, [r7, #30]
 8003316:	4313      	orrs	r3, r2
 8003318:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	8bfa      	ldrh	r2, [r7, #30]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e062      	b.n	80033ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800332a:	e05e      	b.n	80033ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800332c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003330:	2b08      	cmp	r3, #8
 8003332:	d828      	bhi.n	8003386 <UART_SetConfig+0x56a>
 8003334:	a201      	add	r2, pc, #4	; (adr r2, 800333c <UART_SetConfig+0x520>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	08003361 	.word	0x08003361
 8003340:	08003369 	.word	0x08003369
 8003344:	08003371 	.word	0x08003371
 8003348:	08003387 	.word	0x08003387
 800334c:	08003377 	.word	0x08003377
 8003350:	08003387 	.word	0x08003387
 8003354:	08003387 	.word	0x08003387
 8003358:	08003387 	.word	0x08003387
 800335c:	0800337f 	.word	0x0800337f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003360:	f7fe fd24 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8003364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003366:	e014      	b.n	8003392 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003368:	f7fe fd36 	bl	8001dd8 <HAL_RCC_GetPCLK2Freq>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800336e:	e010      	b.n	8003392 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <UART_SetConfig+0x5c0>)
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003374:	e00d      	b.n	8003392 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003376:	f7fe fcab 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 800337a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800337c:	e009      	b.n	8003392 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003384:	e005      	b.n	8003392 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003390:	bf00      	nop
    }

    if (pclk != 0U)
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d028      	beq.n	80033ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <UART_SetConfig+0x5c4>)
 800339e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a2:	461a      	mov	r2, r3
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	441a      	add	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d910      	bls.n	80033e4 <UART_SetConfig+0x5c8>
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d20c      	bcs.n	80033e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60da      	str	r2, [r3, #12]
 80033d4:	e009      	b.n	80033ea <UART_SetConfig+0x5ce>
 80033d6:	bf00      	nop
 80033d8:	40008000 	.word	0x40008000
 80033dc:	00f42400 	.word	0x00f42400
 80033e0:	08003ae0 	.word	0x08003ae0
      }
      else
      {
        ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2200      	movs	r2, #0
 8003404:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003406:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800340a:	4618      	mov	r0, r3
 800340c:	3730      	adds	r7, #48	; 0x30
 800340e:	46bd      	mov	sp, r7
 8003410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01a      	beq.n	800352a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003512:	d10a      	bne.n	800352a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b098      	sub	sp, #96	; 0x60
 800355c:	af02      	add	r7, sp, #8
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003568:	f7fd fb36 	bl	8000bd8 <HAL_GetTick>
 800356c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b08      	cmp	r3, #8
 800357a:	d12f      	bne.n	80035dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800357c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003584:	2200      	movs	r2, #0
 8003586:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f88e 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d022      	beq.n	80035dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035aa:	653b      	str	r3, [r7, #80]	; 0x50
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
 80035b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e6      	bne.n	8003596 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e063      	b.n	80036a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d149      	bne.n	800367e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f2:	2200      	movs	r2, #0
 80035f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f857 	bl	80036ac <UART_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d03c      	beq.n	800367e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	623b      	str	r3, [r7, #32]
   return(result);
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003622:	633b      	str	r3, [r7, #48]	; 0x30
 8003624:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e6      	bne.n	8003604 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	e853 3f00 	ldrex	r3, [r3]
 8003644:	60fb      	str	r3, [r7, #12]
   return(result);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	64bb      	str	r3, [r7, #72]	; 0x48
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3308      	adds	r3, #8
 8003654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003656:	61fa      	str	r2, [r7, #28]
 8003658:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	69b9      	ldr	r1, [r7, #24]
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	617b      	str	r3, [r7, #20]
   return(result);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e5      	bne.n	8003636 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e012      	b.n	80036a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3758      	adds	r7, #88	; 0x58
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036bc:	e04f      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d04b      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fd fa87 	bl	8000bd8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <UART_WaitOnFlagUntilTimeout+0x30>
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e04e      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d037      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b80      	cmp	r3, #128	; 0x80
 80036f2:	d034      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d031      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d110      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2208      	movs	r2, #8
 800370e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f838 	bl	8003786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2208      	movs	r2, #8
 800371a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e029      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003738:	d111      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003742:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f81e 	bl	8003786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e00f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	429a      	cmp	r2, r3
 800377a:	d0a0      	beq.n	80036be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003786:	b480      	push	{r7}
 8003788:	b095      	sub	sp, #84	; 0x54
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ac:	643b      	str	r3, [r7, #64]	; 0x40
 80037ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e6      	bne.n	800378e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3308      	adds	r3, #8
 80037e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e3      	bne.n	80037c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d118      	bne.n	8003832 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	60bb      	str	r3, [r7, #8]
   return(result);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f023 0310 	bic.w	r3, r3, #16
 8003814:	647b      	str	r3, [r7, #68]	; 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381e:	61bb      	str	r3, [r7, #24]
 8003820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6979      	ldr	r1, [r7, #20]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	613b      	str	r3, [r7, #16]
   return(result);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e6      	bne.n	8003800 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003846:	bf00      	nop
 8003848:	3754      	adds	r7, #84	; 0x54
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_UARTEx_DisableFifoMode+0x16>
 8003864:	2302      	movs	r3, #2
 8003866:	e027      	b.n	80038b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2224      	movs	r2, #36	; 0x24
 8003874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003896:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038d8:	2302      	movs	r3, #2
 80038da:	e02d      	b.n	8003938 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f84f 	bl	80039bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003954:	2302      	movs	r3, #2
 8003956:	e02d      	b.n	80039b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2224      	movs	r2, #36	; 0x24
 8003964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f811 	bl	80039bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d108      	bne.n	80039de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039dc:	e031      	b.n	8003a42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039de:	2308      	movs	r3, #8
 80039e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039e2:	2308      	movs	r3, #8
 80039e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	0e5b      	lsrs	r3, r3, #25
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	0f5b      	lsrs	r3, r3, #29
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a06:	7bbb      	ldrb	r3, [r7, #14]
 8003a08:	7b3a      	ldrb	r2, [r7, #12]
 8003a0a:	4911      	ldr	r1, [pc, #68]	; (8003a50 <UARTEx_SetNbDataToProcess+0x94>)
 8003a0c:	5c8a      	ldrb	r2, [r1, r2]
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a12:	7b3a      	ldrb	r2, [r7, #12]
 8003a14:	490f      	ldr	r1, [pc, #60]	; (8003a54 <UARTEx_SetNbDataToProcess+0x98>)
 8003a16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a18:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	7b7a      	ldrb	r2, [r7, #13]
 8003a28:	4909      	ldr	r1, [pc, #36]	; (8003a50 <UARTEx_SetNbDataToProcess+0x94>)
 8003a2a:	5c8a      	ldrb	r2, [r1, r2]
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a30:	7b7a      	ldrb	r2, [r7, #13]
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <UARTEx_SetNbDataToProcess+0x98>)
 8003a34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a36:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	08003af8 	.word	0x08003af8
 8003a54:	08003b00 	.word	0x08003b00

08003a58 <memset>:
 8003a58:	4402      	add	r2, r0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <memset+0xa>
 8003a60:	4770      	bx	lr
 8003a62:	f803 1b01 	strb.w	r1, [r3], #1
 8003a66:	e7f9      	b.n	8003a5c <memset+0x4>

08003a68 <__libc_init_array>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	4d0d      	ldr	r5, [pc, #52]	; (8003aa0 <__libc_init_array+0x38>)
 8003a6c:	4c0d      	ldr	r4, [pc, #52]	; (8003aa4 <__libc_init_array+0x3c>)
 8003a6e:	1b64      	subs	r4, r4, r5
 8003a70:	10a4      	asrs	r4, r4, #2
 8003a72:	2600      	movs	r6, #0
 8003a74:	42a6      	cmp	r6, r4
 8003a76:	d109      	bne.n	8003a8c <__libc_init_array+0x24>
 8003a78:	4d0b      	ldr	r5, [pc, #44]	; (8003aa8 <__libc_init_array+0x40>)
 8003a7a:	4c0c      	ldr	r4, [pc, #48]	; (8003aac <__libc_init_array+0x44>)
 8003a7c:	f000 f818 	bl	8003ab0 <_init>
 8003a80:	1b64      	subs	r4, r4, r5
 8003a82:	10a4      	asrs	r4, r4, #2
 8003a84:	2600      	movs	r6, #0
 8003a86:	42a6      	cmp	r6, r4
 8003a88:	d105      	bne.n	8003a96 <__libc_init_array+0x2e>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a90:	4798      	blx	r3
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7ee      	b.n	8003a74 <__libc_init_array+0xc>
 8003a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a9a:	4798      	blx	r3
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	e7f2      	b.n	8003a86 <__libc_init_array+0x1e>
 8003aa0:	08003b10 	.word	0x08003b10
 8003aa4:	08003b10 	.word	0x08003b10
 8003aa8:	08003b10 	.word	0x08003b10
 8003aac:	08003b14 	.word	0x08003b14

08003ab0 <_init>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	bf00      	nop
 8003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab6:	bc08      	pop	{r3}
 8003ab8:	469e      	mov	lr, r3
 8003aba:	4770      	bx	lr

08003abc <_fini>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	bf00      	nop
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr
