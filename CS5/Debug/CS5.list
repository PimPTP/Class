
CS5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057dc  080057dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057e4  080057e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000010  080057f8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080057f8  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123e9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002289  00000000  00000000  00032468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  000346f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c70  00000000  00000000  000356d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  00036340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012051  00000000  00000000  0005b9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7c89  00000000  00000000  0006da0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044e4  00000000  00000000  00165698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00169b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005784 	.word	0x08005784

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005784 	.word	0x08005784

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fd72 	bl	800183e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f86d 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 fa57 	bl	8001210 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d62:	f000 f8b5 	bl	8000ed0 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d66:	f000 f9af 	bl	80010c8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d6a:	f000 fa03 	bl	8001174 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000d6e:	f000 f8f9 	bl	8000f64 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000d72:	213c      	movs	r1, #60	; 0x3c
 8000d74:	4827      	ldr	r0, [pc, #156]	; (8000e14 <main+0xc4>)
 8000d76:	f002 fc2b 	bl	80035d0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000d7a:	4827      	ldr	r0, [pc, #156]	; (8000e18 <main+0xc8>)
 8000d7c:	f002 f996 	bl	80030ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8000d80:	4826      	ldr	r0, [pc, #152]	; (8000e1c <main+0xcc>)
 8000d82:	f002 f923 	bl	8002fcc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d86:	2100      	movs	r1, #0
 8000d88:	4824      	ldr	r0, [pc, #144]	; (8000e1c <main+0xcc>)
 8000d8a:	f002 fa69 	bl	8003260 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint64_t timestamp =0;
	  int64_t currentTime = micros();
 8000d8e:	f000 fac5 	bl	800131c <micros>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime > timestamp)
 8000d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d9e:	4920      	ldr	r1, [pc, #128]	; (8000e20 <main+0xd0>)
 8000da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000da4:	4290      	cmp	r0, r2
 8000da6:	eb71 0303 	sbcs.w	r3, r1, r3
 8000daa:	d2f0      	bcs.n	8000d8e <main+0x3e>
	  {
		  timestamp =currentTime + 100000;//us
 8000dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000db0:	491c      	ldr	r1, [pc, #112]	; (8000e24 <main+0xd4>)
 8000db2:	1854      	adds	r4, r2, r1
 8000db4:	f143 0500 	adc.w	r5, r3, #0
 8000db8:	4622      	mov	r2, r4
 8000dba:	462b      	mov	r3, r5
 8000dbc:	4918      	ldr	r1, [pc, #96]	; (8000e20 <main+0xd0>)
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
		  QEIEncoderPosVel_Update();
 8000dc2:	f000 fb19 	bl	80013f8 <QEIEncoderPosVel_Update>
		  PWM = (speed/60.0)*3072.0;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <main+0xd8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fb88 	bl	80004e0 <__aeabi_f2d>
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <main+0xdc>)
 8000dd6:	f7ff fd05 	bl	80007e4 <__aeabi_ddiv>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	460b      	mov	r3, r1
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <main+0xe0>)
 8000de8:	f7ff fbd2 	bl	8000590 <__aeabi_dmul>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff fdde 	bl	80009b4 <__aeabi_d2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <main+0xe4>)
 8000dfc:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM);
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <main+0xe4>)
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <main+0xcc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e0c:	ee17 2a90 	vmov	r2, s15
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000e12:	e7bc      	b.n	8000d8e <main+0x3e>
 8000e14:	2000010c 	.word	0x2000010c
 8000e18:	20000158 	.word	0x20000158
 8000e1c:	200000c0 	.word	0x200000c0
 8000e20:	200001e8 	.word	0x200001e8
 8000e24:	000186a0 	.word	0x000186a0
 8000e28:	200001dc 	.word	0x200001dc
 8000e2c:	404e0000 	.word	0x404e0000
 8000e30:	40a80000 	.word	0x40a80000
 8000e34:	200001e0 	.word	0x200001e0

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	; 0x50
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	2238      	movs	r2, #56	; 0x38
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 fc70 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f001 f82e 	bl	8001ebc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2340      	movs	r3, #64	; 0x40
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e76:	2304      	movs	r3, #4
 8000e78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e7a:	2355      	movs	r3, #85	; 0x55
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 f8c8 	bl	8002024 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e9a:	f000 fb23 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fbc6 	bl	8002648 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ec2:	f000 fb0f 	bl	80014e4 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3750      	adds	r7, #80	; 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <MX_LPUART1_UART_Init+0x90>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000eda:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f12:	4812      	ldr	r0, [pc, #72]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f14:	f003 fd9c 	bl	8004a50 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 fae1 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f26:	f004 fb37 	bl	8005598 <HAL_UARTEx_SetTxFifoThreshold>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f30:	f000 fad8 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f38:	f004 fb6c 	bl	8005614 <HAL_UARTEx_SetRxFifoThreshold>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f42:	f000 facf 	bl	80014e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_LPUART1_UART_Init+0x8c>)
 8000f48:	f004 faed 	bl	8005526 <HAL_UARTEx_DisableFifoMode>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f52:	f000 fac7 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000002c 	.word	0x2000002c
 8000f60:	40008000 	.word	0x40008000

08000f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b09c      	sub	sp, #112	; 0x70
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2234      	movs	r2, #52	; 0x34
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 fbc4 	bl	800572c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa4:	4b46      	ldr	r3, [pc, #280]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fa6:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <MX_TIM1_Init+0x160>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000faa:	4b45      	ldr	r3, [pc, #276]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fac:	22a9      	movs	r2, #169	; 0xa9
 8000fae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3071;
 8000fb6:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fb8:	f640 32ff 	movw	r2, #3071	; 0xbff
 8000fbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc4:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd0:	483b      	ldr	r0, [pc, #236]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fd2:	f001 ffa3 	bl	8002f1c <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fdc:	f000 fa82 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fea:	4619      	mov	r1, r3
 8000fec:	4834      	ldr	r0, [pc, #208]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000fee:	f002 fde1 	bl	8003bb4 <HAL_TIM_ConfigClockSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ff8:	f000 fa74 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ffc:	4830      	ldr	r0, [pc, #192]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8000ffe:	f002 f8cd 	bl	800319c <HAL_TIM_PWM_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001008:	f000 fa6c 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001018:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800101c:	4619      	mov	r1, r3
 800101e:	4828      	ldr	r0, [pc, #160]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8001020:	f003 fba6 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800102a:	f000 fa5b 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102e:	2360      	movs	r3, #96	; 0x60
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 3072;
 8001032:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001038:	2300      	movs	r3, #0
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800103c:	2300      	movs	r3, #0
 800103e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800104c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	481a      	ldr	r0, [pc, #104]	; (80010c0 <MX_TIM1_Init+0x15c>)
 8001056:	f002 fc99 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001060:	f000 fa40 	bl	80014e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800108a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_TIM1_Init+0x15c>)
 80010a2:	f003 fbfb 	bl	800489c <HAL_TIMEx_ConfigBreakDeadTime>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80010ac:	f000 fa1a 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MX_TIM1_Init+0x15c>)
 80010b2:	f000 fb15 	bl	80016e0 <HAL_TIM_MspPostInit>

}
 80010b6:	bf00      	nop
 80010b8:	3770      	adds	r7, #112	; 0x70
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200000c0 	.word	0x200000c0
 80010c4:	40012c00 	.word	0x40012c00

080010c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2224      	movs	r2, #36	; 0x24
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 fb28 	bl	800572c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_TIM3_Init+0xa4>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <MX_TIM3_Init+0xa8>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_TIM3_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_TIM3_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64511;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_TIM3_Init+0xa4>)
 80010fa:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80010fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_TIM3_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_TIM3_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800110c:	2303      	movs	r3, #3
 800110e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001114:	2301      	movs	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001124:	2301      	movs	r3, #1
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_TIM3_Init+0xa4>)
 8001138:	f002 f9a4 	bl	8003484 <HAL_TIM_Encoder_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001142:	f000 f9cf 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_TIM3_Init+0xa4>)
 8001154:	f003 fb0c 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800115e:	f000 f9c1 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3730      	adds	r7, #48	; 0x30
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000010c 	.word	0x2000010c
 8001170:	40000400 	.word	0x40000400

08001174 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_TIM5_Init+0x94>)
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <MX_TIM5_Init+0x98>)
 8001196:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <MX_TIM5_Init+0x94>)
 800119a:	22a9      	movs	r2, #169	; 0xa9
 800119c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_TIM5_Init+0x94>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_TIM5_Init+0x94>)
 80011a6:	f04f 32ff 	mov.w	r2, #4294967295
 80011aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_TIM5_Init+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_TIM5_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011b8:	4813      	ldr	r0, [pc, #76]	; (8001208 <MX_TIM5_Init+0x94>)
 80011ba:	f001 feaf 	bl	8002f1c <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80011c4:	f000 f98e 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_TIM5_Init+0x94>)
 80011d6:	f002 fced 	bl	8003bb4 <HAL_TIM_ConfigClockSource>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80011e0:	f000 f980 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM5_Init+0x94>)
 80011f2:	f003 fabd 	bl	8004770 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f000 f972 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000158 	.word	0x20000158
 800120c:	40000c00 	.word	0x40000c00

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a2e      	ldr	r2, [pc, #184]	; (80012e4 <MX_GPIO_Init+0xd4>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a28      	ldr	r2, [pc, #160]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_GPIO_Init+0xd4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a22      	ldr	r2, [pc, #136]	; (80012e4 <MX_GPIO_Init+0xd4>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <MX_GPIO_Init+0xd4>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_GPIO_Init+0xd4>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2120      	movs	r1, #32
 800128a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128e:	f000 fdd9 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001292:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001298:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <MX_GPIO_Init+0xd8>)
 80012aa:	f000 fc49 	bl	8001b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012ae:	2320      	movs	r3, #32
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f000 fc3a 	bl	8001b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2028      	movs	r0, #40	; 0x28
 80012d2:	f000 fc00 	bl	8001ad6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012d6:	2028      	movs	r0, #40	; 0x28
 80012d8:	f000 fc17 	bl	8001b0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48000800 	.word	0x48000800

080012ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d104      	bne.n	8001306 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		microsOverflowCnt++;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a05      	ldr	r2, [pc, #20]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001304:	6013      	str	r3, [r2, #0]
	}
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000158 	.word	0x20000158
 8001318:	200001d8 	.word	0x200001d8

0800131c <micros>:
uint64_t micros()
{
 800131c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
	// Disable interrupts temporarily
	__disable_irq();
	//read timer and overflow counter
	currentTimerValue = __HAL_TIM_GET_COUNTER(&htim5);
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <micros+0xc4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <micros+0xc8>)
 8001330:	6013      	str	r3, [r2, #0]
	currentOverflowCnt = microsOverflowCnt;
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <micros+0xcc>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <micros+0xd0>)
 8001338:	6013      	str	r3, [r2, #0]
	// Check for overflow during the read
	if (__HAL_TIM_GET_FLAG(&htim5, TIM_FLAG_UPDATE))
 800133a:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <micros+0xc4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d109      	bne.n	800135c <micros+0x40>
	{
	currentTimerValue = __HAL_TIM_GET_COUNTER(&htim5);
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <micros+0xc4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <micros+0xc8>)
 8001350:	6013      	str	r3, [r2, #0]
	currentOverflowCnt++;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <micros+0xd0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a24      	ldr	r2, [pc, #144]	; (80013ec <micros+0xd0>)
 800135a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800135c:	b662      	cpsie	i
}
 800135e:	bf00      	nop
	}
	__enable_irq();

	TimeValue = (4294967295*(currentOverflowCnt-1))+currentTimerValue;
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <micros+0xd0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	2200      	movs	r2, #0
 8001368:	4698      	mov	r8, r3
 800136a:	4691      	mov	r9, r2
 800136c:	4642      	mov	r2, r8
 800136e:	464b      	mov	r3, r9
 8001370:	f04f 0400 	mov.w	r4, #0
 8001374:	f04f 0500 	mov.w	r5, #0
 8001378:	07dd      	lsls	r5, r3, #31
 800137a:	ea45 0552 	orr.w	r5, r5, r2, lsr #1
 800137e:	07d4      	lsls	r4, r2, #31
 8001380:	4622      	mov	r2, r4
 8001382:	462b      	mov	r3, r5
 8001384:	ebb2 0008 	subs.w	r0, r2, r8
 8001388:	eb63 0109 	sbc.w	r1, r3, r9
 800138c:	1803      	adds	r3, r0, r0
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	eb41 0301 	adc.w	r3, r1, r1
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800139a:	eb10 0a08 	adds.w	sl, r0, r8
 800139e:	eb41 0b09 	adc.w	fp, r1, r9
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <micros+0xc8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2200      	movs	r2, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	617a      	str	r2, [r7, #20]
 80013ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80013b0:	460b      	mov	r3, r1
 80013b2:	eb1a 0303 	adds.w	r3, sl, r3
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	4613      	mov	r3, r2
 80013ba:	eb4b 0303 	adc.w	r3, fp, r3
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013c4:	490a      	ldr	r1, [pc, #40]	; (80013f0 <micros+0xd4>)
 80013c6:	e9c1 2300 	strd	r2, r3, [r1]
	return TimeValue;
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <micros+0xd4>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000158 	.word	0x20000158
 80013e4:	200001d0 	.word	0x200001d0
 80013e8:	200001d8 	.word	0x200001d8
 80013ec:	200001d4 	.word	0x200001d4
 80013f0:	200001c8 	.word	0x200001c8
 80013f4:	00000000 	.word	0x00000000

080013f8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update()
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
	//collect data
	QEIdata.TimeStamp[NEW] = micros();
 80013fe:	f7ff ff8d 	bl	800131c <micros>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4934      	ldr	r1, [pc, #208]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 8001408:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <QEIEncoderPosVel_Update+0xe4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 8001414:	6013      	str	r3, [r2, #0]

	//Postion 1 turn calculation
	QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 3072;
 8001416:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 8001418:	6819      	ldr	r1, [r3, #0]
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <QEIEncoderPosVel_Update+0xe8>)
 800141c:	fba3 2301 	umull	r2, r3, r3, r1
 8001420:	0ada      	lsrs	r2, r3, #11
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	029b      	lsls	r3, r3, #10
 800142a:	1aca      	subs	r2, r1, r3
 800142c:	ee07 2a90 	vmov	s15, r2
 8001430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 8001436:	edc3 7a06 	vstr	s15, [r3, #24]

	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	607b      	str	r3, [r7, #4]

	//Handle Warp around
	if(diffPosition > 32256)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f5b3 4ffc 	cmp.w	r3, #32256	; 0x7e00
 800144c:	dd03      	ble.n	8001456 <QEIEncoderPosVel_Update+0x5e>
		diffPosition -=64512;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8001454:	607b      	str	r3, [r7, #4]
	if(diffPosition < -32256)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f513 4ffc 	cmn.w	r3, #32256	; 0x7e00
 800145c:	da03      	bge.n	8001466 <QEIEncoderPosVel_Update+0x6e>
		diffPosition +=64512;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8001464:	607b      	str	r3, [r7, #4]

	//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 8001468:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 800146e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001472:	1a84      	subs	r4, r0, r2
 8001474:	eb61 0503 	sbc.w	r5, r1, r3
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7ff f852 	bl	8000524 <__aeabi_ul2d>
 8001480:	a313      	add	r3, pc, #76	; (adr r3, 80014d0 <QEIEncoderPosVel_Update+0xd8>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f883 	bl	8000590 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fa8f 	bl	80009b4 <__aeabi_d2f>
 8001496:	4603      	mov	r3, r0
 8001498:	603b      	str	r3, [r7, #0]

	//calculate anglar velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014a4:	ed97 7a00 	vldr	s14, [r7]
 80014a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 80014ae:	edc3 7a07 	vstr	s15, [r3, #28]

	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 80014b8:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 80014bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014c0:	4905      	ldr	r1, [pc, #20]	; (80014d8 <QEIEncoderPosVel_Update+0xe0>)
 80014c2:	e9c1 2304 	strd	r2, r3, [r1, #16]

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdb0      	pop	{r4, r5, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80014d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80014d8:	200001a8 	.word	0x200001a8
 80014dc:	2000010c 	.word	0x2000010c
 80014e0:	aaaaaaab 	.word	0xaaaaaaab

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_MspInit+0x44>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6613      	str	r3, [r2, #96]	; 0x60
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_MspInit+0x44>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_MspInit+0x44>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6593      	str	r3, [r2, #88]	; 0x58
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_MspInit+0x44>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001526:	f000 fd6d 	bl	8002004 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b09e      	sub	sp, #120	; 0x78
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2254      	movs	r2, #84	; 0x54
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f004 f8e7 	bl	800572c <memset>
  if(huart->Instance==LPUART1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1f      	ldr	r2, [pc, #124]	; (80015e0 <HAL_UART_MspInit+0xa8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d136      	bne.n	80015d6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001568:	2320      	movs	r3, #32
 800156a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0310 	add.w	r3, r7, #16
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fa83 	bl	8002a80 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001580:	f7ff ffb0 	bl	80014e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_UART_MspInit+0xac>)
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	4a16      	ldr	r2, [pc, #88]	; (80015e4 <HAL_UART_MspInit+0xac>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_UART_MspInit+0xac>)
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_UART_MspInit+0xac>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <HAL_UART_MspInit+0xac>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_UART_MspInit+0xac>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80015b4:	230c      	movs	r3, #12
 80015b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80015c4:	230c      	movs	r3, #12
 80015c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f000 fab5 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3778      	adds	r7, #120	; 0x78
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40008000 	.word	0x40008000
 80015e4:	40021000 	.word	0x40021000

080015e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_TIM_Base_MspInit+0x68>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10c      	bne.n	8001614 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 8001600:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001604:	6613      	str	r3, [r2, #96]	; 0x60
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001612:	e018      	b.n	8001646 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_TIM_Base_MspInit+0x70>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d113      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 8001624:	f043 0308 	orr.w	r3, r3, #8
 8001628:	6593      	str	r3, [r2, #88]	; 0x58
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_TIM_Base_MspInit+0x6c>)
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2032      	movs	r0, #50	; 0x32
 800163c:	f000 fa4b 	bl	8001ad6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001640:	2032      	movs	r0, #50	; 0x32
 8001642:	f000 fa62 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40012c00 	.word	0x40012c00
 8001654:	40021000 	.word	0x40021000
 8001658:	40000c00 	.word	0x40000c00

0800165c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d128      	bne.n	80016d0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6593      	str	r3, [r2, #88]	; 0x58
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_TIM_Encoder_MspInit+0x80>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_TIM_Encoder_MspInit+0x80>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_TIM_Encoder_MspInit+0x80>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_TIM_Encoder_MspInit+0x80>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ae:	23c0      	movs	r3, #192	; 0xc0
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f000 fa38 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40000400 	.word	0x40000400
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <HAL_TIM_MspPostInit+0x68>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d11d      	bne.n	800173e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_TIM_MspPostInit+0x6c>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_TIM_MspPostInit+0x6c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_TIM_MspPostInit+0x6c>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800171a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800172c:	2306      	movs	r3, #6
 800172e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f000 fa01 	bl	8001b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40021000 	.word	0x40021000

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f8a2 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017ac:	f000 fb62 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <TIM5_IRQHandler+0x10>)
 80017ba:	f001 ff97 	bl	80036ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000158 	.word	0x20000158

080017c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff ffea 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f003 ff8f 	bl	800573c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181e:	f7ff fa97 	bl	8000d50 <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   r0, =_estack
 8001824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001830:	080057ec 	.word	0x080057ec
  ldr r2, =_sbss
 8001834:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001838:	200001f4 	.word	0x200001f4

0800183c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_2_IRQHandler>

0800183e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f939 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f80e 	bl	8001870 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001860:	f7ff fe46 	bl	80014f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	79fb      	ldrb	r3, [r7, #7]

}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_InitTick+0x68>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d022      	beq.n	80018ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_InitTick+0x6c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_InitTick+0x68>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001890:	fbb1 f3f3 	udiv	r3, r1, r3
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f944 	bl	8001b26 <HAL_SYSTICK_Config>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10f      	bne.n	80018c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	d809      	bhi.n	80018be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018aa:	2200      	movs	r2, #0
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	f04f 30ff 	mov.w	r0, #4294967295
 80018b2:	f000 f910 	bl	8001ad6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_InitTick+0x70>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e007      	b.n	80018ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e004      	b.n	80018ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e001      	b.n	80018ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_IncTick+0x1c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x20>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a03      	ldr	r2, [pc, #12]	; (8001900 <HAL_IncTick+0x1c>)
 80018f4:	6013      	str	r3, [r2, #0]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	200001f0 	.word	0x200001f0
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200001f0 	.word	0x200001f0

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <__NVIC_EnableIRQ+0x38>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff8e 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff29 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff40 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff90 	bl	8001a14 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5f 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff33 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa4 	bl	8001a7c <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b4e:	e15a      	b.n	8001e06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2101      	movs	r1, #1
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 814c 	beq.w	8001e00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d005      	beq.n	8001b80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d130      	bne.n	8001be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 0201 	and.w	r2, r3, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d017      	beq.n	8001c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d123      	bne.n	8001c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	08da      	lsrs	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3208      	adds	r2, #8
 8001c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	6939      	ldr	r1, [r7, #16]
 8001c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0203 	and.w	r2, r3, #3
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 80a6 	beq.w	8001e00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb8:	4a5a      	ldr	r2, [pc, #360]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc0:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_GPIO_Init+0x2e4>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ccc:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cf6:	d01f      	beq.n	8001d38 <HAL_GPIO_Init+0x1f8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x2ec>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d019      	beq.n	8001d34 <HAL_GPIO_Init+0x1f4>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_GPIO_Init+0x2f0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d013      	beq.n	8001d30 <HAL_GPIO_Init+0x1f0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_GPIO_Init+0x2f4>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_GPIO_Init+0x1ec>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a49      	ldr	r2, [pc, #292]	; (8001e38 <HAL_GPIO_Init+0x2f8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0x1e8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a48      	ldr	r2, [pc, #288]	; (8001e3c <HAL_GPIO_Init+0x2fc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_GPIO_Init+0x1e4>
 8001d20:	2305      	movs	r3, #5
 8001d22:	e00a      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d24:	2306      	movs	r3, #6
 8001d26:	e008      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e004      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e002      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_GPIO_Init+0x1fa>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	f002 0203 	and.w	r2, r2, #3
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4093      	lsls	r3, r2
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d4a:	4937      	ldr	r1, [pc, #220]	; (8001e28 <HAL_GPIO_Init+0x2e8>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d58:	4b39      	ldr	r3, [pc, #228]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d7c:	4a30      	ldr	r2, [pc, #192]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001da6:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_GPIO_Init+0x300>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f ae9d 	bne.w	8001b50 <HAL_GPIO_Init+0x10>
  }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	48000400 	.word	0x48000400
 8001e30:	48000800 	.word	0x48000800
 8001e34:	48000c00 	.word	0x48000c00
 8001e38:	48001000 	.word	0x48001000
 8001e3c:	48001400 	.word	0x48001400
 8001e40:	40010400 	.word	0x40010400

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d006      	beq.n	8001e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f806 	bl	8001ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d141      	bne.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eca:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed6:	d131      	bne.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ed8:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ede:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ef0:	4a41      	ldr	r2, [pc, #260]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2232      	movs	r2, #50	; 0x32
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	0c9b      	lsrs	r3, r3, #18
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f0e:	e002      	b.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f16:	4b38      	ldr	r3, [pc, #224]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d102      	bne.n	8001f2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f2      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f36:	d158      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e057      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f42:	4a2d      	ldr	r2, [pc, #180]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f4c:	e04d      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f54:	d141      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f56:	4b28      	ldr	r3, [pc, #160]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d131      	bne.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6a:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f74:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f7c:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2232      	movs	r2, #50	; 0x32
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9a:	e002      	b.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d102      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f2      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d112      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e011      	b.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fd8:	e007      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	20000000 	.word	0x20000000
 8002000:	431bde83 	.word	0x431bde83

08002004 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800200e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002012:	6093      	str	r3, [r2, #8]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40007000 	.word	0x40007000

08002024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e2fe      	b.n	8002634 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d075      	beq.n	800212e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002042:	4b97      	ldr	r3, [pc, #604]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800204c:	4b94      	ldr	r3, [pc, #592]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d102      	bne.n	8002062 <HAL_RCC_OscConfig+0x3e>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d002      	beq.n	8002068 <HAL_RCC_OscConfig+0x44>
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d10b      	bne.n	8002080 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	4b8d      	ldr	r3, [pc, #564]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d05b      	beq.n	800212c <HAL_RCC_OscConfig+0x108>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d157      	bne.n	800212c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e2d9      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002088:	d106      	bne.n	8002098 <HAL_RCC_OscConfig+0x74>
 800208a:	4b85      	ldr	r3, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a84      	ldr	r2, [pc, #528]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e01d      	b.n	80020d4 <HAL_RCC_OscConfig+0xb0>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x98>
 80020a2:	4b7f      	ldr	r3, [pc, #508]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a7e      	ldr	r2, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7b      	ldr	r2, [pc, #492]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0xb0>
 80020bc:	4b78      	ldr	r3, [pc, #480]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a77      	ldr	r2, [pc, #476]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a74      	ldr	r2, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff fc14 	bl	8001908 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fc10 	bl	8001908 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e29e      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f6:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0xc0>
 8002102:	e014      	b.n	800212e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fc00 	bl	8001908 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fbfc 	bl	8001908 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e28a      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800211e:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0xe8>
 800212a:	e000      	b.n	800212e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d075      	beq.n	8002226 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213a:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002144:	4b56      	ldr	r3, [pc, #344]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d102      	bne.n	800215a <HAL_RCC_OscConfig+0x136>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d002      	beq.n	8002160 <HAL_RCC_OscConfig+0x13c>
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b04      	cmp	r3, #4
 800215e:	d11f      	bne.n	80021a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002160:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_OscConfig+0x154>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e25d      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	4946      	ldr	r1, [pc, #280]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800218c:	4b45      	ldr	r3, [pc, #276]	; (80022a4 <HAL_RCC_OscConfig+0x280>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fb6d 	bl	8001870 <HAL_InitTick>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d043      	beq.n	8002224 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e249      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d023      	beq.n	80021f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a3c      	ldr	r2, [pc, #240]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fba8 	bl	8001908 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fba4 	bl	8001908 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e232      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ce:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	061b      	lsls	r3, r3, #24
 80021e8:	492d      	ldr	r1, [pc, #180]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
 80021ee:	e01a      	b.n	8002226 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 80021f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff fb84 	bl	8001908 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7ff fb80 	bl	8001908 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e20e      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x1e0>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d041      	beq.n	80022b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d01c      	beq.n	8002274 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800223c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002240:	4a17      	ldr	r2, [pc, #92]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7ff fb5d 	bl	8001908 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002252:	f7ff fb59 	bl	8001908 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1e7      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ef      	beq.n	8002252 <HAL_RCC_OscConfig+0x22e>
 8002272:	e020      	b.n	80022b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <HAL_RCC_OscConfig+0x27c>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7ff fb40 	bl	8001908 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800228a:	e00d      	b.n	80022a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff fb3c 	bl	8001908 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d906      	bls.n	80022a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1ca      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022a8:	4b8c      	ldr	r3, [pc, #560]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1ea      	bne.n	800228c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80a6 	beq.w	8002410 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c4:	2300      	movs	r3, #0
 80022c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022c8:	4b84      	ldr	r3, [pc, #528]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_OscConfig+0x2b4>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <HAL_RCC_OscConfig+0x2b6>
 80022d8:	2300      	movs	r3, #0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	4a7e      	ldr	r2, [pc, #504]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ea:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022f6:	2301      	movs	r3, #1
 80022f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022fa:	4b79      	ldr	r3, [pc, #484]	; (80024e0 <HAL_RCC_OscConfig+0x4bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d118      	bne.n	8002338 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002306:	4b76      	ldr	r3, [pc, #472]	; (80024e0 <HAL_RCC_OscConfig+0x4bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a75      	ldr	r2, [pc, #468]	; (80024e0 <HAL_RCC_OscConfig+0x4bc>)
 800230c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002310:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002312:	f7ff faf9 	bl	8001908 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231a:	f7ff faf5 	bl	8001908 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e183      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232c:	4b6c      	ldr	r3, [pc, #432]	; (80024e0 <HAL_RCC_OscConfig+0x4bc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d108      	bne.n	8002352 <HAL_RCC_OscConfig+0x32e>
 8002340:	4b66      	ldr	r3, [pc, #408]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	4a65      	ldr	r2, [pc, #404]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002350:	e024      	b.n	800239c <HAL_RCC_OscConfig+0x378>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b05      	cmp	r3, #5
 8002358:	d110      	bne.n	800237c <HAL_RCC_OscConfig+0x358>
 800235a:	4b60      	ldr	r3, [pc, #384]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	4a5e      	ldr	r2, [pc, #376]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236a:	4b5c      	ldr	r3, [pc, #368]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237a:	e00f      	b.n	800239c <HAL_RCC_OscConfig+0x378>
 800237c:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	4a56      	ldr	r2, [pc, #344]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800238c:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	4a52      	ldr	r2, [pc, #328]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d016      	beq.n	80023d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a4:	f7ff fab0 	bl	8001908 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7ff faac 	bl	8001908 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e138      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c2:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ed      	beq.n	80023ac <HAL_RCC_OscConfig+0x388>
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7ff fa99 	bl	8001908 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff fa95 	bl	8001908 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e121      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f0:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ed      	bne.n	80023da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023fe:	7ffb      	ldrb	r3, [r7, #31]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d105      	bne.n	8002410 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002404:	4b35      	ldr	r3, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002408:	4a34      	ldr	r2, [pc, #208]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 800240a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b00      	cmp	r3, #0
 800241a:	d03c      	beq.n	8002496 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800242a:	4a2c      	ldr	r2, [pc, #176]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7ff fa68 	bl	8001908 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243c:	f7ff fa64 	bl	8001908 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0f2      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800244e:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ef      	beq.n	800243c <HAL_RCC_OscConfig+0x418>
 800245c:	e01b      	b.n	8002496 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800245e:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 8002466:	f023 0301 	bic.w	r3, r3, #1
 800246a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7ff fa4b 	bl	8001908 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002476:	f7ff fa47 	bl	8001908 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0d5      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 800248a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ef      	bne.n	8002476 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80c9 	beq.w	8002632 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	f000 8083 	beq.w	80025b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d15e      	bne.n	8002574 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_RCC_OscConfig+0x4b8>)
 80024bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7ff fa21 	bl	8001908 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c8:	e00c      	b.n	80024e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7ff fa1d 	bl	8001908 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d905      	bls.n	80024e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0ab      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e4:	4b55      	ldr	r3, [pc, #340]	; (800263c <HAL_RCC_OscConfig+0x618>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ec      	bne.n	80024ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f0:	4b52      	ldr	r3, [pc, #328]	; (800263c <HAL_RCC_OscConfig+0x618>)
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4b52      	ldr	r3, [pc, #328]	; (8002640 <HAL_RCC_OscConfig+0x61c>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6a11      	ldr	r1, [r2, #32]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002500:	3a01      	subs	r2, #1
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800250a:	0212      	lsls	r2, r2, #8
 800250c:	4311      	orrs	r1, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002512:	0852      	lsrs	r2, r2, #1
 8002514:	3a01      	subs	r2, #1
 8002516:	0552      	lsls	r2, r2, #21
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800251e:	0852      	lsrs	r2, r2, #1
 8002520:	3a01      	subs	r2, #1
 8002522:	0652      	lsls	r2, r2, #25
 8002524:	4311      	orrs	r1, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800252a:	06d2      	lsls	r2, r2, #27
 800252c:	430a      	orrs	r2, r1
 800252e:	4943      	ldr	r1, [pc, #268]	; (800263c <HAL_RCC_OscConfig+0x618>)
 8002530:	4313      	orrs	r3, r2
 8002532:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002534:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_OscConfig+0x618>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a40      	ldr	r2, [pc, #256]	; (800263c <HAL_RCC_OscConfig+0x618>)
 800253a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <HAL_RCC_OscConfig+0x618>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4a3d      	ldr	r2, [pc, #244]	; (800263c <HAL_RCC_OscConfig+0x618>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7ff f9dc 	bl	8001908 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff f9d8 	bl	8001908 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e066      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002566:	4b35      	ldr	r3, [pc, #212]	; (800263c <HAL_RCC_OscConfig+0x618>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x530>
 8002572:	e05e      	b.n	8002632 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_RCC_OscConfig+0x618>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a30      	ldr	r2, [pc, #192]	; (800263c <HAL_RCC_OscConfig+0x618>)
 800257a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7ff f9c2 	bl	8001908 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7ff f9be 	bl	8001908 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e04c      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800259a:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCC_OscConfig+0x618>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025a6:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_OscConfig+0x618>)
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	4924      	ldr	r1, [pc, #144]	; (800263c <HAL_RCC_OscConfig+0x618>)
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_RCC_OscConfig+0x620>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	60cb      	str	r3, [r1, #12]
 80025b2:	e03e      	b.n	8002632 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e039      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025c0:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCC_OscConfig+0x618>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d12c      	bne.n	800262e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	3b01      	subs	r3, #1
 80025e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d123      	bne.n	800262e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d11b      	bne.n	800262e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d113      	bne.n	800262e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	085b      	lsrs	r3, r3, #1
 8002612:	3b01      	subs	r3, #1
 8002614:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d109      	bne.n	800262e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40021000 	.word	0x40021000
 8002640:	019f800c 	.word	0x019f800c
 8002644:	feeefffc 	.word	0xfeeefffc

08002648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e11e      	b.n	800289e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b91      	ldr	r3, [pc, #580]	; (80028a8 <HAL_RCC_ClockConfig+0x260>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b8e      	ldr	r3, [pc, #568]	; (80028a8 <HAL_RCC_ClockConfig+0x260>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 020f 	bic.w	r2, r3, #15
 8002676:	498c      	ldr	r1, [pc, #560]	; (80028a8 <HAL_RCC_ClockConfig+0x260>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b8a      	ldr	r3, [pc, #552]	; (80028a8 <HAL_RCC_ClockConfig+0x260>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e106      	b.n	800289e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d073      	beq.n	8002784 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d129      	bne.n	80026f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a4:	4b81      	ldr	r3, [pc, #516]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0f4      	b.n	800289e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026b4:	f000 f99e 	bl	80029f4 <RCC_GetSysClockFreqFromPLLSource>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4a7c      	ldr	r2, [pc, #496]	; (80028b0 <HAL_RCC_ClockConfig+0x268>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d93f      	bls.n	8002742 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026c2:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d033      	beq.n	8002742 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d12f      	bne.n	8002742 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026e2:	4b72      	ldr	r3, [pc, #456]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ea:	4a70      	ldr	r2, [pc, #448]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80026ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e024      	b.n	8002742 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d107      	bne.n	8002710 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002700:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0c6      	b.n	800289e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0be      	b.n	800289e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002720:	f000 f8ce 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8002724:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4a61      	ldr	r2, [pc, #388]	; (80028b0 <HAL_RCC_ClockConfig+0x268>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d909      	bls.n	8002742 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002736:	4a5d      	ldr	r2, [pc, #372]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002742:	4b5a      	ldr	r3, [pc, #360]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f023 0203 	bic.w	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4957      	ldr	r1, [pc, #348]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002750:	4313      	orrs	r3, r2
 8002752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002754:	f7ff f8d8 	bl	8001908 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	e00a      	b.n	8002772 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275c:	f7ff f8d4 	bl	8001908 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e095      	b.n	800289e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	4b4e      	ldr	r3, [pc, #312]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	429a      	cmp	r2, r3
 8002782:	d1eb      	bne.n	800275c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d023      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800279c:	4b43      	ldr	r3, [pc, #268]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4a42      	ldr	r2, [pc, #264]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80027a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027b4:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027bc:	4a3b      	ldr	r2, [pc, #236]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80027be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4936      	ldr	r1, [pc, #216]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
 80027d6:	e008      	b.n	80027ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b80      	cmp	r3, #128	; 0x80
 80027dc:	d105      	bne.n	80027ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027de:	4b33      	ldr	r3, [pc, #204]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 80027e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ea:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_RCC_ClockConfig+0x260>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d21d      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f8:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 020f 	bic.w	r2, r3, #15
 8002800:	4929      	ldr	r1, [pc, #164]	; (80028a8 <HAL_RCC_ClockConfig+0x260>)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002808:	f7ff f87e 	bl	8001908 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7ff f87a 	bl	8001908 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e03b      	b.n	800289e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCC_ClockConfig+0x260>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d1ed      	bne.n	8002810 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4917      	ldr	r1, [pc, #92]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d009      	beq.n	8002872 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	490f      	ldr	r1, [pc, #60]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002872:	f000 f825 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8002876:	4602      	mov	r2, r0
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_RCC_ClockConfig+0x264>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	490c      	ldr	r1, [pc, #48]	; (80028b4 <HAL_RCC_ClockConfig+0x26c>)
 8002884:	5ccb      	ldrb	r3, [r1, r3]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x270>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe ffea 	bl	8001870 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40021000 	.word	0x40021000
 80028b0:	04c4b400 	.word	0x04c4b400
 80028b4:	0800579c 	.word	0x0800579c
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e047      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d102      	bne.n	80028ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e4:	4b26      	ldr	r3, [pc, #152]	; (8002980 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	e03e      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d136      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3301      	adds	r3, #1
 800290c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d10c      	bne.n	800292e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002914:	4a1a      	ldr	r2, [pc, #104]	; (8002980 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800291e:	68d2      	ldr	r2, [r2, #12]
 8002920:	0a12      	lsrs	r2, r2, #8
 8002922:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
      break;
 800292c:	e00c      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002938:	68d2      	ldr	r2, [r2, #12]
 800293a:	0a12      	lsrs	r2, r2, #8
 800293c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
      break;
 8002946:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0e5b      	lsrs	r3, r3, #25
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	3301      	adds	r3, #1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e001      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002968:	693b      	ldr	r3, [r7, #16]
}
 800296a:	4618      	mov	r0, r3
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	00f42400 	.word	0x00f42400
 8002980:	016e3600 	.word	0x016e3600

08002984 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCC_GetHCLKFreq+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029a0:	f7ff fff0 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4904      	ldr	r1, [pc, #16]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	080057ac 	.word	0x080057ac

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029cc:	f7ff ffda 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0adb      	lsrs	r3, r3, #11
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	080057ac 	.word	0x080057ac

080029f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fa:	4b1e      	ldr	r3, [pc, #120]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d10c      	bne.n	8002a32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a22:	68d2      	ldr	r2, [r2, #12]
 8002a24:	0a12      	lsrs	r2, r2, #8
 8002a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
    break;
 8002a30:	e00c      	b.n	8002a4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a32:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	0a12      	lsrs	r2, r2, #8
 8002a40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
    break;
 8002a4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0e5b      	lsrs	r3, r3, #25
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	3301      	adds	r3, #1
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a66:	687b      	ldr	r3, [r7, #4]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40021000 	.word	0x40021000
 8002a78:	016e3600 	.word	0x016e3600
 8002a7c:	00f42400 	.word	0x00f42400

08002a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a88:	2300      	movs	r3, #0
 8002a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8098 	beq.w	8002bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa2:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10d      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aae:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab2:	4a3f      	ldr	r2, [pc, #252]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aca:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a39      	ldr	r2, [pc, #228]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad6:	f7fe ff17 	bl	8001908 <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002adc:	e009      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe ff13 	bl	8001908 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d902      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	74fb      	strb	r3, [r7, #19]
        break;
 8002af0:	e005      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ef      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d159      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b04:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d01e      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d019      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	4a1f      	ldr	r2, [pc, #124]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	4a1b      	ldr	r2, [pc, #108]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b4c:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fed3 	bl	8001908 <HAL_GetTick>
 8002b62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b64:	e00b      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fe fecf 	bl	8001908 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d902      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ec      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ba8:	e008      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	74bb      	strb	r3, [r7, #18]
 8002bae:	e005      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbc:	7c7b      	ldrb	r3, [r7, #17]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4ba7      	ldr	r3, [pc, #668]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	4aa6      	ldr	r2, [pc, #664]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bda:	4ba1      	ldr	r3, [pc, #644]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f023 0203 	bic.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	499d      	ldr	r1, [pc, #628]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bfc:	4b98      	ldr	r3, [pc, #608]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 020c 	bic.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4995      	ldr	r1, [pc, #596]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c1e:	4b90      	ldr	r3, [pc, #576]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	498c      	ldr	r1, [pc, #560]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c40:	4b87      	ldr	r3, [pc, #540]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	4984      	ldr	r1, [pc, #528]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c62:	4b7f      	ldr	r3, [pc, #508]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	497b      	ldr	r1, [pc, #492]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c84:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	4973      	ldr	r1, [pc, #460]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	496a      	ldr	r1, [pc, #424]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cc8:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4962      	ldr	r1, [pc, #392]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cea:	4b5d      	ldr	r3, [pc, #372]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	4959      	ldr	r1, [pc, #356]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d0c:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	4951      	ldr	r1, [pc, #324]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d2e:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	4948      	ldr	r1, [pc, #288]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d50:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4940      	ldr	r1, [pc, #256]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a3a      	ldr	r2, [pc, #232]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	4932      	ldr	r1, [pc, #200]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a2c      	ldr	r2, [pc, #176]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dc0:	4b27      	ldr	r3, [pc, #156]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	4924      	ldr	r1, [pc, #144]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de0:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a1e      	ldr	r2, [pc, #120]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d015      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	4916      	ldr	r1, [pc, #88]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e16:	d105      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d019      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	4908      	ldr	r1, [pc, #32]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e4e:	d109      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a02      	ldr	r2, [pc, #8]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e5a:	60d3      	str	r3, [r2, #12]
 8002e5c:	e002      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e5e:	bf00      	nop
 8002e60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e70:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4926      	ldr	r1, [pc, #152]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb6:	4918      	ldr	r1, [pc, #96]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	490a      	ldr	r1, [pc, #40]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002efe:	d105      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e049      	b.n	8002fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fb50 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 ff68 	bl	8003e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d001      	beq.n	8002fe4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e04c      	b.n	800307e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a26      	ldr	r2, [pc, #152]	; (800308c <HAL_TIM_Base_Start+0xc0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d022      	beq.n	800303c <HAL_TIM_Base_Start+0x70>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d01d      	beq.n	800303c <HAL_TIM_Base_Start+0x70>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <HAL_TIM_Base_Start+0xc4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d018      	beq.n	800303c <HAL_TIM_Base_Start+0x70>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_TIM_Base_Start+0xc8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <HAL_TIM_Base_Start+0x70>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <HAL_TIM_Base_Start+0xcc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00e      	beq.n	800303c <HAL_TIM_Base_Start+0x70>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_TIM_Base_Start+0xd0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d009      	beq.n	800303c <HAL_TIM_Base_Start+0x70>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <HAL_TIM_Base_Start+0xd4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_TIM_Base_Start+0x70>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1b      	ldr	r2, [pc, #108]	; (80030a4 <HAL_TIM_Base_Start+0xd8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d115      	bne.n	8003068 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <HAL_TIM_Base_Start+0xdc>)
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b06      	cmp	r3, #6
 800304c:	d015      	beq.n	800307a <HAL_TIM_Base_Start+0xae>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d011      	beq.n	800307a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003066:	e008      	b.n	800307a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e000      	b.n	800307c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40013400 	.word	0x40013400
 80030a0:	40014000 	.word	0x40014000
 80030a4:	40015000 	.word	0x40015000
 80030a8:	00010007 	.word	0x00010007

080030ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d001      	beq.n	80030c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e054      	b.n	800316e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a26      	ldr	r2, [pc, #152]	; (800317c <HAL_TIM_Base_Start_IT+0xd0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d022      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x80>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d01d      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a22      	ldr	r2, [pc, #136]	; (8003180 <HAL_TIM_Base_Start_IT+0xd4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d018      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x80>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <HAL_TIM_Base_Start_IT+0xd8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x80>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a1f      	ldr	r2, [pc, #124]	; (8003188 <HAL_TIM_Base_Start_IT+0xdc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00e      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x80>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1e      	ldr	r2, [pc, #120]	; (800318c <HAL_TIM_Base_Start_IT+0xe0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d009      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x80>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <HAL_TIM_Base_Start_IT+0xe4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d004      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x80>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <HAL_TIM_Base_Start_IT+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d115      	bne.n	8003158 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_TIM_Base_Start_IT+0xec>)
 8003134:	4013      	ands	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b06      	cmp	r3, #6
 800313c:	d015      	beq.n	800316a <HAL_TIM_Base_Start_IT+0xbe>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d011      	beq.n	800316a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003156:	e008      	b.n	800316a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	e000      	b.n	800316c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40013400 	.word	0x40013400
 8003190:	40014000 	.word	0x40014000
 8003194:	40015000 	.word	0x40015000
 8003198:	00010007 	.word	0x00010007

0800319c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e049      	b.n	8003242 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f841 	bl	800324a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 fe28 	bl	8003e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HAL_TIM_PWM_Start+0x24>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e03c      	b.n	80032fe <HAL_TIM_PWM_Start+0x9e>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b04      	cmp	r3, #4
 8003288:	d109      	bne.n	800329e <HAL_TIM_PWM_Start+0x3e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e02f      	b.n	80032fe <HAL_TIM_PWM_Start+0x9e>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d109      	bne.n	80032b8 <HAL_TIM_PWM_Start+0x58>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	bf14      	ite	ne
 80032b0:	2301      	movne	r3, #1
 80032b2:	2300      	moveq	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e022      	b.n	80032fe <HAL_TIM_PWM_Start+0x9e>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d109      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x72>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	bf14      	ite	ne
 80032ca:	2301      	movne	r3, #1
 80032cc:	2300      	moveq	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e015      	b.n	80032fe <HAL_TIM_PWM_Start+0x9e>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d109      	bne.n	80032ec <HAL_TIM_PWM_Start+0x8c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	bf14      	ite	ne
 80032e4:	2301      	movne	r3, #1
 80032e6:	2300      	moveq	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e008      	b.n	80032fe <HAL_TIM_PWM_Start+0x9e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0a6      	b.n	8003454 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <HAL_TIM_PWM_Start+0xb6>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003314:	e023      	b.n	800335e <HAL_TIM_PWM_Start+0xfe>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b04      	cmp	r3, #4
 800331a:	d104      	bne.n	8003326 <HAL_TIM_PWM_Start+0xc6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003324:	e01b      	b.n	800335e <HAL_TIM_PWM_Start+0xfe>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d104      	bne.n	8003336 <HAL_TIM_PWM_Start+0xd6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	e013      	b.n	800335e <HAL_TIM_PWM_Start+0xfe>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	d104      	bne.n	8003346 <HAL_TIM_PWM_Start+0xe6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003344:	e00b      	b.n	800335e <HAL_TIM_PWM_Start+0xfe>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b10      	cmp	r3, #16
 800334a:	d104      	bne.n	8003356 <HAL_TIM_PWM_Start+0xf6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	e003      	b.n	800335e <HAL_TIM_PWM_Start+0xfe>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f001 f9dc 	bl	8004724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3a      	ldr	r2, [pc, #232]	; (800345c <HAL_TIM_PWM_Start+0x1fc>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d018      	beq.n	80033a8 <HAL_TIM_PWM_Start+0x148>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a39      	ldr	r2, [pc, #228]	; (8003460 <HAL_TIM_PWM_Start+0x200>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_TIM_PWM_Start+0x148>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a37      	ldr	r2, [pc, #220]	; (8003464 <HAL_TIM_PWM_Start+0x204>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <HAL_TIM_PWM_Start+0x148>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a36      	ldr	r2, [pc, #216]	; (8003468 <HAL_TIM_PWM_Start+0x208>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_TIM_PWM_Start+0x148>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a34      	ldr	r2, [pc, #208]	; (800346c <HAL_TIM_PWM_Start+0x20c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_TIM_PWM_Start+0x148>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a33      	ldr	r2, [pc, #204]	; (8003470 <HAL_TIM_PWM_Start+0x210>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d101      	bne.n	80033ac <HAL_TIM_PWM_Start+0x14c>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_TIM_PWM_Start+0x14e>
 80033ac:	2300      	movs	r3, #0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a25      	ldr	r2, [pc, #148]	; (800345c <HAL_TIM_PWM_Start+0x1fc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d022      	beq.n	8003412 <HAL_TIM_PWM_Start+0x1b2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d4:	d01d      	beq.n	8003412 <HAL_TIM_PWM_Start+0x1b2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a26      	ldr	r2, [pc, #152]	; (8003474 <HAL_TIM_PWM_Start+0x214>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d018      	beq.n	8003412 <HAL_TIM_PWM_Start+0x1b2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a24      	ldr	r2, [pc, #144]	; (8003478 <HAL_TIM_PWM_Start+0x218>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <HAL_TIM_PWM_Start+0x1b2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a23      	ldr	r2, [pc, #140]	; (800347c <HAL_TIM_PWM_Start+0x21c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d00e      	beq.n	8003412 <HAL_TIM_PWM_Start+0x1b2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_TIM_PWM_Start+0x200>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d009      	beq.n	8003412 <HAL_TIM_PWM_Start+0x1b2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a18      	ldr	r2, [pc, #96]	; (8003464 <HAL_TIM_PWM_Start+0x204>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d004      	beq.n	8003412 <HAL_TIM_PWM_Start+0x1b2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <HAL_TIM_PWM_Start+0x210>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d115      	bne.n	800343e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_TIM_PWM_Start+0x220>)
 800341a:	4013      	ands	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d015      	beq.n	8003450 <HAL_TIM_PWM_Start+0x1f0>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d011      	beq.n	8003450 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	e008      	b.n	8003450 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e000      	b.n	8003452 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003450:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40013400 	.word	0x40013400
 8003464:	40014000 	.word	0x40014000
 8003468:	40014400 	.word	0x40014400
 800346c:	40014800 	.word	0x40014800
 8003470:	40015000 	.word	0x40015000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	00010007 	.word	0x00010007

08003484 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e097      	b.n	80035c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7fe f8d5 	bl	800165c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80034c8:	f023 0307 	bic.w	r3, r3, #7
 80034cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fca9 	bl	8003e30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	4313      	orrs	r3, r2
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003524:	f023 030c 	bic.w	r3, r3, #12
 8003528:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	4313      	orrs	r3, r2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	011a      	lsls	r2, r3, #4
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	031b      	lsls	r3, r3, #12
 8003554:	4313      	orrs	r3, r2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	4313      	orrs	r3, r2
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d110      	bne.n	8003622 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003606:	7b7b      	ldrb	r3, [r7, #13]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e069      	b.n	80036e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003620:	e031      	b.n	8003686 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d110      	bne.n	800364a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d102      	bne.n	8003634 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800362e:	7b3b      	ldrb	r3, [r7, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d001      	beq.n	8003638 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e055      	b.n	80036e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003648:	e01d      	b.n	8003686 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d108      	bne.n	8003662 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003650:	7bbb      	ldrb	r3, [r7, #14]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003656:	7b7b      	ldrb	r3, [r7, #13]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d102      	bne.n	8003662 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800365c:	7b3b      	ldrb	r3, [r7, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d001      	beq.n	8003666 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e03e      	b.n	80036e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2202      	movs	r2, #2
 8003682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_TIM_Encoder_Start+0xc4>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b04      	cmp	r3, #4
 8003690:	d008      	beq.n	80036a4 <HAL_TIM_Encoder_Start+0xd4>
 8003692:	e00f      	b.n	80036b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2201      	movs	r2, #1
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f001 f841 	bl	8004724 <TIM_CCxChannelCmd>
      break;
 80036a2:	e016      	b.n	80036d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2201      	movs	r2, #1
 80036aa:	2104      	movs	r1, #4
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f839 	bl	8004724 <TIM_CCxChannelCmd>
      break;
 80036b2:	e00e      	b.n	80036d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2201      	movs	r2, #1
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 f831 	bl	8004724 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2201      	movs	r2, #1
 80036c8:	2104      	movs	r1, #4
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f82a 	bl	8004724 <TIM_CCxChannelCmd>
      break;
 80036d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d020      	beq.n	8003750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0202 	mvn.w	r2, #2
 8003720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fb5c 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 800373c:	e005      	b.n	800374a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fb4e 	bl	8003de0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fb5f 	bl	8003e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d020      	beq.n	800379c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01b      	beq.n	800379c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0204 	mvn.w	r2, #4
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fb36 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fb28 	bl	8003de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 fb39 	bl	8003e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d020      	beq.n	80037e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0208 	mvn.w	r2, #8
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fb10 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fb02 	bl	8003de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fb13 	bl	8003e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d020      	beq.n	8003834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01b      	beq.n	8003834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0210 	mvn.w	r2, #16
 8003804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2208      	movs	r2, #8
 800380a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 faea 	bl	8003df4 <HAL_TIM_IC_CaptureCallback>
 8003820:	e005      	b.n	800382e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fadc 	bl	8003de0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 faed 	bl	8003e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0201 	mvn.w	r2, #1
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd fd4a 	bl	80012ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00c      	beq.n	8003886 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800387e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 f8a9 	bl	80049d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00c      	beq.n	80038aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f001 f8a1 	bl	80049ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 faa7 	bl	8003e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00c      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0220 	mvn.w	r2, #32
 80038ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f001 f869 	bl	80049c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800390e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f001 f875 	bl	8004a00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00c      	beq.n	800393a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f001 f86d 	bl	8004a14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00c      	beq.n	800395e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f001 f865 	bl	8004a28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00c      	beq.n	8003982 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800397a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f001 f85d 	bl	8004a3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003982:	bf00      	nop
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0ff      	b.n	8003baa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b14      	cmp	r3, #20
 80039b6:	f200 80f0 	bhi.w	8003b9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	08003a15 	.word	0x08003a15
 80039c4:	08003b9b 	.word	0x08003b9b
 80039c8:	08003b9b 	.word	0x08003b9b
 80039cc:	08003b9b 	.word	0x08003b9b
 80039d0:	08003a55 	.word	0x08003a55
 80039d4:	08003b9b 	.word	0x08003b9b
 80039d8:	08003b9b 	.word	0x08003b9b
 80039dc:	08003b9b 	.word	0x08003b9b
 80039e0:	08003a97 	.word	0x08003a97
 80039e4:	08003b9b 	.word	0x08003b9b
 80039e8:	08003b9b 	.word	0x08003b9b
 80039ec:	08003b9b 	.word	0x08003b9b
 80039f0:	08003ad7 	.word	0x08003ad7
 80039f4:	08003b9b 	.word	0x08003b9b
 80039f8:	08003b9b 	.word	0x08003b9b
 80039fc:	08003b9b 	.word	0x08003b9b
 8003a00:	08003b19 	.word	0x08003b19
 8003a04:	08003b9b 	.word	0x08003b9b
 8003a08:	08003b9b 	.word	0x08003b9b
 8003a0c:	08003b9b 	.word	0x08003b9b
 8003a10:	08003b59 	.word	0x08003b59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fabc 	bl	8003f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0208 	orr.w	r2, r2, #8
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	619a      	str	r2, [r3, #24]
      break;
 8003a52:	e0a5      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fb36 	bl	80040cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6999      	ldr	r1, [r3, #24]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	021a      	lsls	r2, r3, #8
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]
      break;
 8003a94:	e084      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fba9 	bl	80041f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0208 	orr.w	r2, r2, #8
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0204 	bic.w	r2, r2, #4
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	61da      	str	r2, [r3, #28]
      break;
 8003ad4:	e064      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fc1b 	bl	8004318 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	021a      	lsls	r2, r3, #8
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	61da      	str	r2, [r3, #28]
      break;
 8003b16:	e043      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fc8e 	bl	8004440 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b56:	e023      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fcd8 	bl	8004514 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	021a      	lsls	r2, r3, #8
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003b98:	e002      	b.n	8003ba0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop

08003bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0f6      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x20a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003bee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6f      	ldr	r2, [pc, #444]	; (8003dc8 <HAL_TIM_ConfigClockSource+0x214>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	f000 80c1 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003c10:	4a6d      	ldr	r2, [pc, #436]	; (8003dc8 <HAL_TIM_ConfigClockSource+0x214>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	f200 80c6 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c18:	4a6c      	ldr	r2, [pc, #432]	; (8003dcc <HAL_TIM_ConfigClockSource+0x218>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f000 80b9 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003c20:	4a6a      	ldr	r2, [pc, #424]	; (8003dcc <HAL_TIM_ConfigClockSource+0x218>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	f200 80be 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c28:	4a69      	ldr	r2, [pc, #420]	; (8003dd0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	f000 80b1 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003c30:	4a67      	ldr	r2, [pc, #412]	; (8003dd0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	f200 80b6 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c38:	4a66      	ldr	r2, [pc, #408]	; (8003dd4 <HAL_TIM_ConfigClockSource+0x220>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	f000 80a9 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003c40:	4a64      	ldr	r2, [pc, #400]	; (8003dd4 <HAL_TIM_ConfigClockSource+0x220>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	f200 80ae 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c48:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_TIM_ConfigClockSource+0x224>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	f000 80a1 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003c50:	4a61      	ldr	r2, [pc, #388]	; (8003dd8 <HAL_TIM_ConfigClockSource+0x224>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	f200 80a6 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c58:	4a60      	ldr	r2, [pc, #384]	; (8003ddc <HAL_TIM_ConfigClockSource+0x228>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	f000 8099 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003c60:	4a5e      	ldr	r2, [pc, #376]	; (8003ddc <HAL_TIM_ConfigClockSource+0x228>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	f200 809e 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c6c:	f000 8091 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003c70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c74:	f200 8096 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7c:	f000 8089 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c84:	f200 808e 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8c:	d03e      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0x158>
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	f200 8087 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	f000 8086 	beq.w	8003daa <HAL_TIM_ConfigClockSource+0x1f6>
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d87f      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ca4:	2b70      	cmp	r3, #112	; 0x70
 8003ca6:	d01a      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x12a>
 8003ca8:	2b70      	cmp	r3, #112	; 0x70
 8003caa:	d87b      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cac:	2b60      	cmp	r3, #96	; 0x60
 8003cae:	d050      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x19e>
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d877      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d03c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x17e>
 8003cb8:	2b50      	cmp	r3, #80	; 0x50
 8003cba:	d873      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d058      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x1be>
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d86f      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d064      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d86b      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d060      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d867      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05c      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d05a      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x1de>
 8003cdc:	e062      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cee:	f000 fcf9 	bl	80046e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	609a      	str	r2, [r3, #8]
      break;
 8003d0a:	e04f      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d1c:	f000 fce2 	bl	80046e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2e:	609a      	str	r2, [r3, #8]
      break;
 8003d30:	e03c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f000 fc54 	bl	80045ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2150      	movs	r1, #80	; 0x50
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fcad 	bl	80046aa <TIM_ITRx_SetConfig>
      break;
 8003d50:	e02c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f000 fc73 	bl	800464a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2160      	movs	r1, #96	; 0x60
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fc9d 	bl	80046aa <TIM_ITRx_SetConfig>
      break;
 8003d70:	e01c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f000 fc34 	bl	80045ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2140      	movs	r1, #64	; 0x40
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fc8d 	bl	80046aa <TIM_ITRx_SetConfig>
      break;
 8003d90:	e00c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f000 fc84 	bl	80046aa <TIM_ITRx_SetConfig>
      break;
 8003da2:	e003      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	e000      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00100070 	.word	0x00100070
 8003dcc:	00100060 	.word	0x00100060
 8003dd0:	00100050 	.word	0x00100050
 8003dd4:	00100040 	.word	0x00100040
 8003dd8:	00100030 	.word	0x00100030
 8003ddc:	00100020 	.word	0x00100020

08003de0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a4c      	ldr	r2, [pc, #304]	; (8003f74 <TIM_Base_SetConfig+0x144>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d017      	beq.n	8003e78 <TIM_Base_SetConfig+0x48>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4e:	d013      	beq.n	8003e78 <TIM_Base_SetConfig+0x48>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a49      	ldr	r2, [pc, #292]	; (8003f78 <TIM_Base_SetConfig+0x148>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00f      	beq.n	8003e78 <TIM_Base_SetConfig+0x48>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a48      	ldr	r2, [pc, #288]	; (8003f7c <TIM_Base_SetConfig+0x14c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <TIM_Base_SetConfig+0x48>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a47      	ldr	r2, [pc, #284]	; (8003f80 <TIM_Base_SetConfig+0x150>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <TIM_Base_SetConfig+0x48>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a46      	ldr	r2, [pc, #280]	; (8003f84 <TIM_Base_SetConfig+0x154>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_Base_SetConfig+0x48>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a45      	ldr	r2, [pc, #276]	; (8003f88 <TIM_Base_SetConfig+0x158>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d108      	bne.n	8003e8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a39      	ldr	r2, [pc, #228]	; (8003f74 <TIM_Base_SetConfig+0x144>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d023      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e98:	d01f      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a36      	ldr	r2, [pc, #216]	; (8003f78 <TIM_Base_SetConfig+0x148>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01b      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a35      	ldr	r2, [pc, #212]	; (8003f7c <TIM_Base_SetConfig+0x14c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d017      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <TIM_Base_SetConfig+0x150>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a33      	ldr	r2, [pc, #204]	; (8003f84 <TIM_Base_SetConfig+0x154>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00f      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <TIM_Base_SetConfig+0x15c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00b      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <TIM_Base_SetConfig+0x160>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a31      	ldr	r2, [pc, #196]	; (8003f94 <TIM_Base_SetConfig+0x164>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_Base_SetConfig+0xaa>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2c      	ldr	r2, [pc, #176]	; (8003f88 <TIM_Base_SetConfig+0x158>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d108      	bne.n	8003eec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <TIM_Base_SetConfig+0x144>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <TIM_Base_SetConfig+0x110>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <TIM_Base_SetConfig+0x154>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00f      	beq.n	8003f40 <TIM_Base_SetConfig+0x110>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1a      	ldr	r2, [pc, #104]	; (8003f8c <TIM_Base_SetConfig+0x15c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <TIM_Base_SetConfig+0x110>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <TIM_Base_SetConfig+0x160>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <TIM_Base_SetConfig+0x110>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <TIM_Base_SetConfig+0x164>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_Base_SetConfig+0x110>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <TIM_Base_SetConfig+0x158>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d103      	bne.n	8003f48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]
  }
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40013400 	.word	0x40013400
 8003f88:	40015000 	.word	0x40015000
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f023 0201 	bic.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0302 	bic.w	r3, r3, #2
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <TIM_OC1_SetConfig+0x11c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <TIM_OC1_SetConfig+0x88>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a2f      	ldr	r2, [pc, #188]	; (80040b8 <TIM_OC1_SetConfig+0x120>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00f      	beq.n	8004020 <TIM_OC1_SetConfig+0x88>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <TIM_OC1_SetConfig+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00b      	beq.n	8004020 <TIM_OC1_SetConfig+0x88>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a2d      	ldr	r2, [pc, #180]	; (80040c0 <TIM_OC1_SetConfig+0x128>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_OC1_SetConfig+0x88>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a2c      	ldr	r2, [pc, #176]	; (80040c4 <TIM_OC1_SetConfig+0x12c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC1_SetConfig+0x88>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a2b      	ldr	r2, [pc, #172]	; (80040c8 <TIM_OC1_SetConfig+0x130>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10c      	bne.n	800403a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0308 	bic.w	r3, r3, #8
 8004026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <TIM_OC1_SetConfig+0x11c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <TIM_OC1_SetConfig+0xd2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a1c      	ldr	r2, [pc, #112]	; (80040b8 <TIM_OC1_SetConfig+0x120>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00f      	beq.n	800406a <TIM_OC1_SetConfig+0xd2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a1b      	ldr	r2, [pc, #108]	; (80040bc <TIM_OC1_SetConfig+0x124>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00b      	beq.n	800406a <TIM_OC1_SetConfig+0xd2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <TIM_OC1_SetConfig+0x128>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d007      	beq.n	800406a <TIM_OC1_SetConfig+0xd2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <TIM_OC1_SetConfig+0x12c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_OC1_SetConfig+0xd2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <TIM_OC1_SetConfig+0x130>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d111      	bne.n	800408e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40013400 	.word	0x40013400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800
 80040c8:	40015000 	.word	0x40015000

080040cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f023 0210 	bic.w	r2, r3, #16
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <TIM_OC2_SetConfig+0x110>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_OC2_SetConfig+0x74>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a2b      	ldr	r2, [pc, #172]	; (80041e0 <TIM_OC2_SetConfig+0x114>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC2_SetConfig+0x74>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <TIM_OC2_SetConfig+0x118>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10d      	bne.n	800415c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800415a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <TIM_OC2_SetConfig+0x110>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <TIM_OC2_SetConfig+0xc0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <TIM_OC2_SetConfig+0x114>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00f      	beq.n	800418c <TIM_OC2_SetConfig+0xc0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <TIM_OC2_SetConfig+0x11c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_OC2_SetConfig+0xc0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <TIM_OC2_SetConfig+0x120>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d007      	beq.n	800418c <TIM_OC2_SetConfig+0xc0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <TIM_OC2_SetConfig+0x124>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC2_SetConfig+0xc0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <TIM_OC2_SetConfig+0x118>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d113      	bne.n	80041b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004192:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40013400 	.word	0x40013400
 80041e4:	40015000 	.word	0x40015000
 80041e8:	40014000 	.word	0x40014000
 80041ec:	40014400 	.word	0x40014400
 80041f0:	40014800 	.word	0x40014800

080041f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0303 	bic.w	r3, r3, #3
 800422e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	021b      	lsls	r3, r3, #8
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <TIM_OC3_SetConfig+0x10c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d007      	beq.n	8004266 <TIM_OC3_SetConfig+0x72>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <TIM_OC3_SetConfig+0x110>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d003      	beq.n	8004266 <TIM_OC3_SetConfig+0x72>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a29      	ldr	r2, [pc, #164]	; (8004308 <TIM_OC3_SetConfig+0x114>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10d      	bne.n	8004282 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800426c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <TIM_OC3_SetConfig+0x10c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <TIM_OC3_SetConfig+0xbe>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <TIM_OC3_SetConfig+0x110>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00f      	beq.n	80042b2 <TIM_OC3_SetConfig+0xbe>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <TIM_OC3_SetConfig+0x118>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00b      	beq.n	80042b2 <TIM_OC3_SetConfig+0xbe>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <TIM_OC3_SetConfig+0x11c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d007      	beq.n	80042b2 <TIM_OC3_SetConfig+0xbe>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <TIM_OC3_SetConfig+0x120>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d003      	beq.n	80042b2 <TIM_OC3_SetConfig+0xbe>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a16      	ldr	r2, [pc, #88]	; (8004308 <TIM_OC3_SetConfig+0x114>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d113      	bne.n	80042da <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	621a      	str	r2, [r3, #32]
}
 80042f4:	bf00      	nop
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40013400 	.word	0x40013400
 8004308:	40015000 	.word	0x40015000
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800

08004318 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004366:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	031b      	lsls	r3, r3, #12
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <TIM_OC4_SetConfig+0x110>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <TIM_OC4_SetConfig+0x74>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a2b      	ldr	r2, [pc, #172]	; (800442c <TIM_OC4_SetConfig+0x114>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_OC4_SetConfig+0x74>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a2a      	ldr	r2, [pc, #168]	; (8004430 <TIM_OC4_SetConfig+0x118>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10d      	bne.n	80043a8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	031b      	lsls	r3, r3, #12
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <TIM_OC4_SetConfig+0x110>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d013      	beq.n	80043d8 <TIM_OC4_SetConfig+0xc0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a1e      	ldr	r2, [pc, #120]	; (800442c <TIM_OC4_SetConfig+0x114>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00f      	beq.n	80043d8 <TIM_OC4_SetConfig+0xc0>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <TIM_OC4_SetConfig+0x11c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00b      	beq.n	80043d8 <TIM_OC4_SetConfig+0xc0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <TIM_OC4_SetConfig+0x120>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <TIM_OC4_SetConfig+0xc0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1c      	ldr	r2, [pc, #112]	; (800443c <TIM_OC4_SetConfig+0x124>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_OC4_SetConfig+0xc0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a17      	ldr	r2, [pc, #92]	; (8004430 <TIM_OC4_SetConfig+0x118>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d113      	bne.n	8004400 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	019b      	lsls	r3, r3, #6
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40013400 	.word	0x40013400
 8004430:	40015000 	.word	0x40015000
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800

08004440 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004484:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a19      	ldr	r2, [pc, #100]	; (80044fc <TIM_OC5_SetConfig+0xbc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d013      	beq.n	80044c2 <TIM_OC5_SetConfig+0x82>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a18      	ldr	r2, [pc, #96]	; (8004500 <TIM_OC5_SetConfig+0xc0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00f      	beq.n	80044c2 <TIM_OC5_SetConfig+0x82>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a17      	ldr	r2, [pc, #92]	; (8004504 <TIM_OC5_SetConfig+0xc4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <TIM_OC5_SetConfig+0x82>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a16      	ldr	r2, [pc, #88]	; (8004508 <TIM_OC5_SetConfig+0xc8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d007      	beq.n	80044c2 <TIM_OC5_SetConfig+0x82>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a15      	ldr	r2, [pc, #84]	; (800450c <TIM_OC5_SetConfig+0xcc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_OC5_SetConfig+0x82>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <TIM_OC5_SetConfig+0xd0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d109      	bne.n	80044d6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40012c00 	.word	0x40012c00
 8004500:	40013400 	.word	0x40013400
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800
 8004510:	40015000 	.word	0x40015000

08004514 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800455a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	051b      	lsls	r3, r3, #20
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <TIM_OC6_SetConfig+0xc0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <TIM_OC6_SetConfig+0x84>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a19      	ldr	r2, [pc, #100]	; (80045d8 <TIM_OC6_SetConfig+0xc4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00f      	beq.n	8004598 <TIM_OC6_SetConfig+0x84>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a18      	ldr	r2, [pc, #96]	; (80045dc <TIM_OC6_SetConfig+0xc8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_OC6_SetConfig+0x84>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <TIM_OC6_SetConfig+0xcc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d007      	beq.n	8004598 <TIM_OC6_SetConfig+0x84>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a16      	ldr	r2, [pc, #88]	; (80045e4 <TIM_OC6_SetConfig+0xd0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_OC6_SetConfig+0x84>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <TIM_OC6_SetConfig+0xd4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d109      	bne.n	80045ac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	029b      	lsls	r3, r3, #10
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	40013400 	.word	0x40013400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800
 80045e8:	40015000 	.word	0x40015000

080045ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 030a 	bic.w	r3, r3, #10
 8004628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f023 0210 	bic.w	r2, r3, #16
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	031b      	lsls	r3, r3, #12
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004686:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f043 0307 	orr.w	r3, r3, #7
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	431a      	orrs	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 031f 	and.w	r3, r3, #31
 8004736:	2201      	movs	r2, #1
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1a      	ldr	r2, [r3, #32]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	43db      	mvns	r3, r3
 8004746:	401a      	ands	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1a      	ldr	r2, [r3, #32]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	fa01 f303 	lsl.w	r3, r1, r3
 800475c:	431a      	orrs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004784:	2302      	movs	r3, #2
 8004786:	e074      	b.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a34      	ldr	r2, [pc, #208]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d009      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a33      	ldr	r2, [pc, #204]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a31      	ldr	r2, [pc, #196]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d108      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a21      	ldr	r2, [pc, #132]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d01d      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1f      	ldr	r2, [pc, #124]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a11      	ldr	r2, [pc, #68]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d10c      	bne.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4313      	orrs	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40015000 	.word	0x40015000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40014000 	.word	0x40014000

0800489c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e078      	b.n	80049aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	041b      	lsls	r3, r3, #16
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d009      	beq.n	800495e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d11c      	bne.n	8004998 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	051b      	lsls	r3, r3, #20
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40013400 	.word	0x40013400
 80049c0:	40015000 	.word	0x40015000

080049c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e042      	b.n	8004ae8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d106      	bne.n	8004a7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc fd5f 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2224      	movs	r2, #36	; 0x24
 8004a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 0201 	bic.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fb24 	bl	80050e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f825 	bl	8004af0 <UART_SetConfig>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e01b      	b.n	8004ae8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fba3 	bl	800522c <UART_CheckIdleState>
 8004ae6:	4603      	mov	r3, r0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af4:	b08c      	sub	sp, #48	; 0x30
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4baa      	ldr	r3, [pc, #680]	; (8004dc8 <UART_SetConfig+0x2d8>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	6812      	ldr	r2, [r2, #0]
 8004b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a9f      	ldr	r2, [pc, #636]	; (8004dcc <UART_SetConfig+0x2dc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	f023 010f 	bic.w	r1, r3, #15
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a90      	ldr	r2, [pc, #576]	; (8004dd0 <UART_SetConfig+0x2e0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d125      	bne.n	8004be0 <UART_SetConfig+0xf0>
 8004b94:	4b8f      	ldr	r3, [pc, #572]	; (8004dd4 <UART_SetConfig+0x2e4>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d81a      	bhi.n	8004bd8 <UART_SetConfig+0xe8>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0xb8>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bd1 	.word	0x08004bd1
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bbe:	e116      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	e112      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bce:	e10e      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	e10a      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bde:	e106      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a7c      	ldr	r2, [pc, #496]	; (8004dd8 <UART_SetConfig+0x2e8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d138      	bne.n	8004c5c <UART_SetConfig+0x16c>
 8004bea:	4b7a      	ldr	r3, [pc, #488]	; (8004dd4 <UART_SetConfig+0x2e4>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	f003 030c 	and.w	r3, r3, #12
 8004bf4:	2b0c      	cmp	r3, #12
 8004bf6:	d82d      	bhi.n	8004c54 <UART_SetConfig+0x164>
 8004bf8:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <UART_SetConfig+0x110>)
 8004bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfe:	bf00      	nop
 8004c00:	08004c35 	.word	0x08004c35
 8004c04:	08004c55 	.word	0x08004c55
 8004c08:	08004c55 	.word	0x08004c55
 8004c0c:	08004c55 	.word	0x08004c55
 8004c10:	08004c45 	.word	0x08004c45
 8004c14:	08004c55 	.word	0x08004c55
 8004c18:	08004c55 	.word	0x08004c55
 8004c1c:	08004c55 	.word	0x08004c55
 8004c20:	08004c3d 	.word	0x08004c3d
 8004c24:	08004c55 	.word	0x08004c55
 8004c28:	08004c55 	.word	0x08004c55
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	08004c4d 	.word	0x08004c4d
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3a:	e0d8      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c42:	e0d4      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4a:	e0d0      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c52:	e0cc      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c5a:	e0c8      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a5e      	ldr	r2, [pc, #376]	; (8004ddc <UART_SetConfig+0x2ec>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d125      	bne.n	8004cb2 <UART_SetConfig+0x1c2>
 8004c66:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <UART_SetConfig+0x2e4>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c70:	2b30      	cmp	r3, #48	; 0x30
 8004c72:	d016      	beq.n	8004ca2 <UART_SetConfig+0x1b2>
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d818      	bhi.n	8004caa <UART_SetConfig+0x1ba>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d00a      	beq.n	8004c92 <UART_SetConfig+0x1a2>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d814      	bhi.n	8004caa <UART_SetConfig+0x1ba>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <UART_SetConfig+0x19a>
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d008      	beq.n	8004c9a <UART_SetConfig+0x1aa>
 8004c88:	e00f      	b.n	8004caa <UART_SetConfig+0x1ba>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c90:	e0ad      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004c92:	2302      	movs	r3, #2
 8004c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c98:	e0a9      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca0:	e0a5      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca8:	e0a1      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004caa:	2310      	movs	r3, #16
 8004cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cb0:	e09d      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a4a      	ldr	r2, [pc, #296]	; (8004de0 <UART_SetConfig+0x2f0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d125      	bne.n	8004d08 <UART_SetConfig+0x218>
 8004cbc:	4b45      	ldr	r3, [pc, #276]	; (8004dd4 <UART_SetConfig+0x2e4>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc8:	d016      	beq.n	8004cf8 <UART_SetConfig+0x208>
 8004cca:	2bc0      	cmp	r3, #192	; 0xc0
 8004ccc:	d818      	bhi.n	8004d00 <UART_SetConfig+0x210>
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d00a      	beq.n	8004ce8 <UART_SetConfig+0x1f8>
 8004cd2:	2b80      	cmp	r3, #128	; 0x80
 8004cd4:	d814      	bhi.n	8004d00 <UART_SetConfig+0x210>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <UART_SetConfig+0x1f0>
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d008      	beq.n	8004cf0 <UART_SetConfig+0x200>
 8004cde:	e00f      	b.n	8004d00 <UART_SetConfig+0x210>
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce6:	e082      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cee:	e07e      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf6:	e07a      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	e076      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d06:	e072      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a35      	ldr	r2, [pc, #212]	; (8004de4 <UART_SetConfig+0x2f4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d12a      	bne.n	8004d68 <UART_SetConfig+0x278>
 8004d12:	4b30      	ldr	r3, [pc, #192]	; (8004dd4 <UART_SetConfig+0x2e4>)
 8004d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d20:	d01a      	beq.n	8004d58 <UART_SetConfig+0x268>
 8004d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d26:	d81b      	bhi.n	8004d60 <UART_SetConfig+0x270>
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2c:	d00c      	beq.n	8004d48 <UART_SetConfig+0x258>
 8004d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d32:	d815      	bhi.n	8004d60 <UART_SetConfig+0x270>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <UART_SetConfig+0x250>
 8004d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3c:	d008      	beq.n	8004d50 <UART_SetConfig+0x260>
 8004d3e:	e00f      	b.n	8004d60 <UART_SetConfig+0x270>
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d46:	e052      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4e:	e04e      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004d50:	2304      	movs	r3, #4
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d56:	e04a      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5e:	e046      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d66:	e042      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <UART_SetConfig+0x2dc>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d13a      	bne.n	8004de8 <UART_SetConfig+0x2f8>
 8004d72:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <UART_SetConfig+0x2e4>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d80:	d01a      	beq.n	8004db8 <UART_SetConfig+0x2c8>
 8004d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d86:	d81b      	bhi.n	8004dc0 <UART_SetConfig+0x2d0>
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8c:	d00c      	beq.n	8004da8 <UART_SetConfig+0x2b8>
 8004d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d92:	d815      	bhi.n	8004dc0 <UART_SetConfig+0x2d0>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <UART_SetConfig+0x2b0>
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9c:	d008      	beq.n	8004db0 <UART_SetConfig+0x2c0>
 8004d9e:	e00f      	b.n	8004dc0 <UART_SetConfig+0x2d0>
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e022      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004da8:	2302      	movs	r3, #2
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e01e      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004db0:	2304      	movs	r3, #4
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db6:	e01a      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004db8:	2308      	movs	r3, #8
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dbe:	e016      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dc6:	e012      	b.n	8004dee <UART_SetConfig+0x2fe>
 8004dc8:	cfff69f3 	.word	0xcfff69f3
 8004dcc:	40008000 	.word	0x40008000
 8004dd0:	40013800 	.word	0x40013800
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40004400 	.word	0x40004400
 8004ddc:	40004800 	.word	0x40004800
 8004de0:	40004c00 	.word	0x40004c00
 8004de4:	40005000 	.word	0x40005000
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4aae      	ldr	r2, [pc, #696]	; (80050ac <UART_SetConfig+0x5bc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	f040 8097 	bne.w	8004f28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d823      	bhi.n	8004e4a <UART_SetConfig+0x35a>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x318>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e3b 	.word	0x08004e3b
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e4b 	.word	0x08004e4b
 8004e24:	08004e4b 	.word	0x08004e4b
 8004e28:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fd fdb6 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e32:	e010      	b.n	8004e56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b9e      	ldr	r3, [pc, #632]	; (80050b0 <UART_SetConfig+0x5c0>)
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e38:	e00d      	b.n	8004e56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fd fd41 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8004e3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e40:	e009      	b.n	8004e56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e48:	e005      	b.n	8004e56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8130 	beq.w	80050be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	4a94      	ldr	r2, [pc, #592]	; (80050b4 <UART_SetConfig+0x5c4>)
 8004e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	4413      	add	r3, r2
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d305      	bcc.n	8004e8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d903      	bls.n	8004e96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e94:	e113      	b.n	80050be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	2200      	movs	r2, #0
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	60fa      	str	r2, [r7, #12]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	4a84      	ldr	r2, [pc, #528]	; (80050b4 <UART_SetConfig+0x5c4>)
 8004ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2200      	movs	r2, #0
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eb8:	f7fb fdcc 	bl	8000a54 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	f04f 0200 	mov.w	r2, #0
 8004ec8:	f04f 0300 	mov.w	r3, #0
 8004ecc:	020b      	lsls	r3, r1, #8
 8004ece:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ed2:	0202      	lsls	r2, r0, #8
 8004ed4:	6979      	ldr	r1, [r7, #20]
 8004ed6:	6849      	ldr	r1, [r1, #4]
 8004ed8:	0849      	lsrs	r1, r1, #1
 8004eda:	2000      	movs	r0, #0
 8004edc:	460c      	mov	r4, r1
 8004ede:	4605      	mov	r5, r0
 8004ee0:	eb12 0804 	adds.w	r8, r2, r4
 8004ee4:	eb43 0905 	adc.w	r9, r3, r5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	469a      	mov	sl, r3
 8004ef0:	4693      	mov	fp, r2
 8004ef2:	4652      	mov	r2, sl
 8004ef4:	465b      	mov	r3, fp
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	4649      	mov	r1, r9
 8004efa:	f7fb fdab 	bl	8000a54 <__aeabi_uldivmod>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4613      	mov	r3, r2
 8004f04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f0c:	d308      	bcc.n	8004f20 <UART_SetConfig+0x430>
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f14:	d204      	bcs.n	8004f20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	e0ce      	b.n	80050be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f26:	e0ca      	b.n	80050be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f30:	d166      	bne.n	8005000 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d827      	bhi.n	8004f8a <UART_SetConfig+0x49a>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x450>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f6d 	.word	0x08004f6d
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f8b 	.word	0x08004f8b
 8004f50:	08004f7b 	.word	0x08004f7b
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b
 8004f5c:	08004f8b 	.word	0x08004f8b
 8004f60:	08004f83 	.word	0x08004f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fd fd1a 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f6a:	e014      	b.n	8004f96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fd fd2c 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f72:	e010      	b.n	8004f96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f74:	4b4e      	ldr	r3, [pc, #312]	; (80050b0 <UART_SetConfig+0x5c0>)
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f78:	e00d      	b.n	8004f96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fd fca1 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8004f7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f80:	e009      	b.n	8004f96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f88:	e005      	b.n	8004f96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8090 	beq.w	80050be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	4a44      	ldr	r2, [pc, #272]	; (80050b4 <UART_SetConfig+0x5c4>)
 8004fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fb0:	005a      	lsls	r2, r3, #1
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	441a      	add	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	2b0f      	cmp	r3, #15
 8004fc8:	d916      	bls.n	8004ff8 <UART_SetConfig+0x508>
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d212      	bcs.n	8004ff8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f023 030f 	bic.w	r3, r3, #15
 8004fda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	8bfb      	ldrh	r3, [r7, #30]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	8bfa      	ldrh	r2, [r7, #30]
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	e062      	b.n	80050be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ffe:	e05e      	b.n	80050be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005004:	2b08      	cmp	r3, #8
 8005006:	d828      	bhi.n	800505a <UART_SetConfig+0x56a>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0x520>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005035 	.word	0x08005035
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005045 	.word	0x08005045
 800501c:	0800505b 	.word	0x0800505b
 8005020:	0800504b 	.word	0x0800504b
 8005024:	0800505b 	.word	0x0800505b
 8005028:	0800505b 	.word	0x0800505b
 800502c:	0800505b 	.word	0x0800505b
 8005030:	08005053 	.word	0x08005053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005034:	f7fd fcb2 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8005038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800503a:	e014      	b.n	8005066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7fd fcc4 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 8005040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005042:	e010      	b.n	8005066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <UART_SetConfig+0x5c0>)
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005048:	e00d      	b.n	8005066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800504a:	f7fd fc39 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 800504e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005050:	e009      	b.n	8005066 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005058:	e005      	b.n	8005066 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005064:	bf00      	nop
    }

    if (pclk != 0U)
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d028      	beq.n	80050be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <UART_SetConfig+0x5c4>)
 8005072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005076:	461a      	mov	r2, r3
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	fbb3 f2f2 	udiv	r2, r3, r2
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	441a      	add	r2, r3
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	fbb2 f3f3 	udiv	r3, r2, r3
 800508e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	2b0f      	cmp	r3, #15
 8005094:	d910      	bls.n	80050b8 <UART_SetConfig+0x5c8>
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509c:	d20c      	bcs.n	80050b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	e009      	b.n	80050be <UART_SetConfig+0x5ce>
 80050aa:	bf00      	nop
 80050ac:	40008000 	.word	0x40008000
 80050b0:	00f42400 	.word	0x00f42400
 80050b4:	080057b4 	.word	0x080057b4
      }
      else
      {
        ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2200      	movs	r2, #0
 80050d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80050da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3730      	adds	r7, #48	; 0x30
 80050e2:	46bd      	mov	sp, r7
 80050e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01a      	beq.n	80051fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e6:	d10a      	bne.n	80051fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b098      	sub	sp, #96	; 0x60
 8005230:	af02      	add	r7, sp, #8
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800523c:	f7fc fb64 	bl	8001908 <HAL_GetTick>
 8005240:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d12f      	bne.n	80052b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005258:	2200      	movs	r2, #0
 800525a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f88e 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d022      	beq.n	80052b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	e853 3f00 	ldrex	r3, [r3]
 8005276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527e:	653b      	str	r3, [r7, #80]	; 0x50
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005288:	647b      	str	r3, [r7, #68]	; 0x44
 800528a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800528e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e6      	bne.n	800526a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e063      	b.n	8005378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d149      	bne.n	8005352 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c6:	2200      	movs	r2, #0
 80052c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f857 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d03c      	beq.n	8005352 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	623b      	str	r3, [r7, #32]
   return(result);
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
 80052f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e6      	bne.n	80052d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	60fb      	str	r3, [r7, #12]
   return(result);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532a:	61fa      	str	r2, [r7, #28]
 800532c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	69b9      	ldr	r1, [r7, #24]
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	617b      	str	r3, [r7, #20]
   return(result);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e012      	b.n	8005378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3758      	adds	r7, #88	; 0x58
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005390:	e04f      	b.n	8005432 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d04b      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539a:	f7fc fab5 	bl	8001908 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e04e      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d037      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d034      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0xb2>
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d031      	beq.n	8005432 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d110      	bne.n	80053fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2208      	movs	r2, #8
 80053e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f838 	bl	800545a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2208      	movs	r2, #8
 80053ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e029      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800540c:	d111      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f81e 	bl	800545a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e00f      	b.n	8005452 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	429a      	cmp	r2, r3
 800544e:	d0a0      	beq.n	8005392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800545a:	b480      	push	{r7}
 800545c:	b095      	sub	sp, #84	; 0x54
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	643b      	str	r3, [r7, #64]	; 0x40
 8005482:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005488:	e841 2300 	strex	r3, r2, [r1]
 800548c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e6      	bne.n	8005462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054aa:	f023 0301 	bic.w	r3, r3, #1
 80054ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3308      	adds	r3, #8
 80054b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e3      	bne.n	8005494 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d118      	bne.n	8005506 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 0310 	bic.w	r3, r3, #16
 80054e8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6979      	ldr	r1, [r7, #20]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e6      	bne.n	80054d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	675a      	str	r2, [r3, #116]	; 0x74
}
 800551a:	bf00      	nop
 800551c:	3754      	adds	r7, #84	; 0x54
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_UARTEx_DisableFifoMode+0x16>
 8005538:	2302      	movs	r3, #2
 800553a:	e027      	b.n	800558c <HAL_UARTEx_DisableFifoMode+0x66>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	; 0x24
 8005548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800556a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e02d      	b.n	800560c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	; 0x24
 80055bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f84f 	bl	8005690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005628:	2302      	movs	r3, #2
 800562a:	e02d      	b.n	8005688 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2224      	movs	r2, #36	; 0x24
 8005638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f811 	bl	8005690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800569c:	2b00      	cmp	r3, #0
 800569e:	d108      	bne.n	80056b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056b0:	e031      	b.n	8005716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056b2:	2308      	movs	r3, #8
 80056b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056b6:	2308      	movs	r3, #8
 80056b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	0e5b      	lsrs	r3, r3, #25
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	0f5b      	lsrs	r3, r3, #29
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056da:	7bbb      	ldrb	r3, [r7, #14]
 80056dc:	7b3a      	ldrb	r2, [r7, #12]
 80056de:	4911      	ldr	r1, [pc, #68]	; (8005724 <UARTEx_SetNbDataToProcess+0x94>)
 80056e0:	5c8a      	ldrb	r2, [r1, r2]
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056e6:	7b3a      	ldrb	r2, [r7, #12]
 80056e8:	490f      	ldr	r1, [pc, #60]	; (8005728 <UARTEx_SetNbDataToProcess+0x98>)
 80056ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	7b7a      	ldrb	r2, [r7, #13]
 80056fc:	4909      	ldr	r1, [pc, #36]	; (8005724 <UARTEx_SetNbDataToProcess+0x94>)
 80056fe:	5c8a      	ldrb	r2, [r1, r2]
 8005700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005704:	7b7a      	ldrb	r2, [r7, #13]
 8005706:	4908      	ldr	r1, [pc, #32]	; (8005728 <UARTEx_SetNbDataToProcess+0x98>)
 8005708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800570a:	fb93 f3f2 	sdiv	r3, r3, r2
 800570e:	b29a      	uxth	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	080057cc 	.word	0x080057cc
 8005728:	080057d4 	.word	0x080057d4

0800572c <memset>:
 800572c:	4402      	add	r2, r0
 800572e:	4603      	mov	r3, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <__libc_init_array>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4d0d      	ldr	r5, [pc, #52]	; (8005774 <__libc_init_array+0x38>)
 8005740:	4c0d      	ldr	r4, [pc, #52]	; (8005778 <__libc_init_array+0x3c>)
 8005742:	1b64      	subs	r4, r4, r5
 8005744:	10a4      	asrs	r4, r4, #2
 8005746:	2600      	movs	r6, #0
 8005748:	42a6      	cmp	r6, r4
 800574a:	d109      	bne.n	8005760 <__libc_init_array+0x24>
 800574c:	4d0b      	ldr	r5, [pc, #44]	; (800577c <__libc_init_array+0x40>)
 800574e:	4c0c      	ldr	r4, [pc, #48]	; (8005780 <__libc_init_array+0x44>)
 8005750:	f000 f818 	bl	8005784 <_init>
 8005754:	1b64      	subs	r4, r4, r5
 8005756:	10a4      	asrs	r4, r4, #2
 8005758:	2600      	movs	r6, #0
 800575a:	42a6      	cmp	r6, r4
 800575c:	d105      	bne.n	800576a <__libc_init_array+0x2e>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f855 3b04 	ldr.w	r3, [r5], #4
 8005764:	4798      	blx	r3
 8005766:	3601      	adds	r6, #1
 8005768:	e7ee      	b.n	8005748 <__libc_init_array+0xc>
 800576a:	f855 3b04 	ldr.w	r3, [r5], #4
 800576e:	4798      	blx	r3
 8005770:	3601      	adds	r6, #1
 8005772:	e7f2      	b.n	800575a <__libc_init_array+0x1e>
 8005774:	080057e4 	.word	0x080057e4
 8005778:	080057e4 	.word	0x080057e4
 800577c:	080057e4 	.word	0x080057e4
 8005780:	080057e8 	.word	0x080057e8

08005784 <_init>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr

08005790 <_fini>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr
