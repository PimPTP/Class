
Cl8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045bc  080045bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c4  080045c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000000c  080045d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080045d8  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013af8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002460  00000000  00000000  00033b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00035fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cf9  00000000  00000000  00037060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025846  00000000  00000000  00037d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013378  00000000  00000000  0005d59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f88ce  00000000  00000000  00070917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000467c  00000000  00000000  001691e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0016d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004564 	.word	0x08004564

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004564 	.word	0x08004564

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb27 	bl	8000b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f809 	bl	8000532 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f902 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f8ce 	bl	80006c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f87e 	bl	8000628 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800052c:	f000 f84c 	bl	80005c8 <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x1c>

08000532 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b094      	sub	sp, #80	; 0x50
 8000536:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	2238      	movs	r2, #56	; 0x38
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f003 ffe3 	bl	800450c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000554:	2000      	movs	r0, #0
 8000556:	f001 f8c1 	bl	80016dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2340      	movs	r3, #64	; 0x40
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2302      	movs	r3, #2
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000570:	2304      	movs	r3, #4
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000574:	2355      	movs	r3, #85	; 0x55
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0318 	add.w	r3, r7, #24
 8000588:	4618      	mov	r0, r3
 800058a:	f001 f95b 	bl	8001844 <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000594:	f000 f948 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	230f      	movs	r3, #15
 800059a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	2303      	movs	r3, #3
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2104      	movs	r1, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fc59 	bl	8001e68 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005bc:	f000 f934 	bl	8000828 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	; 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005cc:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_TIM16_Init+0x58>)
 80005ce:	4a15      	ldr	r2, [pc, #84]	; (8000624 <MX_TIM16_Init+0x5c>)
 80005d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_TIM16_Init+0x58>)
 80005d4:	22a9      	movs	r2, #169	; 0xa9
 80005d6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_TIM16_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_TIM16_Init+0x58>)
 80005e0:	f240 4279 	movw	r2, #1145	; 0x479
 80005e4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_TIM16_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_TIM16_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <MX_TIM16_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005f8:	4809      	ldr	r0, [pc, #36]	; (8000620 <MX_TIM16_Init+0x58>)
 80005fa:	f002 f89f 	bl	800273c <HAL_TIM_Base_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000604:	f000 f910 	bl	8000828 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000608:	2108      	movs	r1, #8
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_TIM16_Init+0x58>)
 800060c:	f002 f8fa 	bl	8002804 <HAL_TIM_OnePulse_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000616:	f000 f907 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000028 	.word	0x20000028
 8000624:	40014400 	.word	0x40014400

08000628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <MX_USART2_UART_Init+0x98>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000634:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800063c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000640:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800064a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b17      	ldr	r3, [pc, #92]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000676:	f002 fc85 	bl	8002f84 <HAL_UART_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 f8d2 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_USART2_UART_Init+0x94>)
 8000688:	f003 fe75 	bl	8004376 <HAL_UARTEx_SetTxFifoThreshold>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 f8c9 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <MX_USART2_UART_Init+0x94>)
 800069a:	f003 feaa 	bl	80043f2 <HAL_UARTEx_SetRxFifoThreshold>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80006a4:	f000 f8c0 	bl	8000828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_USART2_UART_Init+0x94>)
 80006aa:	f003 fe2b 	bl	8004304 <HAL_UARTEx_DisableFifoMode>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80006b4:	f000 f8b8 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000f4 	.word	0x200000f4
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_DMA_Init+0x60>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <MX_DMA_Init+0x60>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6493      	str	r3, [r2, #72]	; 0x48
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_DMA_Init+0x60>)
 80006d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_DMA_Init+0x60>)
 80006e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <MX_DMA_Init+0x60>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6493      	str	r3, [r2, #72]	; 0x48
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_DMA_Init+0x60>)
 80006f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	200b      	movs	r0, #11
 8000700:	f000 fb7f 	bl	8000e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000704:	200b      	movs	r0, #11
 8000706:	f000 fb96 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	200c      	movs	r0, #12
 8000710:	f000 fb77 	bl	8000e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000714:	200c      	movs	r0, #12
 8000716:	f000 fb8e 	bl	8000e36 <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b38      	ldr	r3, [pc, #224]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a37      	ldr	r2, [pc, #220]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <MX_GPIO_Init+0xf8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a31      	ldr	r2, [pc, #196]	; (8000820 <MX_GPIO_Init+0xf8>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a2b      	ldr	r2, [pc, #172]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b29      	ldr	r3, [pc, #164]	; (8000820 <MX_GPIO_Init+0xf8>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a25      	ldr	r2, [pc, #148]	; (8000820 <MX_GPIO_Init+0xf8>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <MX_GPIO_Init+0xf8>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2120      	movs	r1, #32
 80007a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a6:	f000 ff5d 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4818      	ldr	r0, [pc, #96]	; (8000824 <MX_GPIO_Init+0xfc>)
 80007c2:	f000 fdcd 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 80007c6:	2308      	movs	r3, #8
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80007d6:	230c      	movs	r3, #12
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 fdbc 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e8:	2320      	movs	r3, #32
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000802:	f000 fdad 	bl	8001360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2028      	movs	r0, #40	; 0x28
 800080c:	f000 faf9 	bl	8000e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000810:	2028      	movs	r0, #40	; 0x28
 8000812:	f000 fb10 	bl	8000e36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	; 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000
 8000824:	48000800 	.word	0x48000800

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x44>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6613      	str	r3, [r2, #96]	; 0x60
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x44>)
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <HAL_MspInit+0x44>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	6593      	str	r3, [r2, #88]	; 0x58
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_MspInit+0x44>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800086a:	f000 ffdb 	bl	8001824 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <HAL_TIM_Base_MspInit+0x44>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d113      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_TIM_Base_MspInit+0x48>)
 8000890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000892:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <HAL_TIM_Base_MspInit+0x48>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6613      	str	r3, [r2, #96]	; 0x60
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_TIM_Base_MspInit+0x48>)
 800089c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2019      	movs	r0, #25
 80008ac:	f000 faa9 	bl	8000e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008b0:	2019      	movs	r0, #25
 80008b2:	f000 fac0 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40014400 	.word	0x40014400
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09e      	sub	sp, #120	; 0x78
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	2254      	movs	r2, #84	; 0x54
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 fe0f 	bl	800450c <memset>
  if(huart->Instance==USART2)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a4d      	ldr	r2, [pc, #308]	; (8000a28 <HAL_UART_MspInit+0x160>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	f040 8093 	bne.w	8000a20 <HAL_UART_MspInit+0x158>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fcca 	bl	80022a0 <HAL_RCCEx_PeriphCLKConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000912:	f7ff ff89 	bl	8000828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000916:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <HAL_UART_MspInit+0x164>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	4a44      	ldr	r2, [pc, #272]	; (8000a2c <HAL_UART_MspInit+0x164>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6593      	str	r3, [r2, #88]	; 0x58
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <HAL_UART_MspInit+0x164>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <HAL_UART_MspInit+0x164>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a3e      	ldr	r2, [pc, #248]	; (8000a2c <HAL_UART_MspInit+0x164>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <HAL_UART_MspInit+0x164>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000946:	f248 0304 	movw	r3, #32772	; 0x8004
 800094a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094c:	2302      	movs	r3, #2
 800094e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000958:	2307      	movs	r3, #7
 800095a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 fcfb 	bl	8001360 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800096a:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <HAL_UART_MspInit+0x168>)
 800096c:	4a31      	ldr	r2, [pc, #196]	; (8000a34 <HAL_UART_MspInit+0x16c>)
 800096e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <HAL_UART_MspInit+0x168>)
 8000972:	221b      	movs	r2, #27
 8000974:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <HAL_UART_MspInit+0x168>)
 8000978:	2210      	movs	r2, #16
 800097a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <HAL_UART_MspInit+0x168>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_UART_MspInit+0x168>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <HAL_UART_MspInit+0x168>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <HAL_UART_MspInit+0x168>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <HAL_UART_MspInit+0x168>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <HAL_UART_MspInit+0x168>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009a0:	4823      	ldr	r0, [pc, #140]	; (8000a30 <HAL_UART_MspInit+0x168>)
 80009a2:	f000 fa63 	bl	8000e6c <HAL_DMA_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80009ac:	f7ff ff3c 	bl	8000828 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <HAL_UART_MspInit+0x168>)
 80009b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80009b6:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <HAL_UART_MspInit+0x168>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <HAL_UART_MspInit+0x174>)
 80009c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009c4:	221a      	movs	r2, #26
 80009c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80009f2:	4811      	ldr	r0, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0x170>)
 80009f4:	f000 fa3a 	bl	8000e6c <HAL_DMA_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80009fe:	f7ff ff13 	bl	8000828 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <HAL_UART_MspInit+0x170>)
 8000a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <HAL_UART_MspInit+0x170>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2026      	movs	r0, #38	; 0x26
 8000a16:	f000 f9f4 	bl	8000e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a1a:	2026      	movs	r0, #38	; 0x26
 8000a1c:	f000 fa0b 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3778      	adds	r7, #120	; 0x78
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	200001c0 	.word	0x200001c0
 8000a34:	40020008 	.word	0x40020008
 8000a38:	20000220 	.word	0x20000220
 8000a3c:	4002001c 	.word	0x4002001c

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f8c0 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <DMA1_Channel1_IRQHandler+0x10>)
 8000a9a:	f000 fb4f 	bl	800113c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001c0 	.word	0x200001c0

08000aa8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <DMA1_Channel2_IRQHandler+0x10>)
 8000aae:	f000 fb45 	bl	800113c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000220 	.word	0x20000220

08000abc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ac2:	f001 ff07 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000028 	.word	0x20000028

08000ad0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <USART2_IRQHandler+0x10>)
 8000ad6:	f002 fab5 	bl	8003044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000f4 	.word	0x200000f4

08000ae4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ae8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000aec:	f000 fdd2 	bl	8001694 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff ffea 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f003 fce9 	bl	800451c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b4a:	f7ff fce3 	bl	8000514 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   r0, =_estack
 8000b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b5c:	080045cc 	.word	0x080045cc
  ldr r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b64:	20000284 	.word	0x20000284

08000b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC1_2_IRQHandler>

08000b6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f939 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f80e 	bl	8000b9c <HAL_InitTick>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e001      	b.n	8000b90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b8c:	f7ff fe52 	bl	8000834 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b90:	79fb      	ldrb	r3, [r7, #7]

}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_InitTick+0x68>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d022      	beq.n	8000bf6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_InitTick+0x6c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_InitTick+0x68>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f944 	bl	8000e52 <HAL_SYSTICK_Config>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10f      	bne.n	8000bf0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b0f      	cmp	r3, #15
 8000bd4:	d809      	bhi.n	8000bea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	6879      	ldr	r1, [r7, #4]
 8000bda:	f04f 30ff 	mov.w	r0, #4294967295
 8000bde:	f000 f910 	bl	8000e02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_InitTick+0x70>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	e007      	b.n	8000bfa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e004      	b.n	8000bfa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e001      	b.n	8000bfa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x20>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <HAL_IncTick+0x1c>)
 8000c20:	6013      	str	r3, [r2, #0]
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000280 	.word	0x20000280
 8000c30:	20000008 	.word	0x20000008

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000280 	.word	0x20000280

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <__NVIC_EnableIRQ+0x38>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f7ff ff8e 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff29 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff40 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff90 	bl	8000d40 <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5f 	bl	8000cec <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff33 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffa4 	bl	8000da8 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e08d      	b.n	8000f9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b47      	ldr	r3, [pc, #284]	; (8000fa4 <HAL_DMA_Init+0x138>)
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d80f      	bhi.n	8000eaa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <HAL_DMA_Init+0x13c>)
 8000e92:	4413      	add	r3, r2
 8000e94:	4a45      	ldr	r2, [pc, #276]	; (8000fac <HAL_DMA_Init+0x140>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	009a      	lsls	r2, r3, #2
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a42      	ldr	r2, [pc, #264]	; (8000fb0 <HAL_DMA_Init+0x144>)
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea8:	e00e      	b.n	8000ec8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b40      	ldr	r3, [pc, #256]	; (8000fb4 <HAL_DMA_Init+0x148>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a3d      	ldr	r2, [pc, #244]	; (8000fac <HAL_DMA_Init+0x140>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	009a      	lsls	r2, r3, #2
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a3c      	ldr	r2, [pc, #240]	; (8000fb8 <HAL_DMA_Init+0x14c>)
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ee2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 f9be 	bl	800129c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f28:	d102      	bne.n	8000f30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f44:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d010      	beq.n	8000f70 <HAL_DMA_Init+0x104>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d80c      	bhi.n	8000f70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f9de 	bl	8001318 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	e008      	b.n	8000f82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40020407 	.word	0x40020407
 8000fa8:	bffdfff8 	.word	0xbffdfff8
 8000fac:	cccccccd 	.word	0xcccccccd
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	bffdfbf8 	.word	0xbffdfbf8
 8000fb8:	40020400 	.word	0x40020400

08000fbc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d005      	beq.n	8000fe0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e037      	b.n	8001050 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f022 020e 	bic.w	r2, r2, #14
 8000fee:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ffe:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0201 	bic.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800102c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00c      	beq.n	8001050 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001044:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800104e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001060:	7bfb      	ldrb	r3, [r7, #15]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d00d      	beq.n	80010a2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e047      	b.n	8001132 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 020e 	bic.w	r2, r2, #14
 80010b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 021f 	and.w	r2, r3, #31
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00c      	beq.n	8001112 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001102:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001106:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001110:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	4798      	blx	r3
    }
  }
  return status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	2204      	movs	r2, #4
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d026      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x7a>
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	d021      	beq.n	80011b6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0204 	bic.w	r2, r2, #4
 800118e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2104      	movs	r1, #4
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d071      	beq.n	8001290 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011b4:	e06c      	b.n	8001290 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2202      	movs	r2, #2
 80011c0:	409a      	lsls	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d02e      	beq.n	8001228 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d029      	beq.n	8001228 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10b      	bne.n	80011fa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 020a 	bic.w	r2, r2, #10
 80011f0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f003 021f 	and.w	r2, r3, #31
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2102      	movs	r1, #2
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	2b00      	cmp	r3, #0
 800121c:	d038      	beq.n	8001290 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001226:	e033      	b.n	8001290 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	f003 031f 	and.w	r3, r3, #31
 8001230:	2208      	movs	r2, #8
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02a      	beq.n	8001292 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d025      	beq.n	8001292 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 020e 	bic.w	r2, r2, #14
 8001254:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 021f 	and.w	r2, r3, #31
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	2101      	movs	r1, #1
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001290:	bf00      	nop
 8001292:	bf00      	nop
}
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d802      	bhi.n	80012b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80012b0:	4b15      	ldr	r3, [pc, #84]	; (8001308 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	e001      	b.n	80012ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80012b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	3b08      	subs	r3, #8
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	009a      	lsls	r2, r3, #2
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4413      	add	r3, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80012e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2201      	movs	r2, #1
 80012f0:	409a      	lsls	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012f6:	bf00      	nop
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40020407 	.word	0x40020407
 8001308:	40020800 	.word	0x40020800
 800130c:	40020820 	.word	0x40020820
 8001310:	cccccccd 	.word	0xcccccccd
 8001314:	40020880 	.word	0x40020880

08001318 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800133a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3b01      	subs	r3, #1
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2201      	movs	r2, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	1000823f 	.word	0x1000823f
 800135c:	40020940 	.word	0x40020940

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800136e:	e15a      	b.n	8001626 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	4013      	ands	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 814c 	beq.w	8001620 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d005      	beq.n	80013a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800139c:	2b02      	cmp	r3, #2
 800139e:	d130      	bne.n	8001402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d6:	2201      	movs	r2, #1
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f003 0201 	and.w	r2, r3, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b03      	cmp	r3, #3
 800140c:	d017      	beq.n	800143e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d123      	bne.n	8001492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691a      	ldr	r2, [r3, #16]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	6939      	ldr	r1, [r7, #16]
 800148e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0203 	and.w	r2, r3, #3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 80a6 	beq.w	8001620 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d4:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d8:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6613      	str	r3, [r2, #96]	; 0x60
 80014e0:	4b58      	ldr	r3, [pc, #352]	; (8001644 <HAL_GPIO_Init+0x2e4>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ec:	4a56      	ldr	r2, [pc, #344]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	089b      	lsrs	r3, r3, #2
 80014f2:	3302      	adds	r3, #2
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	220f      	movs	r2, #15
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001516:	d01f      	beq.n	8001558 <HAL_GPIO_Init+0x1f8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a4c      	ldr	r2, [pc, #304]	; (800164c <HAL_GPIO_Init+0x2ec>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d019      	beq.n	8001554 <HAL_GPIO_Init+0x1f4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4b      	ldr	r2, [pc, #300]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1f0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <HAL_GPIO_Init+0x2f4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a49      	ldr	r2, [pc, #292]	; (8001658 <HAL_GPIO_Init+0x2f8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1e8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a48      	ldr	r2, [pc, #288]	; (800165c <HAL_GPIO_Init+0x2fc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1e4>
 8001540:	2305      	movs	r3, #5
 8001542:	e00a      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001544:	2306      	movs	r3, #6
 8001546:	e008      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001548:	2304      	movs	r3, #4
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 800154c:	2303      	movs	r3, #3
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1fa>
 8001558:	2300      	movs	r3, #0
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156a:	4937      	ldr	r1, [pc, #220]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_GPIO_Init+0x300>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800159c:	4a30      	ldr	r2, [pc, #192]	; (8001660 <HAL_GPIO_Init+0x300>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c6:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_GPIO_Init+0x300>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_GPIO_Init+0x300>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	f47f ae9d 	bne.w	8001370 <HAL_GPIO_Init+0x10>
  }
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	48000400 	.word	0x48000400
 8001650:	48000800 	.word	0x48000800
 8001654:	48000c00 	.word	0x48000c00
 8001658:	48001000 	.word	0x48001000
 800165c:	48001400 	.word	0x48001400
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001680:	e002      	b.n	8001688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f806 	bl	80016c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d141      	bne.n	800176e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ea:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f6:	d131      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016f8:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016fe:	4a46      	ldr	r2, [pc, #280]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	4b43      	ldr	r3, [pc, #268]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001710:	4a41      	ldr	r2, [pc, #260]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001716:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001718:	4b40      	ldr	r3, [pc, #256]	; (800181c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2232      	movs	r2, #50	; 0x32
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a3f      	ldr	r2, [pc, #252]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3301      	adds	r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800172e:	e002      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d102      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174a:	4b33      	ldr	r3, [pc, #204]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d158      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e057      	b.n	800180c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800176c:	e04d      	b.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001774:	d141      	bne.n	80017fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001782:	d131      	bne.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800178a:	4a23      	ldr	r2, [pc, #140]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001794:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800179c:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2232      	movs	r2, #50	; 0x32
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9b      	lsrs	r3, r3, #18
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ba:	e002      	b.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3b01      	subs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d102      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f2      	bne.n	80017bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e2:	d112      	bne.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e011      	b.n	800180c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017f8:	e007      	b.n	800180a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001808:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40007000 	.word	0x40007000
 800181c:	20000000 	.word	0x20000000
 8001820:	431bde83 	.word	0x431bde83

08001824 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800182e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001832:	6093      	str	r3, [r2, #8]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40007000 	.word	0x40007000

08001844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e2fe      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d075      	beq.n	800194e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001862:	4b97      	ldr	r3, [pc, #604]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800186c:	4b94      	ldr	r3, [pc, #592]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b0c      	cmp	r3, #12
 800187a:	d102      	bne.n	8001882 <HAL_RCC_OscConfig+0x3e>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d002      	beq.n	8001888 <HAL_RCC_OscConfig+0x44>
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b08      	cmp	r3, #8
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	4b8d      	ldr	r3, [pc, #564]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d05b      	beq.n	800194c <HAL_RCC_OscConfig+0x108>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d157      	bne.n	800194c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e2d9      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x74>
 80018aa:	4b85      	ldr	r3, [pc, #532]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a84      	ldr	r2, [pc, #528]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e01d      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x98>
 80018c2:	4b7f      	ldr	r3, [pc, #508]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7e      	ldr	r2, [pc, #504]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a7b      	ldr	r2, [pc, #492]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e00b      	b.n	80018f4 <HAL_RCC_OscConfig+0xb0>
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b75      	ldr	r3, [pc, #468]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a74      	ldr	r2, [pc, #464]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f99a 	bl	8000c34 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f996 	bl	8000c34 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e29e      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0xc0>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f986 	bl	8000c34 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f982 	bl	8000c34 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e28a      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0xe8>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d075      	beq.n	8001a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800195a:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001964:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b0c      	cmp	r3, #12
 8001972:	d102      	bne.n	800197a <HAL_RCC_OscConfig+0x136>
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d002      	beq.n	8001980 <HAL_RCC_OscConfig+0x13c>
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b04      	cmp	r3, #4
 800197e:	d11f      	bne.n	80019c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001980:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x154>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e25d      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	4946      	ldr	r1, [pc, #280]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <HAL_RCC_OscConfig+0x280>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f8f3 	bl	8000b9c <HAL_InitTick>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d043      	beq.n	8001a44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e249      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a3c      	ldr	r2, [pc, #240]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f92e 	bl	8000c34 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff f92a 	bl	8000c34 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e232      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ee:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	492d      	ldr	r1, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
 8001a0e:	e01a      	b.n	8001a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a2a      	ldr	r2, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f90a 	bl	8000c34 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff f906 	bl	8000c34 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e20e      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e0>
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d041      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a60:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f8e3 	bl	8000c34 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff f8df 	bl	8000c34 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e1e7      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0ef      	beq.n	8001a72 <HAL_RCC_OscConfig+0x22e>
 8001a92:	e020      	b.n	8001ad6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f8c6 	bl	8000c34 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aaa:	e00d      	b.n	8001ac8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff f8c2 	bl	8000c34 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d906      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1ca      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac8:	4b8c      	ldr	r3, [pc, #560]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ea      	bne.n	8001aac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80a6 	beq.w	8001c30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ae8:	4b84      	ldr	r3, [pc, #528]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2b4>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0x2b6>
 8001af8:	2300      	movs	r3, #0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b7f      	ldr	r3, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	4a7e      	ldr	r2, [pc, #504]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b16:	2301      	movs	r3, #1
 8001b18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1a:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <HAL_RCC_OscConfig+0x4bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d118      	bne.n	8001b58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x4bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x4bc>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f87f 	bl	8000c34 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7ff f87b 	bl	8000c34 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e183      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x4bc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_RCC_OscConfig+0x32e>
 8001b60:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b66:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b70:	e024      	b.n	8001bbc <HAL_RCC_OscConfig+0x378>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d110      	bne.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b7a:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b80:	4a5e      	ldr	r2, [pc, #376]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	4a5a      	ldr	r2, [pc, #360]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9a:	e00f      	b.n	8001bbc <HAL_RCC_OscConfig+0x378>
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	4a56      	ldr	r2, [pc, #344]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb2:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d016      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f836 	bl	8000c34 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f832 	bl	8000c34 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e138      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ed      	beq.n	8001bcc <HAL_RCC_OscConfig+0x388>
 8001bf0:	e015      	b.n	8001c1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f81f 	bl	8000c34 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff f81b 	bl	8000c34 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e121      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c10:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1ed      	bne.n	8001bfa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d105      	bne.n	8001c30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c28:	4a34      	ldr	r2, [pc, #208]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d03c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c4a:	4a2c      	ldr	r2, [pc, #176]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7fe ffee 	bl	8000c34 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5c:	f7fe ffea 	bl	8000c34 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0f2      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ef      	beq.n	8001c5c <HAL_RCC_OscConfig+0x418>
 8001c7c:	e01b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7fe ffd1 	bl	8000c34 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c96:	f7fe ffcd 	bl	8000c34 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0d5      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ef      	bne.n	8001c96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80c9 	beq.w	8001e52 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	f000 8083 	beq.w	8001dd4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d15e      	bne.n	8001d94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_RCC_OscConfig+0x4b8>)
 8001cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7fe ffa7 	bl	8000c34 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	e00c      	b.n	8001d04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7fe ffa3 	bl	8000c34 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d905      	bls.n	8001d04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0ab      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ec      	bne.n	8001cea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d10:	4b52      	ldr	r3, [pc, #328]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <HAL_RCC_OscConfig+0x61c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6a11      	ldr	r1, [r2, #32]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d20:	3a01      	subs	r2, #1
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d2a:	0212      	lsls	r2, r2, #8
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d32:	0852      	lsrs	r2, r2, #1
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0552      	lsls	r2, r2, #21
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d3e:	0852      	lsrs	r2, r2, #1
 8001d40:	3a01      	subs	r2, #1
 8001d42:	0652      	lsls	r2, r2, #25
 8001d44:	4311      	orrs	r1, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d4a:	06d2      	lsls	r2, r2, #27
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	4943      	ldr	r1, [pc, #268]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a40      	ldr	r2, [pc, #256]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a3d      	ldr	r2, [pc, #244]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe ff62 	bl	8000c34 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7fe ff5e 	bl	8000c34 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e066      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	4b35      	ldr	r3, [pc, #212]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x530>
 8001d92:	e05e      	b.n	8001e52 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a30      	ldr	r2, [pc, #192]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7fe ff48 	bl	8000c34 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe ff44 	bl	8000c34 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e04c      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	4924      	ldr	r1, [pc, #144]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_RCC_OscConfig+0x620>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60cb      	str	r3, [r1, #12]
 8001dd2:	e03e      	b.n	8001e52 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e039      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_OscConfig+0x618>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d12c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d123      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d11b      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d113      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	019f800c 	.word	0x019f800c
 8001e64:	feeefffc 	.word	0xfeeefffc

08001e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e11e      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b91      	ldr	r3, [pc, #580]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d910      	bls.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b8e      	ldr	r3, [pc, #568]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 020f 	bic.w	r2, r3, #15
 8001e96:	498c      	ldr	r1, [pc, #560]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b8a      	ldr	r3, [pc, #552]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e106      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d073      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d129      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec4:	4b81      	ldr	r3, [pc, #516]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0f4      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001ed4:	f000 f99e 	bl	8002214 <RCC_GetSysClockFreqFromPLLSource>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4a7c      	ldr	r2, [pc, #496]	; (80020d0 <HAL_RCC_ClockConfig+0x268>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d93f      	bls.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ee2:	4b7a      	ldr	r3, [pc, #488]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d033      	beq.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d12f      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f02:	4b72      	ldr	r3, [pc, #456]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0a:	4a70      	ldr	r2, [pc, #448]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e024      	b.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f20:	4b6a      	ldr	r3, [pc, #424]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0c6      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f30:	4b66      	ldr	r3, [pc, #408]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0be      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f40:	f000 f8ce 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4a61      	ldr	r2, [pc, #388]	; (80020d0 <HAL_RCC_ClockConfig+0x268>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d909      	bls.n	8001f62 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f4e:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f56:	4a5d      	ldr	r2, [pc, #372]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f5c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b5a      	ldr	r3, [pc, #360]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4957      	ldr	r1, [pc, #348]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f74:	f7fe fe5e 	bl	8000c34 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fe5a 	bl	8000c34 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e095      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b4e      	ldr	r3, [pc, #312]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbc:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4a42      	ldr	r2, [pc, #264]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fc6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b39      	ldr	r3, [pc, #228]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4936      	ldr	r1, [pc, #216]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
 8001ff6:	e008      	b.n	800200a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b80      	cmp	r3, #128	; 0x80
 8001ffc:	d105      	bne.n	800200a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ffe:	4b33      	ldr	r3, [pc, #204]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4a32      	ldr	r2, [pc, #200]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8002004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002008:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d21d      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 020f 	bic.w	r2, r3, #15
 8002020:	4929      	ldr	r1, [pc, #164]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002028:	f7fe fe04 	bl	8000c34 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002030:	f7fe fe00 	bl	8000c34 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e03b      	b.n	80020be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <HAL_RCC_ClockConfig+0x260>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d1ed      	bne.n	8002030 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4917      	ldr	r1, [pc, #92]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207e:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490f      	ldr	r1, [pc, #60]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002092:	f000 f825 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_RCC_ClockConfig+0x264>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490c      	ldr	r1, [pc, #48]	; (80020d4 <HAL_RCC_ClockConfig+0x26c>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	fa22 f303 	lsr.w	r3, r2, r3
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x270>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_RCC_ClockConfig+0x274>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fd70 	bl	8000b9c <HAL_InitTick>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40021000 	.word	0x40021000
 80020d0:	04c4b400 	.word	0x04c4b400
 80020d4:	0800457c 	.word	0x0800457c
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020f2:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	e047      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b08      	cmp	r3, #8
 8002102:	d102      	bne.n	800210a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002104:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e03e      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b0c      	cmp	r3, #12
 8002114:	d136      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	3301      	adds	r3, #1
 800212c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d10c      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002134:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800213e:	68d2      	ldr	r2, [r2, #12]
 8002140:	0a12      	lsrs	r2, r2, #8
 8002142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
      break;
 800214c:	e00c      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002158:	68d2      	ldr	r2, [r2, #12]
 800215a:	0a12      	lsrs	r2, r2, #8
 800215c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
      break;
 8002166:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0e5b      	lsrs	r3, r3, #25
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	e001      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002188:	693b      	ldr	r3, [r7, #16]
}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	00f42400 	.word	0x00f42400
 80021a0:	016e3600 	.word	0x016e3600

080021a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000000 	.word	0x20000000

080021bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021c0:	f7ff fff0 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4904      	ldr	r1, [pc, #16]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	0800458c 	.word	0x0800458c

080021e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021ec:	f7ff ffda 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0adb      	lsrs	r3, r3, #11
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4904      	ldr	r1, [pc, #16]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	0800458c 	.word	0x0800458c

08002214 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3301      	adds	r3, #1
 8002230:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d10c      	bne.n	8002252 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002238:	4a17      	ldr	r2, [pc, #92]	; (8002298 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	4a14      	ldr	r2, [pc, #80]	; (8002294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002242:	68d2      	ldr	r2, [r2, #12]
 8002244:	0a12      	lsrs	r2, r2, #8
 8002246:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	617b      	str	r3, [r7, #20]
    break;
 8002250:	e00c      	b.n	800226c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800225c:	68d2      	ldr	r2, [r2, #12]
 800225e:	0a12      	lsrs	r2, r2, #8
 8002260:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
    break;
 800226a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0e5b      	lsrs	r3, r3, #25
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	3301      	adds	r3, #1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002286:	687b      	ldr	r3, [r7, #4]
}
 8002288:	4618      	mov	r0, r3
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000
 8002298:	016e3600 	.word	0x016e3600
 800229c:	00f42400 	.word	0x00f42400

080022a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022a8:	2300      	movs	r3, #0
 80022aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022ac:	2300      	movs	r3, #0
 80022ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8098 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10d      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	4a3f      	ldr	r2, [pc, #252]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
 80022da:	4b3d      	ldr	r3, [pc, #244]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e6:	2301      	movs	r3, #1
 80022e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a39      	ldr	r2, [pc, #228]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022f6:	f7fe fc9d 	bl	8000c34 <HAL_GetTick>
 80022fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022fc:	e009      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fe:	f7fe fc99 	bl	8000c34 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d902      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	74fb      	strb	r3, [r7, #19]
        break;
 8002310:	e005      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0ef      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d159      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002324:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01e      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	d019      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002340:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800234c:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d016      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fc59 	bl	8000c34 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002384:	e00b      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fc55 	bl	8000c34 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d902      	bls.n	800239e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	74fb      	strb	r3, [r7, #19]
            break;
 800239c:	e006      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ec      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10b      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023c8:	e008      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	74bb      	strb	r3, [r7, #18]
 80023ce:	e005      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023d0:	40021000 	.word	0x40021000
 80023d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023dc:	7c7b      	ldrb	r3, [r7, #17]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4ba7      	ldr	r3, [pc, #668]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4aa6      	ldr	r2, [pc, #664]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023fa:	4ba1      	ldr	r3, [pc, #644]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f023 0203 	bic.w	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	499d      	ldr	r1, [pc, #628]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800241c:	4b98      	ldr	r3, [pc, #608]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f023 020c 	bic.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4995      	ldr	r1, [pc, #596]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800243e:	4b90      	ldr	r3, [pc, #576]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002444:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	498c      	ldr	r1, [pc, #560]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002460:	4b87      	ldr	r3, [pc, #540]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	4984      	ldr	r1, [pc, #528]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	497b      	ldr	r1, [pc, #492]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024a4:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	4973      	ldr	r1, [pc, #460]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	496a      	ldr	r1, [pc, #424]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e8:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4962      	ldr	r1, [pc, #392]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	4959      	ldr	r1, [pc, #356]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800252c:	4b54      	ldr	r3, [pc, #336]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	4951      	ldr	r1, [pc, #324]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800254e:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	4948      	ldr	r1, [pc, #288]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d015      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4940      	ldr	r1, [pc, #256]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258e:	d105      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800259a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d015      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	4932      	ldr	r1, [pc, #200]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c6:	d105      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a2c      	ldr	r2, [pc, #176]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d015      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	4924      	ldr	r1, [pc, #144]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fe:	d105      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002636:	d105      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a10      	ldr	r2, [pc, #64]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002642:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d019      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	4908      	ldr	r1, [pc, #32]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266e:	d109      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a02      	ldr	r2, [pc, #8]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800267a:	60d3      	str	r3, [r2, #12]
 800267c:	e002      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d015      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269e:	4926      	ldr	r1, [pc, #152]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ae:	d105      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a20      	ldr	r2, [pc, #128]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d6:	4918      	ldr	r1, [pc, #96]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e6:	d105      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d015      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002706:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800271e:	d105      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800272c:	7cbb      	ldrb	r3, [r7, #18]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e054      	b.n	80027f8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d111      	bne.n	800277e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fb48 	bl	8002df8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <HAL_TIM_Base_Init+0xc4>)
 8002774:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	4619      	mov	r1, r3
 8002790:	4610      	mov	r0, r2
 8002792:	f000 fa7d 	bl	8002c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	0800087d 	.word	0x0800087d

08002804 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e04c      	b.n	80028b2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fae3 	bl	8002df8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <HAL_TIM_OnePulse_Init+0xb8>)
 800283e:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3304      	adds	r3, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f000 fa18 	bl	8002c90 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0208 	bic.w	r2, r2, #8
 800286e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	080028c1 	.word	0x080028c1

080028c0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d026      	beq.n	8002944 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d021      	beq.n	8002944 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0202 	mvn.w	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
 8002928:	e009      	b.n	800293e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d026      	beq.n	800299c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d021      	beq.n	800299c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0204 	mvn.w	r2, #4
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
 8002980:	e009      	b.n	8002996 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d026      	beq.n	80029f4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d021      	beq.n	80029f4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0208 	mvn.w	r2, #8
 80029b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2204      	movs	r2, #4
 80029be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e009      	b.n	80029ee <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d026      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d021      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0210 	mvn.w	r2, #16
 8002a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2208      	movs	r2, #8
 8002a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
 8002a30:	e009      	b.n	8002a46 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d009      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0201 	mvn.w	r2, #1
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d104      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00e      	beq.n	8002ace <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00e      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0220 	mvn.w	r2, #32
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a4c      	ldr	r2, [pc, #304]	; (8002dd4 <TIM_Base_SetConfig+0x144>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d017      	beq.n	8002cd8 <TIM_Base_SetConfig+0x48>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d013      	beq.n	8002cd8 <TIM_Base_SetConfig+0x48>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a49      	ldr	r2, [pc, #292]	; (8002dd8 <TIM_Base_SetConfig+0x148>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_Base_SetConfig+0x48>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a48      	ldr	r2, [pc, #288]	; (8002ddc <TIM_Base_SetConfig+0x14c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_Base_SetConfig+0x48>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a47      	ldr	r2, [pc, #284]	; (8002de0 <TIM_Base_SetConfig+0x150>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_Base_SetConfig+0x48>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a46      	ldr	r2, [pc, #280]	; (8002de4 <TIM_Base_SetConfig+0x154>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_Base_SetConfig+0x48>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a45      	ldr	r2, [pc, #276]	; (8002de8 <TIM_Base_SetConfig+0x158>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d108      	bne.n	8002cea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <TIM_Base_SetConfig+0x144>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d023      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d01f      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a36      	ldr	r2, [pc, #216]	; (8002dd8 <TIM_Base_SetConfig+0x148>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01b      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a35      	ldr	r2, [pc, #212]	; (8002ddc <TIM_Base_SetConfig+0x14c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d017      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <TIM_Base_SetConfig+0x150>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <TIM_Base_SetConfig+0x154>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00f      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a33      	ldr	r2, [pc, #204]	; (8002dec <TIM_Base_SetConfig+0x15c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00b      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a32      	ldr	r2, [pc, #200]	; (8002df0 <TIM_Base_SetConfig+0x160>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a31      	ldr	r2, [pc, #196]	; (8002df4 <TIM_Base_SetConfig+0x164>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_Base_SetConfig+0xaa>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <TIM_Base_SetConfig+0x158>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d108      	bne.n	8002d4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <TIM_Base_SetConfig+0x144>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <TIM_Base_SetConfig+0x110>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a1a      	ldr	r2, [pc, #104]	; (8002de4 <TIM_Base_SetConfig+0x154>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00f      	beq.n	8002da0 <TIM_Base_SetConfig+0x110>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a1a      	ldr	r2, [pc, #104]	; (8002dec <TIM_Base_SetConfig+0x15c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00b      	beq.n	8002da0 <TIM_Base_SetConfig+0x110>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a19      	ldr	r2, [pc, #100]	; (8002df0 <TIM_Base_SetConfig+0x160>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <TIM_Base_SetConfig+0x110>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <TIM_Base_SetConfig+0x164>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_Base_SetConfig+0x110>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <TIM_Base_SetConfig+0x158>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d103      	bne.n	8002da8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d105      	bne.n	8002dc6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f023 0201 	bic.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40000800 	.word	0x40000800
 8002de0:	40000c00 	.word	0x40000c00
 8002de4:	40013400 	.word	0x40013400
 8002de8:	40015000 	.word	0x40015000
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800

08002df8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <TIM_ResetCallback+0xa4>)
 8002e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <TIM_ResetCallback+0xa8>)
 8002e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <TIM_ResetCallback+0xac>)
 8002e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <TIM_ResetCallback+0xb0>)
 8002e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <TIM_ResetCallback+0xb4>)
 8002e24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <TIM_ResetCallback+0xb8>)
 8002e2c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <TIM_ResetCallback+0xbc>)
 8002e34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <TIM_ResetCallback+0xc0>)
 8002e3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <TIM_ResetCallback+0xc4>)
 8002e44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <TIM_ResetCallback+0xc8>)
 8002e4c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <TIM_ResetCallback+0xcc>)
 8002e54:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <TIM_ResetCallback+0xd0>)
 8002e5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a1a      	ldr	r2, [pc, #104]	; (8002ecc <TIM_ResetCallback+0xd4>)
 8002e64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a19      	ldr	r2, [pc, #100]	; (8002ed0 <TIM_ResetCallback+0xd8>)
 8002e6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <TIM_ResetCallback+0xdc>)
 8002e74:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <TIM_ResetCallback+0xe0>)
 8002e7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <TIM_ResetCallback+0xe4>)
 8002e84:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <TIM_ResetCallback+0xe8>)
 8002e8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	08002bc7 	.word	0x08002bc7
 8002ea0:	08002bdb 	.word	0x08002bdb
 8002ea4:	08002c53 	.word	0x08002c53
 8002ea8:	08002c67 	.word	0x08002c67
 8002eac:	08002c03 	.word	0x08002c03
 8002eb0:	08002c17 	.word	0x08002c17
 8002eb4:	08002bef 	.word	0x08002bef
 8002eb8:	08002c2b 	.word	0x08002c2b
 8002ebc:	08002c3f 	.word	0x08002c3f
 8002ec0:	08002c7b 	.word	0x08002c7b
 8002ec4:	08002ee5 	.word	0x08002ee5
 8002ec8:	08002ef9 	.word	0x08002ef9
 8002ecc:	08002f0d 	.word	0x08002f0d
 8002ed0:	08002f21 	.word	0x08002f21
 8002ed4:	08002f35 	.word	0x08002f35
 8002ed8:	08002f49 	.word	0x08002f49
 8002edc:	08002f5d 	.word	0x08002f5d
 8002ee0:	08002f71 	.word	0x08002f71

08002ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e050      	b.n	8003038 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d114      	bne.n	8002fca <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fbdb 	bl	8003764 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_UART_Init+0xbc>)
 8002fbc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2224      	movs	r2, #36	; 0x24
 8002fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 ff08 	bl	8003e00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fc09 	bl	8003808 <UART_SetConfig>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e01b      	b.n	8003038 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800300e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800301e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 ff87 	bl	8003f44 <UART_CheckIdleState>
 8003036:	4603      	mov	r3, r0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	080008c9 	.word	0x080008c9

08003044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b0ba      	sub	sp, #232	; 0xe8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800306a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800306e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003072:	4013      	ands	r3, r2
 8003074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11b      	bne.n	80030b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d105      	bne.n	80030a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 82f3 	beq.w	8003694 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
      }
      return;
 80030b6:	e2ed      	b.n	8003694 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8129 	beq.w	8003314 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80030c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80030c6:	4b90      	ldr	r3, [pc, #576]	; (8003308 <HAL_UART_IRQHandler+0x2c4>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80030ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030d2:	4b8e      	ldr	r3, [pc, #568]	; (800330c <HAL_UART_IRQHandler+0x2c8>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 811c 	beq.w	8003314 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d011      	beq.n	800310c <HAL_UART_IRQHandler+0xc8>
 80030e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800310c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d011      	beq.n	800313c <HAL_UART_IRQHandler+0xf8>
 8003118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00b      	beq.n	800313c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2202      	movs	r2, #2
 800312a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f043 0204 	orr.w	r2, r3, #4
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800313c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d011      	beq.n	800316c <HAL_UART_IRQHandler+0x128>
 8003148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2204      	movs	r2, #4
 800315a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d017      	beq.n	80031a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003184:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003188:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <HAL_UART_IRQHandler+0x2c4>)
 800318a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2208      	movs	r2, #8
 8003196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f043 0208 	orr.w	r2, r3, #8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <HAL_UART_IRQHandler+0x196>
 80031b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00c      	beq.n	80031da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8259 	beq.w	8003698 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d013      	beq.n	800321a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d005      	beq.n	800323e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003236:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800323a:	2b00      	cmp	r3, #0
 800323c:	d058      	beq.n	80032f0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 ff97 	bl	8004172 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d148      	bne.n	80032e4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3308      	adds	r3, #8
 8003258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800326c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3308      	adds	r3, #8
 800327a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800327e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800328a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1d9      	bne.n	8003252 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_UART_IRQHandler+0x2cc>)
 80032b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fed8 	bl	800106e <HAL_DMA_Abort_IT>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01f      	beq.n	8003304 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80032d2:	4610      	mov	r0, r2
 80032d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d6:	e015      	b.n	8003304 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e2:	e00f      	b.n	8003304 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ee:	e009      	b.n	8003304 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003302:	e1c9      	b.n	8003698 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003304:	bf00      	nop
    return;
 8003306:	e1c7      	b.n	8003698 <HAL_UART_IRQHandler+0x654>
 8003308:	10000001 	.word	0x10000001
 800330c:	04000120 	.word	0x04000120
 8003310:	0800423f 	.word	0x0800423f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003318:	2b01      	cmp	r3, #1
 800331a:	f040 8157 	bne.w	80035cc <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800331e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8150 	beq.w	80035cc <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800332c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8149 	beq.w	80035cc <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2210      	movs	r2, #16
 8003340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	f040 80bd 	bne.w	80034cc <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8199 	beq.w	800369c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003374:	429a      	cmp	r2, r3
 8003376:	f080 8191 	bcs.w	800369c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 8087 	bne.w	80034a6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033d2:	e841 2300 	strex	r3, r2, [r1]
 80033d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1da      	bne.n	8003398 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3308      	adds	r3, #8
 80033e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3308      	adds	r3, #8
 8003402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003406:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800340a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800340e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e1      	bne.n	80033e2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3308      	adds	r3, #8
 8003424:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800342e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3308      	adds	r3, #8
 800343e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003442:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003444:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003448:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e3      	bne.n	800341e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346c:	e853 3f00 	ldrex	r3, [r3]
 8003470:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003474:	f023 0310 	bic.w	r3, r3, #16
 8003478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	461a      	mov	r2, r3
 8003482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003486:	65bb      	str	r3, [r7, #88]	; 0x58
 8003488:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800348c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e4      	bne.n	8003464 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fd8b 	bl	8000fbc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 80034be:	b292      	uxth	r2, r2
 80034c0:	1a8a      	subs	r2, r1, r2
 80034c2:	b292      	uxth	r2, r2
 80034c4:	4611      	mov	r1, r2
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034ca:	e0e7      	b.n	800369c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80d9 	beq.w	80036a0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80034ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80d4 	beq.w	80036a0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800350c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
 800351c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003522:	e841 2300 	strex	r3, r2, [r1]
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1e4      	bne.n	80034f8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	623b      	str	r3, [r7, #32]
   return(result);
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003556:	633a      	str	r2, [r7, #48]	; 0x30
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e1      	bne.n	800352e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	60fb      	str	r3, [r7, #12]
   return(result);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	69b9      	ldr	r1, [r7, #24]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	617b      	str	r3, [r7, #20]
   return(result);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e4      	bne.n	800357e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80035c0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80035c4:	4611      	mov	r1, r2
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035ca:	e069      	b.n	80036a0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d010      	beq.n	80035fa <HAL_UART_IRQHandler+0x5b6>
 80035d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035ec:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035f8:	e055      	b.n	80036a6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d014      	beq.n	8003630 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800360a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d105      	bne.n	800361e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003622:	2b00      	cmp	r3, #0
 8003624:	d03e      	beq.n	80036a4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
    }
    return;
 800362e:	e039      	b.n	80036a4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_UART_IRQHandler+0x60c>
 800363c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fe10 	bl	800426e <UART_EndTransmit_IT>
    return;
 800364e:	e02a      	b.n	80036a6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003654:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_UART_IRQHandler+0x630>
 800365c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003660:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003672:	e018      	b.n	80036a6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <HAL_UART_IRQHandler+0x662>
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003684:	2b00      	cmp	r3, #0
 8003686:	da0e      	bge.n	80036a6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003692:	e008      	b.n	80036a6 <HAL_UART_IRQHandler+0x662>
      return;
 8003694:	bf00      	nop
 8003696:	e006      	b.n	80036a6 <HAL_UART_IRQHandler+0x662>
    return;
 8003698:	bf00      	nop
 800369a:	e004      	b.n	80036a6 <HAL_UART_IRQHandler+0x662>
      return;
 800369c:	bf00      	nop
 800369e:	e002      	b.n	80036a6 <HAL_UART_IRQHandler+0x662>
      return;
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <HAL_UART_IRQHandler+0x662>
    return;
 80036a4:	bf00      	nop
  }
}
 80036a6:	37e8      	adds	r7, #232	; 0xe8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <UART_InitCallbacksToDefault+0x74>)
 8003770:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a19      	ldr	r2, [pc, #100]	; (80037dc <UART_InitCallbacksToDefault+0x78>)
 8003778:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <UART_InitCallbacksToDefault+0x7c>)
 8003780:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <UART_InitCallbacksToDefault+0x80>)
 8003788:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <UART_InitCallbacksToDefault+0x84>)
 8003790:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <UART_InitCallbacksToDefault+0x88>)
 8003798:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <UART_InitCallbacksToDefault+0x8c>)
 80037a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <UART_InitCallbacksToDefault+0x90>)
 80037a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <UART_InitCallbacksToDefault+0x94>)
 80037b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a11      	ldr	r2, [pc, #68]	; (80037fc <UART_InitCallbacksToDefault+0x98>)
 80037b8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a10      	ldr	r2, [pc, #64]	; (8003800 <UART_InitCallbacksToDefault+0x9c>)
 80037c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a0f      	ldr	r2, [pc, #60]	; (8003804 <UART_InitCallbacksToDefault+0xa0>)
 80037c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	080036c1 	.word	0x080036c1
 80037dc:	080036ad 	.word	0x080036ad
 80037e0:	080036e9 	.word	0x080036e9
 80037e4:	080036d5 	.word	0x080036d5
 80037e8:	080036fd 	.word	0x080036fd
 80037ec:	08003711 	.word	0x08003711
 80037f0:	08003725 	.word	0x08003725
 80037f4:	08003739 	.word	0x08003739
 80037f8:	080042c9 	.word	0x080042c9
 80037fc:	080042dd 	.word	0x080042dd
 8003800:	080042f1 	.word	0x080042f1
 8003804:	0800374d 	.word	0x0800374d

08003808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800380c:	b08c      	sub	sp, #48	; 0x30
 800380e:	af00      	add	r7, sp, #0
 8003810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	4313      	orrs	r3, r2
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4baa      	ldr	r3, [pc, #680]	; (8003ae0 <UART_SetConfig+0x2d8>)
 8003838:	4013      	ands	r3, r2
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003840:	430b      	orrs	r3, r1
 8003842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a9f      	ldr	r2, [pc, #636]	; (8003ae4 <UART_SetConfig+0x2dc>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003870:	4313      	orrs	r3, r2
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800387e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003888:	430b      	orrs	r3, r1
 800388a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f023 010f 	bic.w	r1, r3, #15
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a90      	ldr	r2, [pc, #576]	; (8003ae8 <UART_SetConfig+0x2e0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <UART_SetConfig+0xf0>
 80038ac:	4b8f      	ldr	r3, [pc, #572]	; (8003aec <UART_SetConfig+0x2e4>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d81a      	bhi.n	80038f0 <UART_SetConfig+0xe8>
 80038ba:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <UART_SetConfig+0xb8>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	080038d1 	.word	0x080038d1
 80038c4:	080038e1 	.word	0x080038e1
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038e9 	.word	0x080038e9
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038d6:	e116      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038de:	e112      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038e6:	e10e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e10a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e106      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a7c      	ldr	r2, [pc, #496]	; (8003af0 <UART_SetConfig+0x2e8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d138      	bne.n	8003974 <UART_SetConfig+0x16c>
 8003902:	4b7a      	ldr	r3, [pc, #488]	; (8003aec <UART_SetConfig+0x2e4>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d82d      	bhi.n	800396c <UART_SetConfig+0x164>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x110>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800394d 	.word	0x0800394d
 800391c:	0800396d 	.word	0x0800396d
 8003920:	0800396d 	.word	0x0800396d
 8003924:	0800396d 	.word	0x0800396d
 8003928:	0800395d 	.word	0x0800395d
 800392c:	0800396d 	.word	0x0800396d
 8003930:	0800396d 	.word	0x0800396d
 8003934:	0800396d 	.word	0x0800396d
 8003938:	08003955 	.word	0x08003955
 800393c:	0800396d 	.word	0x0800396d
 8003940:	0800396d 	.word	0x0800396d
 8003944:	0800396d 	.word	0x0800396d
 8003948:	08003965 	.word	0x08003965
 800394c:	2300      	movs	r3, #0
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003952:	e0d8      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003954:	2302      	movs	r3, #2
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e0d4      	b.n	8003b06 <UART_SetConfig+0x2fe>
 800395c:	2304      	movs	r3, #4
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003962:	e0d0      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003964:	2308      	movs	r3, #8
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396a:	e0cc      	b.n	8003b06 <UART_SetConfig+0x2fe>
 800396c:	2310      	movs	r3, #16
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003972:	e0c8      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5e      	ldr	r2, [pc, #376]	; (8003af4 <UART_SetConfig+0x2ec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d125      	bne.n	80039ca <UART_SetConfig+0x1c2>
 800397e:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <UART_SetConfig+0x2e4>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003988:	2b30      	cmp	r3, #48	; 0x30
 800398a:	d016      	beq.n	80039ba <UART_SetConfig+0x1b2>
 800398c:	2b30      	cmp	r3, #48	; 0x30
 800398e:	d818      	bhi.n	80039c2 <UART_SetConfig+0x1ba>
 8003990:	2b20      	cmp	r3, #32
 8003992:	d00a      	beq.n	80039aa <UART_SetConfig+0x1a2>
 8003994:	2b20      	cmp	r3, #32
 8003996:	d814      	bhi.n	80039c2 <UART_SetConfig+0x1ba>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <UART_SetConfig+0x19a>
 800399c:	2b10      	cmp	r3, #16
 800399e:	d008      	beq.n	80039b2 <UART_SetConfig+0x1aa>
 80039a0:	e00f      	b.n	80039c2 <UART_SetConfig+0x1ba>
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a8:	e0ad      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039aa:	2302      	movs	r3, #2
 80039ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b0:	e0a9      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039b2:	2304      	movs	r3, #4
 80039b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b8:	e0a5      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039ba:	2308      	movs	r3, #8
 80039bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c0:	e0a1      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039c2:	2310      	movs	r3, #16
 80039c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c8:	e09d      	b.n	8003b06 <UART_SetConfig+0x2fe>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a4a      	ldr	r2, [pc, #296]	; (8003af8 <UART_SetConfig+0x2f0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d125      	bne.n	8003a20 <UART_SetConfig+0x218>
 80039d4:	4b45      	ldr	r3, [pc, #276]	; (8003aec <UART_SetConfig+0x2e4>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039de:	2bc0      	cmp	r3, #192	; 0xc0
 80039e0:	d016      	beq.n	8003a10 <UART_SetConfig+0x208>
 80039e2:	2bc0      	cmp	r3, #192	; 0xc0
 80039e4:	d818      	bhi.n	8003a18 <UART_SetConfig+0x210>
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d00a      	beq.n	8003a00 <UART_SetConfig+0x1f8>
 80039ea:	2b80      	cmp	r3, #128	; 0x80
 80039ec:	d814      	bhi.n	8003a18 <UART_SetConfig+0x210>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <UART_SetConfig+0x1f0>
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d008      	beq.n	8003a08 <UART_SetConfig+0x200>
 80039f6:	e00f      	b.n	8003a18 <UART_SetConfig+0x210>
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039fe:	e082      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a00:	2302      	movs	r3, #2
 8003a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a06:	e07e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a0e:	e07a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a10:	2308      	movs	r3, #8
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a16:	e076      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1e:	e072      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a35      	ldr	r2, [pc, #212]	; (8003afc <UART_SetConfig+0x2f4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d12a      	bne.n	8003a80 <UART_SetConfig+0x278>
 8003a2a:	4b30      	ldr	r3, [pc, #192]	; (8003aec <UART_SetConfig+0x2e4>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a38:	d01a      	beq.n	8003a70 <UART_SetConfig+0x268>
 8003a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a3e:	d81b      	bhi.n	8003a78 <UART_SetConfig+0x270>
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a44:	d00c      	beq.n	8003a60 <UART_SetConfig+0x258>
 8003a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a4a:	d815      	bhi.n	8003a78 <UART_SetConfig+0x270>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <UART_SetConfig+0x250>
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	d008      	beq.n	8003a68 <UART_SetConfig+0x260>
 8003a56:	e00f      	b.n	8003a78 <UART_SetConfig+0x270>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a5e:	e052      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a60:	2302      	movs	r3, #2
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a66:	e04e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a6e:	e04a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a70:	2308      	movs	r3, #8
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a76:	e046      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7e:	e042      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a17      	ldr	r2, [pc, #92]	; (8003ae4 <UART_SetConfig+0x2dc>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d13a      	bne.n	8003b00 <UART_SetConfig+0x2f8>
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <UART_SetConfig+0x2e4>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a98:	d01a      	beq.n	8003ad0 <UART_SetConfig+0x2c8>
 8003a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a9e:	d81b      	bhi.n	8003ad8 <UART_SetConfig+0x2d0>
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa4:	d00c      	beq.n	8003ac0 <UART_SetConfig+0x2b8>
 8003aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aaa:	d815      	bhi.n	8003ad8 <UART_SetConfig+0x2d0>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <UART_SetConfig+0x2b0>
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab4:	d008      	beq.n	8003ac8 <UART_SetConfig+0x2c0>
 8003ab6:	e00f      	b.n	8003ad8 <UART_SetConfig+0x2d0>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003abe:	e022      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ac6:	e01e      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ace:	e01a      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad6:	e016      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ad8:	2310      	movs	r3, #16
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ade:	e012      	b.n	8003b06 <UART_SetConfig+0x2fe>
 8003ae0:	cfff69f3 	.word	0xcfff69f3
 8003ae4:	40008000 	.word	0x40008000
 8003ae8:	40013800 	.word	0x40013800
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40004400 	.word	0x40004400
 8003af4:	40004800 	.word	0x40004800
 8003af8:	40004c00 	.word	0x40004c00
 8003afc:	40005000 	.word	0x40005000
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4aae      	ldr	r2, [pc, #696]	; (8003dc4 <UART_SetConfig+0x5bc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f040 8097 	bne.w	8003c40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d823      	bhi.n	8003b62 <UART_SetConfig+0x35a>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <UART_SetConfig+0x318>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003b45 	.word	0x08003b45
 8003b24:	08003b63 	.word	0x08003b63
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b53 	.word	0x08003b53
 8003b34:	08003b63 	.word	0x08003b63
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b63 	.word	0x08003b63
 8003b40:	08003b5b 	.word	0x08003b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b44:	f7fe fb3a 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8003b48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b4a:	e010      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b9e      	ldr	r3, [pc, #632]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b50:	e00d      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fac5 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8003b56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b60:	e005      	b.n	8003b6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8130 	beq.w	8003dd6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	4a94      	ldr	r2, [pc, #592]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d305      	bcc.n	8003ba6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d903      	bls.n	8003bae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003bac:	e113      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	60fa      	str	r2, [r7, #12]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	4a84      	ldr	r2, [pc, #528]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bd0:	f7fc fb22 	bl	8000218 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	020b      	lsls	r3, r1, #8
 8003be6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003bea:	0202      	lsls	r2, r0, #8
 8003bec:	6979      	ldr	r1, [r7, #20]
 8003bee:	6849      	ldr	r1, [r1, #4]
 8003bf0:	0849      	lsrs	r1, r1, #1
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	4605      	mov	r5, r0
 8003bf8:	eb12 0804 	adds.w	r8, r2, r4
 8003bfc:	eb43 0905 	adc.w	r9, r3, r5
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	469a      	mov	sl, r3
 8003c08:	4693      	mov	fp, r2
 8003c0a:	4652      	mov	r2, sl
 8003c0c:	465b      	mov	r3, fp
 8003c0e:	4640      	mov	r0, r8
 8003c10:	4649      	mov	r1, r9
 8003c12:	f7fc fb01 	bl	8000218 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c24:	d308      	bcc.n	8003c38 <UART_SetConfig+0x430>
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2c:	d204      	bcs.n	8003c38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	e0ce      	b.n	8003dd6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c3e:	e0ca      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c48:	d166      	bne.n	8003d18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d827      	bhi.n	8003ca2 <UART_SetConfig+0x49a>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x450>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003ca3 	.word	0x08003ca3
 8003c68:	08003c93 	.word	0x08003c93
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003ca3 	.word	0x08003ca3
 8003c74:	08003ca3 	.word	0x08003ca3
 8003c78:	08003c9b 	.word	0x08003c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c7c:	f7fe fa9e 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8003c80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c82:	e014      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7fe fab0 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c8a:	e010      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8c:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c90:	e00d      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c92:	f7fe fa25 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8003c96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c98:	e009      	b.n	8003cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ca0:	e005      	b.n	8003cae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8090 	beq.w	8003dd6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	4a44      	ldr	r2, [pc, #272]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cc8:	005a      	lsls	r2, r3, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	441a      	add	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d916      	bls.n	8003d10 <UART_SetConfig+0x508>
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d212      	bcs.n	8003d10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	f023 030f 	bic.w	r3, r3, #15
 8003cf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	8bfb      	ldrh	r3, [r7, #30]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	8bfa      	ldrh	r2, [r7, #30]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	e062      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d16:	e05e      	b.n	8003dd6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d828      	bhi.n	8003d72 <UART_SetConfig+0x56a>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <UART_SetConfig+0x520>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d4d 	.word	0x08003d4d
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d63 	.word	0x08003d63
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d73 	.word	0x08003d73
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe fa36 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8003d50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d52:	e014      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d54:	f7fe fa48 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 8003d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d5a:	e010      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <UART_SetConfig+0x5c0>)
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e00d      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fe f9bd 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d68:	e009      	b.n	8003d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d70:	e005      	b.n	8003d7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d028      	beq.n	8003dd6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <UART_SetConfig+0x5c4>)
 8003d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	085b      	lsrs	r3, r3, #1
 8003d9c:	441a      	add	r2, r3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	d910      	bls.n	8003dd0 <UART_SetConfig+0x5c8>
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d20c      	bcs.n	8003dd0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	e009      	b.n	8003dd6 <UART_SetConfig+0x5ce>
 8003dc2:	bf00      	nop
 8003dc4:	40008000 	.word	0x40008000
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	08004594 	.word	0x08004594
      }
      else
      {
        ret = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2200      	movs	r2, #0
 8003dea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003df2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3730      	adds	r7, #48	; 0x30
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01a      	beq.n	8003f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d10a      	bne.n	8003f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b098      	sub	sp, #96	; 0x60
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f54:	f7fc fe6e 	bl	8000c34 <HAL_GetTick>
 8003f58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d12f      	bne.n	8003fc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f70:	2200      	movs	r2, #0
 8003f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f88e 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d022      	beq.n	8003fc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e6      	bne.n	8003f82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e063      	b.n	8004090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d149      	bne.n	800406a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f857 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d03c      	beq.n	800406a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
 8004010:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	60fb      	str	r3, [r7, #12]
   return(result);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004042:	61fa      	str	r2, [r7, #28]
 8004044:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	69b9      	ldr	r1, [r7, #24]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	617b      	str	r3, [r7, #20]
   return(result);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e5      	bne.n	8004022 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e012      	b.n	8004090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3758      	adds	r7, #88	; 0x58
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	e04f      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d04b      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fc fdbf 	bl	8000c34 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e04e      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d037      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0xb2>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b80      	cmp	r3, #128	; 0x80
 80040de:	d034      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0xb2>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d031      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d110      	bne.n	8004116 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2208      	movs	r2, #8
 80040fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f838 	bl	8004172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2208      	movs	r2, #8
 8004106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e029      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004124:	d111      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800412e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f81e 	bl	8004172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e00f      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	429a      	cmp	r2, r3
 8004158:	bf0c      	ite	eq
 800415a:	2301      	moveq	r3, #1
 800415c:	2300      	movne	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	429a      	cmp	r2, r3
 8004166:	d0a0      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004172:	b480      	push	{r7}
 8004174:	b095      	sub	sp, #84	; 0x54
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	643b      	str	r3, [r7, #64]	; 0x40
 800419a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800419e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e6      	bne.n	800417a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3308      	adds	r3, #8
 80041b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e3      	bne.n	80041ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d118      	bne.n	800421e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f023 0310 	bic.w	r3, r3, #16
 8004200:	647b      	str	r3, [r7, #68]	; 0x44
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6979      	ldr	r1, [r7, #20]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	613b      	str	r3, [r7, #16]
   return(result);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e6      	bne.n	80041ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004232:	bf00      	nop
 8004234:	3754      	adds	r7, #84	; 0x54
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b088      	sub	sp, #32
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	60bb      	str	r3, [r7, #8]
   return(result);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6979      	ldr	r1, [r7, #20]
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	613b      	str	r3, [r7, #16]
   return(result);
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042c0:	bf00      	nop
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_UARTEx_DisableFifoMode+0x16>
 8004316:	2302      	movs	r3, #2
 8004318:	e027      	b.n	800436a <HAL_UARTEx_DisableFifoMode+0x66>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2224      	movs	r2, #36	; 0x24
 8004326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004348:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800438a:	2302      	movs	r3, #2
 800438c:	e02d      	b.n	80043ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2224      	movs	r2, #36	; 0x24
 800439a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0201 	bic.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f850 	bl	8004470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004406:	2302      	movs	r3, #2
 8004408:	e02d      	b.n	8004466 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2224      	movs	r2, #36	; 0x24
 8004416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f812 	bl	8004470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800447c:	2b00      	cmp	r3, #0
 800447e:	d108      	bne.n	8004492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004490:	e031      	b.n	80044f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004492:	2308      	movs	r3, #8
 8004494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004496:	2308      	movs	r3, #8
 8004498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	0e5b      	lsrs	r3, r3, #25
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	0f5b      	lsrs	r3, r3, #29
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044ba:	7bbb      	ldrb	r3, [r7, #14]
 80044bc:	7b3a      	ldrb	r2, [r7, #12]
 80044be:	4911      	ldr	r1, [pc, #68]	; (8004504 <UARTEx_SetNbDataToProcess+0x94>)
 80044c0:	5c8a      	ldrb	r2, [r1, r2]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044c6:	7b3a      	ldrb	r2, [r7, #12]
 80044c8:	490f      	ldr	r1, [pc, #60]	; (8004508 <UARTEx_SetNbDataToProcess+0x98>)
 80044ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	7b7a      	ldrb	r2, [r7, #13]
 80044dc:	4909      	ldr	r1, [pc, #36]	; (8004504 <UARTEx_SetNbDataToProcess+0x94>)
 80044de:	5c8a      	ldrb	r2, [r1, r2]
 80044e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80044e4:	7b7a      	ldrb	r2, [r7, #13]
 80044e6:	4908      	ldr	r1, [pc, #32]	; (8004508 <UARTEx_SetNbDataToProcess+0x98>)
 80044e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80044ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	080045ac 	.word	0x080045ac
 8004508:	080045b4 	.word	0x080045b4

0800450c <memset>:
 800450c:	4402      	add	r2, r0
 800450e:	4603      	mov	r3, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	d100      	bne.n	8004516 <memset+0xa>
 8004514:	4770      	bx	lr
 8004516:	f803 1b01 	strb.w	r1, [r3], #1
 800451a:	e7f9      	b.n	8004510 <memset+0x4>

0800451c <__libc_init_array>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	4d0d      	ldr	r5, [pc, #52]	; (8004554 <__libc_init_array+0x38>)
 8004520:	4c0d      	ldr	r4, [pc, #52]	; (8004558 <__libc_init_array+0x3c>)
 8004522:	1b64      	subs	r4, r4, r5
 8004524:	10a4      	asrs	r4, r4, #2
 8004526:	2600      	movs	r6, #0
 8004528:	42a6      	cmp	r6, r4
 800452a:	d109      	bne.n	8004540 <__libc_init_array+0x24>
 800452c:	4d0b      	ldr	r5, [pc, #44]	; (800455c <__libc_init_array+0x40>)
 800452e:	4c0c      	ldr	r4, [pc, #48]	; (8004560 <__libc_init_array+0x44>)
 8004530:	f000 f818 	bl	8004564 <_init>
 8004534:	1b64      	subs	r4, r4, r5
 8004536:	10a4      	asrs	r4, r4, #2
 8004538:	2600      	movs	r6, #0
 800453a:	42a6      	cmp	r6, r4
 800453c:	d105      	bne.n	800454a <__libc_init_array+0x2e>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	f855 3b04 	ldr.w	r3, [r5], #4
 8004544:	4798      	blx	r3
 8004546:	3601      	adds	r6, #1
 8004548:	e7ee      	b.n	8004528 <__libc_init_array+0xc>
 800454a:	f855 3b04 	ldr.w	r3, [r5], #4
 800454e:	4798      	blx	r3
 8004550:	3601      	adds	r6, #1
 8004552:	e7f2      	b.n	800453a <__libc_init_array+0x1e>
 8004554:	080045c4 	.word	0x080045c4
 8004558:	080045c4 	.word	0x080045c4
 800455c:	080045c4 	.word	0x080045c4
 8004560:	080045c8 	.word	0x080045c8

08004564 <_init>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr

08004570 <_fini>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr
