
Cl2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004fb0  08004fb0  00014fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff0  08004ff0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff0  08004ff0  00014ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ff8  08004ff8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000000c  0800500c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800500c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c5b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000234a  00000000  00000000  00031cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad2  00000000  00000000  00034e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261f5  00000000  00000000  0003590a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b1b  00000000  00000000  0005baff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc61b  00000000  00000000  0006c61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b28  00000000  00000000  00168c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0016c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004f98 	.word	0x08004f98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004f98 	.word	0x08004f98

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fb0b 	bl	8000b32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81e 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f92a 	bl	8000778 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f8de 	bl	80006e4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000528:	f000 f864 	bl	80005f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800052c:	217f      	movs	r1, #127	; 0x7f
 800052e:	4809      	ldr	r0, [pc, #36]	; (8000554 <main+0x40>)
 8000530:	f002 f92c 	bl	800278c <HAL_ADCEx_Calibration_Start>

//  HAL_ADC_Start_IT(&hadc1);

  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000534:	2228      	movs	r2, #40	; 0x28
 8000536:	4908      	ldr	r1, [pc, #32]	; (8000558 <main+0x44>)
 8000538:	4806      	ldr	r0, [pc, #24]	; (8000554 <main+0x40>)
 800053a:	f000 ffaf 	bl	800149c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800053e:	2120      	movs	r1, #32
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f002 fe20 	bl	8003188 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800054c:	f000 fb62 	bl	8000c14 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000550:	e7f5      	b.n	800053e <main+0x2a>
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	20000128 	.word	0x20000128

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	; 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 fce8 	bl	8004f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057e:	2000      	movs	r0, #0
 8000580:	f002 fe40 	bl	8003204 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2340      	movs	r3, #64	; 0x40
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800059e:	2355      	movs	r3, #85	; 0x55
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 feda 	bl	800336c <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005be:	f000 f949 	bl	8000854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f9d8 	bl	8003990 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e6:	f000 f935 	bl	8000854 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2220      	movs	r2, #32
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f004 fc97 	bl	8004f40 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000612:	4b32      	ldr	r3, [pc, #200]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000618:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061a:	4b30      	ldr	r3, [pc, #192]	; (80006dc <MX_ADC1_Init+0xe8>)
 800061c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000620:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <MX_ADC1_Init+0xe8>)
 800063c:	2204      	movs	r2, #4
 800063e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_ADC1_Init+0xe8>)
 800064e:	2201      	movs	r2, #1
 8000650:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	4817      	ldr	r0, [pc, #92]	; (80006dc <MX_ADC1_Init+0xe8>)
 800067e:	f000 fd51 	bl	8001124 <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000688:	f000 f8e4 	bl	8000854 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_ADC1_Init+0xe8>)
 8000698:	f002 f90c 	bl	80028b4 <HAL_ADCEx_MultiModeConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006a2:	f000 f8d7 	bl	8000854 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_ADC1_Init+0xec>)
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006aa:	2306      	movs	r3, #6
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b2:	237f      	movs	r3, #127	; 0x7f
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b6:	2304      	movs	r3, #4
 80006b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_ADC1_Init+0xe8>)
 80006c4:	f001 fa46 	bl	8001b54 <HAL_ADC_ConfigChannel>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ce:	f000 f8c1 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3730      	adds	r7, #48	; 0x30
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000028 	.word	0x20000028
 80006e0:	04300002 	.word	0x04300002

080006e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	4a22      	ldr	r2, [pc, #136]	; (8000774 <MX_LPUART1_UART_Init+0x90>)
 80006ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000726:	4812      	ldr	r0, [pc, #72]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	f003 fd9c 	bl	8004264 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f88f 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	f004 fb37 	bl	8004dac <HAL_UARTEx_SetTxFifoThreshold>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000744:	f000 f886 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f004 fb6c 	bl	8004e28 <HAL_UARTEx_SetRxFifoThreshold>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000756:	f000 f87d 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_LPUART1_UART_Init+0x8c>)
 800075c:	f004 faed 	bl	8004d3a <HAL_UARTEx_DisableFifoMode>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000766:	f000 f875 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000094 	.word	0x20000094
 8000774:	40008000 	.word	0x40008000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_GPIO_Init+0xd4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a2e      	ldr	r2, [pc, #184]	; (800084c <MX_GPIO_Init+0xd4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_GPIO_Init+0xd4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0xd4>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <MX_GPIO_Init+0xd4>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xd4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xd4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <MX_GPIO_Init+0xd4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0xd4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_GPIO_Init+0xd4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_GPIO_Init+0xd4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_GPIO_Init+0xd4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f002 fcaf 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000800:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <MX_GPIO_Init+0xd8>)
 8000812:	f002 fb1f 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000816:	2320      	movs	r3, #32
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f002 fb10 	bl	8002e54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f002 fa1e 	bl	8002c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800083e:	2028      	movs	r0, #40	; 0x28
 8000840:	f002 fa35 	bl	8002cae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	48000800 	.word	0x48000800

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <HAL_MspInit+0x44>)
 8000868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800086a:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <HAL_MspInit+0x44>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6613      	str	r3, [r2, #96]	; 0x60
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x44>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000896:	f002 fd59 	bl	800334c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0a0      	sub	sp, #128	; 0x80
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	2254      	movs	r2, #84	; 0x54
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 fb39 	bl	8004f40 <memset>
  if(hadc->Instance==ADC1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008d6:	d154      	bne.n	8000982 <HAL_ADC_MspInit+0xda>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 fa6d 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80008f4:	f7ff ffae 	bl	8000854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <HAL_ADC_MspInit+0xe4>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	4a23      	ldr	r2, [pc, #140]	; (800098c <HAL_ADC_MspInit+0xe4>)
 80008fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <HAL_ADC_MspInit+0xe4>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <HAL_ADC_MspInit+0xe4>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	4a1d      	ldr	r2, [pc, #116]	; (800098c <HAL_ADC_MspInit+0xe4>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_ADC_MspInit+0xe4>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_ADC_MspInit+0xe4>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_ADC_MspInit+0xe4>)
 800092e:	f043 0302 	orr.w	r3, r3, #2
 8000932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_ADC_MspInit+0xe4>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000940:	2303      	movs	r3, #3
 8000942:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000944:	2303      	movs	r3, #3
 8000946:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f002 fa7d 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095a:	2301      	movs	r3, #1
 800095c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095e:	2303      	movs	r3, #3
 8000960:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800096a:	4619      	mov	r1, r3
 800096c:	4808      	ldr	r0, [pc, #32]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800096e:	f002 fa71 	bl	8002e54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2012      	movs	r0, #18
 8000978:	f002 f97f 	bl	8002c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800097c:	2012      	movs	r0, #18
 800097e:	f002 f996 	bl	8002cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3780      	adds	r7, #128	; 0x80
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09e      	sub	sp, #120	; 0x78
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	2254      	movs	r2, #84	; 0x54
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f004 fac3 	bl	8004f40 <memset>
  if(huart->Instance==LPUART1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <HAL_UART_MspInit+0xa8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d136      	bne.n	8000a32 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009c4:	2320      	movs	r3, #32
 80009c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 f9f9 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009dc:	f7ff ff3a 	bl	8000854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_UART_MspInit+0xac>)
 80009e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e4:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <HAL_UART_MspInit+0xac>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <HAL_UART_MspInit+0xac>)
 80009ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_UART_MspInit+0xac>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fc:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <HAL_UART_MspInit+0xac>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_UART_MspInit+0xac>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a10:	230c      	movs	r3, #12
 8000a12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a20:	230c      	movs	r3, #12
 8000a22:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f002 fa11 	bl	8002e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3778      	adds	r7, #120	; 0x78
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40008000 	.word	0x40008000
 8000a40:	40021000 	.word	0x40021000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f8a2 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <ADC1_2_IRQHandler+0x10>)
 8000a9e:	f000 fdd1 	bl	8001644 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000028 	.word	0x20000028

08000aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ab0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab4:	f002 fb82 	bl	80031bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ae2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae4:	f7ff ffea 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000aea:	490d      	ldr	r1, [pc, #52]	; (8000b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <LoopForever+0xe>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b00:	4c0a      	ldr	r4, [pc, #40]	; (8000b2c <LoopForever+0x16>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f004 fa1f 	bl	8004f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b12:	f7ff fcff 	bl	8000514 <main>

08000b16 <LoopForever>:

LoopForever:
    b LoopForever
 8000b16:	e7fe      	b.n	8000b16 <LoopForever>
  ldr   r0, =_estack
 8000b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b24:	08005000 	.word	0x08005000
  ldr r2, =_sbss
 8000b28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b2c:	2000017c 	.word	0x2000017c

08000b30 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC3_IRQHandler>

08000b32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f002 f891 	bl	8002c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f80e 	bl	8000b64 <HAL_InitTick>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	e001      	b.n	8000b58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b54:	f7ff fe84 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b58:	79fb      	ldrb	r3, [r7, #7]

}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_InitTick+0x68>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d022      	beq.n	8000bbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_InitTick+0x6c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_InitTick+0x68>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 f89c 	bl	8002cca <HAL_SYSTICK_Config>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d10f      	bne.n	8000bb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	d809      	bhi.n	8000bb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba6:	f002 f868 	bl	8002c7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_InitTick+0x70>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	e007      	b.n	8000bc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e004      	b.n	8000bc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e001      	b.n	8000bc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_IncTick+0x1c>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x20>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <HAL_IncTick+0x1c>)
 8000be8:	6013      	str	r3, [r2, #0]
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	20000178 	.word	0x20000178
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000178 	.word	0x20000178

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d004      	beq.n	8000c38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_Delay+0x40>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4413      	add	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c38:	bf00      	nop
 8000c3a:	f7ff ffdf 	bl	8000bfc <HAL_GetTick>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d8f7      	bhi.n	8000c3a <HAL_Delay+0x26>
  {
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000008 	.word	0x20000008

08000c58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	609a      	str	r2, [r3, #8]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	431a      	orrs	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	609a      	str	r2, [r3, #8]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3360      	adds	r3, #96	; 0x60
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <LL_ADC_SetOffset+0x44>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000cf8:	bf00      	nop
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	03fff000 	.word	0x03fff000

08000d08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3360      	adds	r3, #96	; 0x60
 8000d16:	461a      	mov	r2, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3360      	adds	r3, #96	; 0x60
 8000d44:	461a      	mov	r2, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b087      	sub	sp, #28
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3360      	adds	r3, #96	; 0x60
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000d94:	bf00      	nop
 8000d96:	371c      	adds	r7, #28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3360      	adds	r3, #96	; 0x60
 8000db0:	461a      	mov	r2, r3
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000dca:	bf00      	nop
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	615a      	str	r2, [r3, #20]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b087      	sub	sp, #28
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3330      	adds	r3, #48	; 0x30
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	4413      	add	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	f003 031f 	and.w	r3, r3, #31
 8000e4c:	211f      	movs	r1, #31
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	401a      	ands	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	0e9b      	lsrs	r3, r3, #26
 8000e5a:	f003 011f 	and.w	r1, r3, #31
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	f003 031f 	and.w	r3, r3, #31
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e6e:	bf00      	nop
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3314      	adds	r3, #20
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	0e5b      	lsrs	r3, r3, #25
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	0d1b      	lsrs	r3, r3, #20
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	2107      	movs	r1, #7
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	0d1b      	lsrs	r3, r3, #20
 8000eda:	f003 031f 	and.w	r3, r3, #31
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000eea:	bf00      	nop
 8000eec:	371c      	adds	r7, #28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0318 	and.w	r3, r3, #24
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f1c:	40d9      	lsrs	r1, r3
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	400b      	ands	r3, r1
 8000f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f26:	431a      	orrs	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	0007ffff 	.word	0x0007ffff

08000f40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f003 031f 	and.w	r3, r3, #31
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6093      	str	r3, [r2, #8]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fb0:	d101      	bne.n	8000fb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001000:	d101      	bne.n	8001006 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001050:	f043 0202 	orr.w	r2, r3, #2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <LL_ADC_IsEnabled+0x18>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <LL_ADC_IsEnabled+0x1a>
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d101      	bne.n	80010a2 <LL_ADC_IsDisableOngoing+0x18>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <LL_ADC_IsDisableOngoing+0x1a>
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c4:	f043 0204 	orr.w	r2, r3, #4
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d101      	bne.n	80010f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b08      	cmp	r3, #8
 8001110:	d101      	bne.n	8001116 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e1a9      	b.n	8001492 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff fbab 	bl	80008a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff19 	bl	8000f9c <LL_ADC_IsDeepPowerDownEnabled>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff feff 	bl	8000f78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff34 	bl	8000fec <LL_ADC_IsInternalRegulatorEnabled>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d115      	bne.n	80011b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff18 	bl	8000fc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001194:	4b9c      	ldr	r3, [pc, #624]	; (8001408 <HAL_ADC_Init+0x2e4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	099b      	lsrs	r3, r3, #6
 800119a:	4a9c      	ldr	r2, [pc, #624]	; (800140c <HAL_ADC_Init+0x2e8>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	099b      	lsrs	r3, r3, #6
 80011a2:	3301      	adds	r3, #1
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011a8:	e002      	b.n	80011b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f9      	bne.n	80011aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff16 	bl	8000fec <LL_ADC_IsInternalRegulatorEnabled>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10d      	bne.n	80011e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ca:	f043 0210 	orr.w	r2, r3, #16
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff76 	bl	80010d8 <LL_ADC_REG_IsConversionOngoing>
 80011ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f040 8142 	bne.w	8001480 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 813e 	bne.w	8001480 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800120c:	f043 0202 	orr.w	r2, r3, #2
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff23 	bl	8001064 <LL_ADC_IsEnabled>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d141      	bne.n	80012a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800122c:	d004      	beq.n	8001238 <HAL_ADC_Init+0x114>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a77      	ldr	r2, [pc, #476]	; (8001410 <HAL_ADC_Init+0x2ec>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d10f      	bne.n	8001258 <HAL_ADC_Init+0x134>
 8001238:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800123c:	f7ff ff12 	bl	8001064 <LL_ADC_IsEnabled>
 8001240:	4604      	mov	r4, r0
 8001242:	4873      	ldr	r0, [pc, #460]	; (8001410 <HAL_ADC_Init+0x2ec>)
 8001244:	f7ff ff0e 	bl	8001064 <LL_ADC_IsEnabled>
 8001248:	4603      	mov	r3, r0
 800124a:	4323      	orrs	r3, r4
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	e012      	b.n	800127e <HAL_ADC_Init+0x15a>
 8001258:	486e      	ldr	r0, [pc, #440]	; (8001414 <HAL_ADC_Init+0x2f0>)
 800125a:	f7ff ff03 	bl	8001064 <LL_ADC_IsEnabled>
 800125e:	4604      	mov	r4, r0
 8001260:	486d      	ldr	r0, [pc, #436]	; (8001418 <HAL_ADC_Init+0x2f4>)
 8001262:	f7ff feff 	bl	8001064 <LL_ADC_IsEnabled>
 8001266:	4603      	mov	r3, r0
 8001268:	431c      	orrs	r4, r3
 800126a:	486c      	ldr	r0, [pc, #432]	; (800141c <HAL_ADC_Init+0x2f8>)
 800126c:	f7ff fefa 	bl	8001064 <LL_ADC_IsEnabled>
 8001270:	4603      	mov	r3, r0
 8001272:	4323      	orrs	r3, r4
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf0c      	ite	eq
 8001278:	2301      	moveq	r3, #1
 800127a:	2300      	movne	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d012      	beq.n	80012a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800128a:	d004      	beq.n	8001296 <HAL_ADC_Init+0x172>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a5f      	ldr	r2, [pc, #380]	; (8001410 <HAL_ADC_Init+0x2ec>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_ADC_Init+0x176>
 8001296:	4a62      	ldr	r2, [pc, #392]	; (8001420 <HAL_ADC_Init+0x2fc>)
 8001298:	e000      	b.n	800129c <HAL_ADC_Init+0x178>
 800129a:	4a62      	ldr	r2, [pc, #392]	; (8001424 <HAL_ADC_Init+0x300>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4610      	mov	r0, r2
 80012a4:	f7ff fcd8 	bl	8000c58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7f5b      	ldrb	r3, [r3, #29]
 80012ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80012b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80012be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d106      	bne.n	80012e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	3b01      	subs	r3, #1
 80012dc:	045b      	lsls	r3, r3, #17
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d009      	beq.n	8001300 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <HAL_ADC_Init+0x304>)
 8001308:	4013      	ands	r3, r2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	430b      	orrs	r3, r1
 8001312:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fee5 	bl	80010fe <LL_ADC_INJ_IsConversionOngoing>
 8001334:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d17f      	bne.n	800143c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d17c      	bne.n	800143c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001346:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800134e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800135e:	f023 0302 	bic.w	r3, r3, #2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	430b      	orrs	r3, r1
 800136a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d017      	beq.n	80013a4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001382:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800138c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6911      	ldr	r1, [r2, #16]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	430b      	orrs	r3, r1
 800139e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80013a2:	e013      	b.n	80013cc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d12a      	bne.n	800142c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013ec:	4311      	orrs	r1, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013f2:	4311      	orrs	r1, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013f8:	430a      	orrs	r2, r1
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	611a      	str	r2, [r3, #16]
 8001406:	e019      	b.n	800143c <HAL_ADC_Init+0x318>
 8001408:	20000000 	.word	0x20000000
 800140c:	053e2d63 	.word	0x053e2d63
 8001410:	50000100 	.word	0x50000100
 8001414:	50000400 	.word	0x50000400
 8001418:	50000500 	.word	0x50000500
 800141c:	50000600 	.word	0x50000600
 8001420:	50000300 	.word	0x50000300
 8001424:	50000700 	.word	0x50000700
 8001428:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	691a      	ldr	r2, [r3, #16]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0201 	bic.w	r2, r2, #1
 800143a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10c      	bne.n	800145e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f023 010f 	bic.w	r1, r3, #15
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	1e5a      	subs	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
 800145c:	e007      	b.n	800146e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020f 	bic.w	r2, r2, #15
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	f023 0303 	bic.w	r3, r3, #3
 8001476:	f043 0201 	orr.w	r2, r3, #1
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	65da      	str	r2, [r3, #92]	; 0x5c
 800147e:	e007      	b.n	8001490 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001484:	f043 0210 	orr.w	r2, r3, #16
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001490:	7ffb      	ldrb	r3, [r7, #31]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd90      	pop	{r4, r7, pc}
 800149a:	bf00      	nop

0800149c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b0:	d004      	beq.n	80014bc <HAL_ADC_Start_DMA+0x20>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a5a      	ldr	r2, [pc, #360]	; (8001620 <HAL_ADC_Start_DMA+0x184>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_Start_DMA+0x24>
 80014bc:	4b59      	ldr	r3, [pc, #356]	; (8001624 <HAL_ADC_Start_DMA+0x188>)
 80014be:	e000      	b.n	80014c2 <HAL_ADC_Start_DMA+0x26>
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_ADC_Start_DMA+0x18c>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fd3c 	bl	8000f40 <LL_ADC_GetMultimode>
 80014c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fe02 	bl	80010d8 <LL_ADC_REG_IsConversionOngoing>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 809b 	bne.w	8001612 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Start_DMA+0x4e>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e096      	b.n	8001618 <HAL_ADC_Start_DMA+0x17c>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a4d      	ldr	r2, [pc, #308]	; (800162c <HAL_ADC_Start_DMA+0x190>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d008      	beq.n	800150e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d002      	beq.n	800150e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2b09      	cmp	r3, #9
 800150c:	d17a      	bne.n	8001604 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 ff60 	bl	80023d4 <ADC_Enable>
 8001514:	4603      	mov	r3, r0
 8001516:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d16d      	bne.n	80015fa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001522:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001526:	f023 0301 	bic.w	r3, r3, #1
 800152a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <HAL_ADC_Start_DMA+0x184>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d009      	beq.n	8001550 <HAL_ADC_Start_DMA+0xb4>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a3b      	ldr	r2, [pc, #236]	; (8001630 <HAL_ADC_Start_DMA+0x194>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d002      	beq.n	800154c <HAL_ADC_Start_DMA+0xb0>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	e003      	b.n	8001554 <HAL_ADC_Start_DMA+0xb8>
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_ADC_Start_DMA+0x198>)
 800154e:	e001      	b.n	8001554 <HAL_ADC_Start_DMA+0xb8>
 8001550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	4293      	cmp	r3, r2
 800155a:	d002      	beq.n	8001562 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	f023 0206 	bic.w	r2, r3, #6
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	661a      	str	r2, [r3, #96]	; 0x60
 8001586:	e002      	b.n	800158e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	4a29      	ldr	r2, [pc, #164]	; (8001638 <HAL_ADC_Start_DMA+0x19c>)
 8001594:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	4a28      	ldr	r2, [pc, #160]	; (800163c <HAL_ADC_Start_DMA+0x1a0>)
 800159c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_ADC_Start_DMA+0x1a4>)
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	221c      	movs	r2, #28
 80015ac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0210 	orr.w	r2, r2, #16
 80015c4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0201 	orr.w	r2, r2, #1
 80015d4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3340      	adds	r3, #64	; 0x40
 80015e0:	4619      	mov	r1, r3
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f001 fb7c 	bl	8002ce2 <HAL_DMA_Start_IT>
 80015ea:	4603      	mov	r3, r0
 80015ec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fd5c 	bl	80010b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80015f8:	e00d      	b.n	8001616 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001602:	e008      	b.n	8001616 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001610:	e001      	b.n	8001616 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001612:	2302      	movs	r3, #2
 8001614:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001616:	7dfb      	ldrb	r3, [r7, #23]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	50000100 	.word	0x50000100
 8001624:	50000300 	.word	0x50000300
 8001628:	50000700 	.word	0x50000700
 800162c:	50000600 	.word	0x50000600
 8001630:	50000500 	.word	0x50000500
 8001634:	50000400 	.word	0x50000400
 8001638:	080025bf 	.word	0x080025bf
 800163c:	08002697 	.word	0x08002697
 8001640:	080026b3 	.word	0x080026b3

08001644 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800164c:	2300      	movs	r3, #0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001668:	d004      	beq.n	8001674 <HAL_ADC_IRQHandler+0x30>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a8e      	ldr	r2, [pc, #568]	; (80018a8 <HAL_ADC_IRQHandler+0x264>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_ADC_IRQHandler+0x34>
 8001674:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <HAL_ADC_IRQHandler+0x268>)
 8001676:	e000      	b.n	800167a <HAL_ADC_IRQHandler+0x36>
 8001678:	4b8d      	ldr	r3, [pc, #564]	; (80018b0 <HAL_ADC_IRQHandler+0x26c>)
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fc60 	bl	8000f40 <LL_ADC_GetMultimode>
 8001680:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d017      	beq.n	80016bc <HAL_ADC_IRQHandler+0x78>
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d012      	beq.n	80016bc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f001 f8f6 	bl	80028a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2202      	movs	r2, #2
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <HAL_ADC_IRQHandler+0x8c>
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10b      	bne.n	80016e8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8094 	beq.w	8001804 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 808e 	beq.w	8001804 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fb79 	bl	8000dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d072      	beq.n	80017f6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a64      	ldr	r2, [pc, #400]	; (80018a8 <HAL_ADC_IRQHandler+0x264>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d009      	beq.n	800172e <HAL_ADC_IRQHandler+0xea>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a65      	ldr	r2, [pc, #404]	; (80018b4 <HAL_ADC_IRQHandler+0x270>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d002      	beq.n	800172a <HAL_ADC_IRQHandler+0xe6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	e003      	b.n	8001732 <HAL_ADC_IRQHandler+0xee>
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_ADC_IRQHandler+0x274>)
 800172c:	e001      	b.n	8001732 <HAL_ADC_IRQHandler+0xee>
 800172e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	4293      	cmp	r3, r2
 8001738:	d008      	beq.n	800174c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d002      	beq.n	800174c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b09      	cmp	r3, #9
 800174a:	d104      	bne.n	8001756 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	e014      	b.n	8001780 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a53      	ldr	r2, [pc, #332]	; (80018a8 <HAL_ADC_IRQHandler+0x264>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d009      	beq.n	8001774 <HAL_ADC_IRQHandler+0x130>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a53      	ldr	r2, [pc, #332]	; (80018b4 <HAL_ADC_IRQHandler+0x270>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d002      	beq.n	8001770 <HAL_ADC_IRQHandler+0x12c>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e003      	b.n	8001778 <HAL_ADC_IRQHandler+0x134>
 8001770:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <HAL_ADC_IRQHandler+0x274>)
 8001772:	e001      	b.n	8001778 <HAL_ADC_IRQHandler+0x134>
 8001774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001778:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d135      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b08      	cmp	r3, #8
 8001796:	d12e      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fc9b 	bl	80010d8 <LL_ADC_REG_IsConversionOngoing>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d11a      	bne.n	80017de <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 020c 	bic.w	r2, r2, #12
 80017b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d112      	bne.n	80017f6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	65da      	str	r2, [r3, #92]	; 0x5c
 80017dc:	e00b      	b.n	80017f6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e2:	f043 0210 	orr.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f984 	bl	8001b04 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	220c      	movs	r2, #12
 8001802:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <HAL_ADC_IRQHandler+0x1d4>
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10b      	bne.n	8001830 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80b3 	beq.w	800198a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80ad 	beq.w	800198a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fb14 	bl	8000e7a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001852:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff facf 	bl	8000dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 800185e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_ADC_IRQHandler+0x264>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d009      	beq.n	800187e <HAL_ADC_IRQHandler+0x23a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <HAL_ADC_IRQHandler+0x270>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d002      	beq.n	800187a <HAL_ADC_IRQHandler+0x236>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e003      	b.n	8001882 <HAL_ADC_IRQHandler+0x23e>
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_ADC_IRQHandler+0x274>)
 800187c:	e001      	b.n	8001882 <HAL_ADC_IRQHandler+0x23e>
 800187e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	4293      	cmp	r3, r2
 8001888:	d008      	beq.n	800189c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2b06      	cmp	r3, #6
 8001894:	d002      	beq.n	800189c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b07      	cmp	r3, #7
 800189a:	d10f      	bne.n	80018bc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	623b      	str	r3, [r7, #32]
 80018a4:	e01f      	b.n	80018e6 <HAL_ADC_IRQHandler+0x2a2>
 80018a6:	bf00      	nop
 80018a8:	50000100 	.word	0x50000100
 80018ac:	50000300 	.word	0x50000300
 80018b0:	50000700 	.word	0x50000700
 80018b4:	50000500 	.word	0x50000500
 80018b8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a8b      	ldr	r2, [pc, #556]	; (8001af0 <HAL_ADC_IRQHandler+0x4ac>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d009      	beq.n	80018da <HAL_ADC_IRQHandler+0x296>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a8a      	ldr	r2, [pc, #552]	; (8001af4 <HAL_ADC_IRQHandler+0x4b0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d002      	beq.n	80018d6 <HAL_ADC_IRQHandler+0x292>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e003      	b.n	80018de <HAL_ADC_IRQHandler+0x29a>
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_ADC_IRQHandler+0x4b4>)
 80018d8:	e001      	b.n	80018de <HAL_ADC_IRQHandler+0x29a>
 80018da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018de:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d047      	beq.n	800197c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_ADC_IRQHandler+0x2c2>
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d03f      	beq.n	800197c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d13a      	bne.n	800197c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001910:	2b40      	cmp	r3, #64	; 0x40
 8001912:	d133      	bne.n	800197c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d12e      	bne.n	800197c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fbeb 	bl	80010fe <LL_ADC_INJ_IsConversionOngoing>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d11a      	bne.n	8001964 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800193c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d112      	bne.n	800197c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	65da      	str	r2, [r3, #92]	; 0x5c
 8001962:	e00b      	b.n	800197c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	f043 0210 	orr.w	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 ff67 	bl	8002850 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2260      	movs	r2, #96	; 0x60
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001990:	2b00      	cmp	r3, #0
 8001992:	d011      	beq.n	80019b8 <HAL_ADC_IRQHandler+0x374>
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00c      	beq.n	80019b8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f8be 	bl	8001b2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d012      	beq.n	80019e8 <HAL_ADC_IRQHandler+0x3a4>
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00d      	beq.n	80019e8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 ff4d 	bl	8002878 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d012      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x3d4>
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00d      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 ff3f 	bl	800288c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d043      	beq.n	8001aaa <HAL_ADC_IRQHandler+0x466>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03e      	beq.n	8001aaa <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001a34:	2301      	movs	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	e021      	b.n	8001a7e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d015      	beq.n	8001a6c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a48:	d004      	beq.n	8001a54 <HAL_ADC_IRQHandler+0x410>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <HAL_ADC_IRQHandler+0x4ac>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_IRQHandler+0x414>
 8001a54:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_ADC_IRQHandler+0x4b8>)
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_IRQHandler+0x416>
 8001a58:	4b29      	ldr	r3, [pc, #164]	; (8001b00 <HAL_ADC_IRQHandler+0x4bc>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa7e 	bl	8000f5c <LL_ADC_GetMultiDMATransfer>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001a66:	2301      	movs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6a:	e008      	b.n	8001a7e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d10e      	bne.n	8001aa2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a94:	f043 0202 	orr.w	r2, r3, #2
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f84f 	bl	8001b40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d018      	beq.n	8001ae6 <HAL_ADC_IRQHandler+0x4a2>
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d013      	beq.n	8001ae6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	f043 0208 	orr.w	r2, r3, #8
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ade:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 febf 	bl	8002864 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	50000100 	.word	0x50000100
 8001af4:	50000500 	.word	0x50000500
 8001af8:	50000400 	.word	0x50000400
 8001afc:	50000300 	.word	0x50000300
 8001b00:	50000700 	.word	0x50000700

08001b04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b0b6      	sub	sp, #216	; 0xd8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d102      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x24>
 8001b72:	2302      	movs	r3, #2
 8001b74:	f000 bc13 	b.w	800239e <HAL_ADC_ConfigChannel+0x84a>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff faa7 	bl	80010d8 <LL_ADC_REG_IsConversionOngoing>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 83f3 	bne.w	8002378 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6859      	ldr	r1, [r3, #4]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f7ff f93f 	bl	8000e22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fa95 	bl	80010d8 <LL_ADC_REG_IsConversionOngoing>
 8001bae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff faa1 	bl	80010fe <LL_ADC_INJ_IsConversionOngoing>
 8001bbc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f040 81d9 	bne.w	8001f7c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 81d4 	bne.w	8001f7c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001bdc:	d10f      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7ff f959 	bl	8000ea0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f8ed 	bl	8000dd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001bfc:	e00e      	b.n	8001c1c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f7ff f948 	bl	8000ea0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff f8dd 	bl	8000dd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	08db      	lsrs	r3, r3, #3
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d022      	beq.n	8001c84 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6919      	ldr	r1, [r3, #16]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c4e:	f7ff f837 	bl	8000cc0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6919      	ldr	r1, [r3, #16]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	f7ff f883 	bl	8000d6a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x126>
 8001c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c78:	e000      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x128>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f7ff f88f 	bl	8000da0 <LL_ADC_SetOffsetSaturation>
 8001c82:	e17b      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f83c 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x15c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f831 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	e01e      	b.n	8001cee <HAL_ADC_ConfigChannel+0x19a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f826 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e004      	b.n	8001cec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001ce2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x1b2>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	e018      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1e4>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001d22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e004      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fff5 	bl	8000d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2101      	movs	r1, #1
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ffd9 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x222>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ffce 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	e01e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x260>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe ffc3 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e004      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001da8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x278>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	e018      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x2aa>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e004      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d106      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff92 	bl	8000d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2102      	movs	r1, #2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe ff76 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10a      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x2e8>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ff6b 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	f003 021f 	and.w	r2, r3, #31
 8001e3a:	e01e      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x326>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2102      	movs	r1, #2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe ff60 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e004      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001e6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e72:	fab3 f383 	clz	r3, r3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d105      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x33e>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	e016      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x36c>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e004      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff31 	bl	8000d34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe ff15 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x3aa>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2103      	movs	r1, #3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff0a 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	e017      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x3da>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2103      	movs	r1, #3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe feff 	bl	8000d08 <LL_ADC_GetOffsetChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f18:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001f1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e003      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x3f2>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0e9b      	lsrs	r3, r3, #26
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	e011      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x416>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e003      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d106      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	2103      	movs	r1, #3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fedc 	bl	8000d34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f86f 	bl	8001064 <LL_ADC_IsEnabled>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 813d 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f7fe ffac 	bl	8000ef8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4aa2      	ldr	r2, [pc, #648]	; (8002230 <HAL_ADC_ConfigChannel+0x6dc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	f040 812e 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x480>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	bf94      	ite	ls
 8001fcc:	2301      	movls	r3, #1
 8001fce:	2300      	movhi	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	e019      	b.n	8002008 <HAL_ADC_ConfigChannel+0x4b4>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fe4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001fec:	2320      	movs	r3, #32
 8001fee:	e003      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	bf94      	ite	ls
 8002002:	2301      	movls	r3, #1
 8002004:	2300      	movhi	r3, #0
 8002006:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002008:	2b00      	cmp	r3, #0
 800200a:	d079      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x4d4>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	3301      	adds	r3, #1
 8002020:	069b      	lsls	r3, r3, #26
 8002022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002026:	e015      	b.n	8002054 <HAL_ADC_ConfigChannel+0x500>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002038:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800203a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e003      	b.n	800204c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	069b      	lsls	r3, r3, #26
 8002050:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x520>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	3301      	adds	r3, #1
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2101      	movs	r1, #1
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	e017      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x550>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002084:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800208c:	2320      	movs	r3, #32
 800208e:	e003      	b.n	8002098 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	3301      	adds	r3, #1
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	2101      	movs	r1, #1
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	ea42 0103 	orr.w	r1, r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x576>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	3301      	adds	r3, #1
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	051b      	lsls	r3, r3, #20
 80020c8:	e018      	b.n	80020fc <HAL_ADC_ConfigChannel+0x5a8>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80020dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e003      	b.n	80020ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80020e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020fc:	430b      	orrs	r3, r1
 80020fe:	e07e      	b.n	80021fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_ADC_ConfigChannel+0x5c8>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	3301      	adds	r3, #1
 8002114:	069b      	lsls	r3, r3, #26
 8002116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211a:	e015      	b.n	8002148 <HAL_ADC_ConfigChannel+0x5f4>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e003      	b.n	8002140 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	3301      	adds	r3, #1
 8002142:	069b      	lsls	r3, r3, #26
 8002144:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x614>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	0e9b      	lsrs	r3, r3, #26
 800215a:	3301      	adds	r3, #1
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	e017      	b.n	8002198 <HAL_ADC_ConfigChannel+0x644>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	61fb      	str	r3, [r7, #28]
  return result;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e003      	b.n	800218c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	ea42 0103 	orr.w	r1, r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10d      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x670>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	3301      	adds	r3, #1
 80021b0:	f003 021f 	and.w	r2, r3, #31
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	3b1e      	subs	r3, #30
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c2:	e01b      	b.n	80021fc <HAL_ADC_ConfigChannel+0x6a8>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	613b      	str	r3, [r7, #16]
  return result;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80021dc:	2320      	movs	r3, #32
 80021de:	e003      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 021f 	and.w	r2, r3, #31
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3b1e      	subs	r3, #30
 80021f6:	051b      	lsls	r3, r3, #20
 80021f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fe4c 	bl	8000ea0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_ADC_ConfigChannel+0x6e0>)
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80be 	beq.w	8002392 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800221e:	d004      	beq.n	800222a <HAL_ADC_ConfigChannel+0x6d6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_ADC_ConfigChannel+0x6e4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10a      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x6ec>
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_ADC_ConfigChannel+0x6e8>)
 800222c:	e009      	b.n	8002242 <HAL_ADC_ConfigChannel+0x6ee>
 800222e:	bf00      	nop
 8002230:	407f0000 	.word	0x407f0000
 8002234:	80080000 	.word	0x80080000
 8002238:	50000100 	.word	0x50000100
 800223c:	50000300 	.word	0x50000300
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_ADC_ConfigChannel+0x854>)
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fd2e 	bl	8000ca4 <LL_ADC_GetCommonPathInternalCh>
 8002248:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a56      	ldr	r2, [pc, #344]	; (80023ac <HAL_ADC_ConfigChannel+0x858>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d004      	beq.n	8002260 <HAL_ADC_ConfigChannel+0x70c>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <HAL_ADC_ConfigChannel+0x85c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d13a      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d134      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002274:	d005      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x72e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a4e      	ldr	r2, [pc, #312]	; (80023b4 <HAL_ADC_ConfigChannel+0x860>)
 800227c:	4293      	cmp	r3, r2
 800227e:	f040 8085 	bne.w	800238c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800228a:	d004      	beq.n	8002296 <HAL_ADC_ConfigChannel+0x742>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a49      	ldr	r2, [pc, #292]	; (80023b8 <HAL_ADC_ConfigChannel+0x864>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x746>
 8002296:	4a49      	ldr	r2, [pc, #292]	; (80023bc <HAL_ADC_ConfigChannel+0x868>)
 8002298:	e000      	b.n	800229c <HAL_ADC_ConfigChannel+0x748>
 800229a:	4a43      	ldr	r2, [pc, #268]	; (80023a8 <HAL_ADC_ConfigChannel+0x854>)
 800229c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a4:	4619      	mov	r1, r3
 80022a6:	4610      	mov	r0, r2
 80022a8:	f7fe fce9 	bl	8000c7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022ac:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <HAL_ADC_ConfigChannel+0x86c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	4a44      	ldr	r2, [pc, #272]	; (80023c4 <HAL_ADC_ConfigChannel+0x870>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022c6:	e002      	b.n	80022ce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022d4:	e05a      	b.n	800238c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a3b      	ldr	r2, [pc, #236]	; (80023c8 <HAL_ADC_ConfigChannel+0x874>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d125      	bne.n	800232c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d11f      	bne.n	800232c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a31      	ldr	r2, [pc, #196]	; (80023b8 <HAL_ADC_ConfigChannel+0x864>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d104      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x7ac>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a34      	ldr	r2, [pc, #208]	; (80023cc <HAL_ADC_ConfigChannel+0x878>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d047      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002308:	d004      	beq.n	8002314 <HAL_ADC_ConfigChannel+0x7c0>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <HAL_ADC_ConfigChannel+0x864>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x7c4>
 8002314:	4a29      	ldr	r2, [pc, #164]	; (80023bc <HAL_ADC_ConfigChannel+0x868>)
 8002316:	e000      	b.n	800231a <HAL_ADC_ConfigChannel+0x7c6>
 8002318:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <HAL_ADC_ConfigChannel+0x854>)
 800231a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	4619      	mov	r1, r3
 8002324:	4610      	mov	r0, r2
 8002326:	f7fe fcaa 	bl	8000c7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800232a:	e031      	b.n	8002390 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_ADC_ConfigChannel+0x87c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12d      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d127      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_ADC_ConfigChannel+0x864>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d022      	beq.n	8002392 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002354:	d004      	beq.n	8002360 <HAL_ADC_ConfigChannel+0x80c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <HAL_ADC_ConfigChannel+0x864>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x810>
 8002360:	4a16      	ldr	r2, [pc, #88]	; (80023bc <HAL_ADC_ConfigChannel+0x868>)
 8002362:	e000      	b.n	8002366 <HAL_ADC_ConfigChannel+0x812>
 8002364:	4a10      	ldr	r2, [pc, #64]	; (80023a8 <HAL_ADC_ConfigChannel+0x854>)
 8002366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800236a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800236e:	4619      	mov	r1, r3
 8002370:	4610      	mov	r0, r2
 8002372:	f7fe fc84 	bl	8000c7e <LL_ADC_SetCommonPathInternalCh>
 8002376:	e00c      	b.n	8002392 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800238a:	e002      	b.n	8002392 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800238c:	bf00      	nop
 800238e:	e000      	b.n	8002392 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002390:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800239a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800239e:	4618      	mov	r0, r3
 80023a0:	37d8      	adds	r7, #216	; 0xd8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	50000700 	.word	0x50000700
 80023ac:	c3210000 	.word	0xc3210000
 80023b0:	90c00010 	.word	0x90c00010
 80023b4:	50000600 	.word	0x50000600
 80023b8:	50000100 	.word	0x50000100
 80023bc:	50000300 	.word	0x50000300
 80023c0:	20000000 	.word	0x20000000
 80023c4:	053e2d63 	.word	0x053e2d63
 80023c8:	c7520000 	.word	0xc7520000
 80023cc:	50000500 	.word	0x50000500
 80023d0:	cb840000 	.word	0xcb840000

080023d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fe3d 	bl	8001064 <LL_ADC_IsEnabled>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d176      	bne.n	80024de <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <ADC_Enable+0x114>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e062      	b.n	80024e0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fdf8 	bl	8001014 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242c:	d004      	beq.n	8002438 <ADC_Enable+0x64>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2e      	ldr	r2, [pc, #184]	; (80024ec <ADC_Enable+0x118>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <ADC_Enable+0x68>
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <ADC_Enable+0x11c>)
 800243a:	e000      	b.n	800243e <ADC_Enable+0x6a>
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <ADC_Enable+0x120>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fc30 	bl	8000ca4 <LL_ADC_GetCommonPathInternalCh>
 8002444:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800244a:	2b00      	cmp	r3, #0
 800244c:	d013      	beq.n	8002476 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244e:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <ADC_Enable+0x124>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <ADC_Enable+0x128>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002468:	e002      	b.n	8002470 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002476:	f7fe fbc1 	bl	8000bfc <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800247c:	e028      	b.n	80024d0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fdee 	bl	8001064 <LL_ADC_IsEnabled>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d104      	bne.n	8002498 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fdbe 	bl	8001014 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002498:	f7fe fbb0 	bl	8000bfc <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d914      	bls.n	80024d0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d00d      	beq.n	80024d0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	f043 0210 	orr.w	r2, r3, #16
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e007      	b.n	80024e0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d1cf      	bne.n	800247e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	8000003f 	.word	0x8000003f
 80024ec:	50000100 	.word	0x50000100
 80024f0:	50000300 	.word	0x50000300
 80024f4:	50000700 	.word	0x50000700
 80024f8:	20000000 	.word	0x20000000
 80024fc:	053e2d63 	.word	0x053e2d63

08002500 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fdbc 	bl	800108a <LL_ADC_IsDisableOngoing>
 8002512:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fda3 	bl	8001064 <LL_ADC_IsEnabled>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d047      	beq.n	80025b4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d144      	bne.n	80025b4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030d 	and.w	r3, r3, #13
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10c      	bne.n	8002552 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fd7d 	bl	800103c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2203      	movs	r2, #3
 8002548:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800254a:	f7fe fb57 	bl	8000bfc <HAL_GetTick>
 800254e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002550:	e029      	b.n	80025a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	f043 0210 	orr.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e023      	b.n	80025b6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800256e:	f7fe fb45 	bl	8000bfc <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d914      	bls.n	80025a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00d      	beq.n	80025a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e007      	b.n	80025b6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1dc      	bne.n	800256e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d14b      	bne.n	8002670 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d021      	beq.n	8002636 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fc00 	bl	8000dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d032      	beq.n	8002668 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d12b      	bne.n	8002668 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11f      	bne.n	8002668 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	f043 0201 	orr.w	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	65da      	str	r2, [r3, #92]	; 0x5c
 8002634:	e018      	b.n	8002668 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d111      	bne.n	8002668 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff fa4b 	bl	8001b04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800266e:	e00e      	b.n	800268e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fa5f 	bl	8001b40 <HAL_ADC_ErrorCallback>
}
 8002682:	e004      	b.n	800268e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fa37 	bl	8001b18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d0:	f043 0204 	orr.w	r2, r3, #4
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff fa31 	bl	8001b40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <LL_ADC_IsEnabled>:
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <LL_ADC_IsEnabled+0x18>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <LL_ADC_IsEnabled+0x1a>
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_ADC_StartCalibration>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800271e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002728:	4313      	orrs	r3, r2
 800272a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	609a      	str	r2, [r3, #8]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <LL_ADC_IsCalibrationOnGoing>:
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800274e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002752:	d101      	bne.n	8002758 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_ADC_REG_IsConversionOngoing>:
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b04      	cmp	r3, #4
 8002778:	d101      	bne.n	800277e <LL_ADC_REG_IsConversionOngoing+0x18>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADCEx_Calibration_Start+0x1c>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e04d      	b.n	8002844 <HAL_ADCEx_Calibration_Start+0xb8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff fea5 	bl	8002500 <ADC_Disable>
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d136      	bne.n	800282e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c8:	f023 0302 	bic.w	r3, r3, #2
 80027cc:	f043 0202 	orr.w	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff96 	bl	800270c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027e0:	e014      	b.n	800280c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4a18      	ldr	r2, [pc, #96]	; (800284c <HAL_ADCEx_Calibration_Start+0xc0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d90d      	bls.n	800280c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	f023 0312 	bic.w	r3, r3, #18
 80027f8:	f043 0210 	orr.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e01b      	b.n	8002844 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff94 	bl	800273e <LL_ADC_IsCalibrationOnGoing>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e2      	bne.n	80027e2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	f023 0303 	bic.w	r3, r3, #3
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	65da      	str	r2, [r3, #92]	; 0x5c
 800282c:	e005      	b.n	800283a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002832:	f043 0210 	orr.w	r2, r3, #16
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0004de01 	.word	0x0004de01

08002850 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b0a1      	sub	sp, #132	; 0x84
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0e7      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028da:	2300      	movs	r3, #0
 80028dc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028de:	2300      	movs	r3, #0
 80028e0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ea:	d102      	bne.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	e009      	b.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6e      	ldr	r2, [pc, #440]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d102      	bne.n	8002902 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80028fc:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	e001      	b.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0be      	b.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff1d 	bl	8002766 <LL_ADC_REG_IsConversionOngoing>
 800292c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff17 	bl	8002766 <LL_ADC_REG_IsConversionOngoing>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 80a0 	bne.w	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 809c 	bne.w	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002950:	d004      	beq.n	800295c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a55      	ldr	r2, [pc, #340]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800295c:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800295e:	e000      	b.n	8002962 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002960:	4b56      	ldr	r3, [pc, #344]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002962:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d04b      	beq.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800296c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800297e:	035b      	lsls	r3, r3, #13
 8002980:	430b      	orrs	r3, r1
 8002982:	431a      	orrs	r2, r3
 8002984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002986:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002990:	d004      	beq.n	800299c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a45      	ldr	r2, [pc, #276]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d10f      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800299c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029a0:	f7ff fea1 	bl	80026e6 <LL_ADC_IsEnabled>
 80029a4:	4604      	mov	r4, r0
 80029a6:	4841      	ldr	r0, [pc, #260]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029a8:	f7ff fe9d 	bl	80026e6 <LL_ADC_IsEnabled>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4323      	orrs	r3, r4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e012      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80029bc:	483c      	ldr	r0, [pc, #240]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029be:	f7ff fe92 	bl	80026e6 <LL_ADC_IsEnabled>
 80029c2:	4604      	mov	r4, r0
 80029c4:	483b      	ldr	r0, [pc, #236]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029c6:	f7ff fe8e 	bl	80026e6 <LL_ADC_IsEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	431c      	orrs	r4, r3
 80029ce:	483c      	ldr	r0, [pc, #240]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80029d0:	f7ff fe89 	bl	80026e6 <LL_ADC_IsEnabled>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4323      	orrs	r3, r4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d056      	beq.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029ee:	f023 030f 	bic.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	6811      	ldr	r1, [r2, #0]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	6892      	ldr	r2, [r2, #8]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a00:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a02:	e047      	b.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a18:	d004      	beq.n	8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d10f      	bne.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002a24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a28:	f7ff fe5d 	bl	80026e6 <LL_ADC_IsEnabled>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	481f      	ldr	r0, [pc, #124]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a30:	f7ff fe59 	bl	80026e6 <LL_ADC_IsEnabled>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4323      	orrs	r3, r4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e012      	b.n	8002a6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002a44:	481a      	ldr	r0, [pc, #104]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a46:	f7ff fe4e 	bl	80026e6 <LL_ADC_IsEnabled>
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	4819      	ldr	r0, [pc, #100]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a4e:	f7ff fe4a 	bl	80026e6 <LL_ADC_IsEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	431c      	orrs	r4, r3
 8002a56:	481a      	ldr	r0, [pc, #104]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a58:	f7ff fe45 	bl	80026e6 <LL_ADC_IsEnabled>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4323      	orrs	r3, r4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a76:	f023 030f 	bic.w	r3, r3, #15
 8002a7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a7c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a7e:	e009      	b.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a92:	e000      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3784      	adds	r7, #132	; 0x84
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	50000100 	.word	0x50000100
 8002ab0:	50000400 	.word	0x50000400
 8002ab4:	50000500 	.word	0x50000500
 8002ab8:	50000300 	.word	0x50000300
 8002abc:	50000700 	.word	0x50000700
 8002ac0:	50000600 	.word	0x50000600

08002ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	db0b      	blt.n	8002b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4907      	ldr	r1, [pc, #28]	; (8002b60 <__NVIC_EnableIRQ+0x38>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2001      	movs	r0, #1
 8002b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000e100 	.word	0xe000e100

08002b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db0a      	blt.n	8002b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	490c      	ldr	r1, [pc, #48]	; (8002bb0 <__NVIC_SetPriority+0x4c>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	0112      	lsls	r2, r2, #4
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b8c:	e00a      	b.n	8002ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <__NVIC_SetPriority+0x50>)
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	3b04      	subs	r3, #4
 8002b9c:	0112      	lsls	r2, r2, #4
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	761a      	strb	r2, [r3, #24]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000e100 	.word	0xe000e100
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f1c3 0307 	rsb	r3, r3, #7
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	bf28      	it	cs
 8002bd6:	2304      	movcs	r3, #4
 8002bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d902      	bls.n	8002be8 <NVIC_EncodePriority+0x30>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3b03      	subs	r3, #3
 8002be6:	e000      	b.n	8002bea <NVIC_EncodePriority+0x32>
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	401a      	ands	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c00:	f04f 31ff 	mov.w	r1, #4294967295
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	43d9      	mvns	r1, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	4313      	orrs	r3, r2
         );
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c30:	d301      	bcc.n	8002c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00f      	b.n	8002c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <SysTick_Config+0x40>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c3e:	210f      	movs	r1, #15
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f7ff ff8e 	bl	8002b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <SysTick_Config+0x40>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c4e:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <SysTick_Config+0x40>)
 8002c50:	2207      	movs	r2, #7
 8002c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	e000e010 	.word	0xe000e010

08002c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff ff29 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b086      	sub	sp, #24
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c88:	f7ff ff40 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6978      	ldr	r0, [r7, #20]
 8002c94:	f7ff ff90 	bl	8002bb8 <NVIC_EncodePriority>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff5f 	bl	8002b64 <__NVIC_SetPriority>
}
 8002ca6:	bf00      	nop
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff33 	bl	8002b28 <__NVIC_EnableIRQ>
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ffa4 	bl	8002c20 <SysTick_Config>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_DMA_Start_IT+0x20>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e066      	b.n	8002dd0 <HAL_DMA_Start_IT+0xee>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d155      	bne.n	8002dc2 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f84c 	bl	8002dd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 020e 	orr.w	r2, r2, #14
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e00f      	b.n	8002d7a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0204 	bic.w	r2, r2, #4
 8002d68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 020a 	orr.w	r2, r2, #10
 8002d78:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d96:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e005      	b.n	8002dce <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2101      	movs	r1, #1
 8002e10:	fa01 f202 	lsl.w	r2, r1, r2
 8002e14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d108      	bne.n	8002e38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e36:	e007      	b.n	8002e48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e62:	e15a      	b.n	800311a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2101      	movs	r1, #1
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 814c 	beq.w	8003114 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d005      	beq.n	8002e94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d130      	bne.n	8002ef6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eca:	2201      	movs	r2, #1
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0201 	and.w	r2, r3, #1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d017      	beq.n	8002f32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d123      	bne.n	8002f86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	08da      	lsrs	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	3208      	adds	r2, #8
 8002f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	08da      	lsrs	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3208      	adds	r2, #8
 8002f80:	6939      	ldr	r1, [r7, #16]
 8002f82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	2203      	movs	r2, #3
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 0203 	and.w	r2, r3, #3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 80a6 	beq.w	8003114 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc8:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <HAL_GPIO_Init+0x2e4>)
 8002fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fcc:	4a5a      	ldr	r2, [pc, #360]	; (8003138 <HAL_GPIO_Init+0x2e4>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd4:	4b58      	ldr	r3, [pc, #352]	; (8003138 <HAL_GPIO_Init+0x2e4>)
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fe0:	4a56      	ldr	r2, [pc, #344]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	220f      	movs	r2, #15
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4013      	ands	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800300a:	d01f      	beq.n	800304c <HAL_GPIO_Init+0x1f8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a4c      	ldr	r2, [pc, #304]	; (8003140 <HAL_GPIO_Init+0x2ec>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d019      	beq.n	8003048 <HAL_GPIO_Init+0x1f4>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_GPIO_Init+0x2f0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d013      	beq.n	8003044 <HAL_GPIO_Init+0x1f0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <HAL_GPIO_Init+0x2f4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00d      	beq.n	8003040 <HAL_GPIO_Init+0x1ec>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a49      	ldr	r2, [pc, #292]	; (800314c <HAL_GPIO_Init+0x2f8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <HAL_GPIO_Init+0x1e8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a48      	ldr	r2, [pc, #288]	; (8003150 <HAL_GPIO_Init+0x2fc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d101      	bne.n	8003038 <HAL_GPIO_Init+0x1e4>
 8003034:	2305      	movs	r3, #5
 8003036:	e00a      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 8003038:	2306      	movs	r3, #6
 800303a:	e008      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 800303c:	2304      	movs	r3, #4
 800303e:	e006      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 8003040:	2303      	movs	r3, #3
 8003042:	e004      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 8003044:	2302      	movs	r3, #2
 8003046:	e002      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_GPIO_Init+0x1fa>
 800304c:	2300      	movs	r3, #0
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	f002 0203 	and.w	r2, r2, #3
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	4093      	lsls	r3, r2
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305e:	4937      	ldr	r1, [pc, #220]	; (800313c <HAL_GPIO_Init+0x2e8>)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	3302      	adds	r3, #2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <HAL_GPIO_Init+0x300>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003090:	4a30      	ldr	r2, [pc, #192]	; (8003154 <HAL_GPIO_Init+0x300>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_GPIO_Init+0x300>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030ba:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_GPIO_Init+0x300>)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030c0:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_GPIO_Init+0x300>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <HAL_GPIO_Init+0x300>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030ea:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <HAL_GPIO_Init+0x300>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800310e:	4a11      	ldr	r2, [pc, #68]	; (8003154 <HAL_GPIO_Init+0x300>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3301      	adds	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f ae9d 	bne.w	8002e64 <HAL_GPIO_Init+0x10>
  }
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40021000 	.word	0x40021000
 800313c:	40010000 	.word	0x40010000
 8003140:	48000400 	.word	0x48000400
 8003144:	48000800 	.word	0x48000800
 8003148:	48000c00 	.word	0x48000c00
 800314c:	48001000 	.word	0x48001000
 8003150:	48001400 	.word	0x48001400
 8003154:	40010400 	.word	0x40010400

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003174:	e002      	b.n	800317c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4013      	ands	r3, r2
 80031a0:	041a      	lsls	r2, r3, #16
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43d9      	mvns	r1, r3
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	400b      	ands	r3, r1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	619a      	str	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d006      	beq.n	80031e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031d2:	4a05      	ldr	r2, [pc, #20]	; (80031e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 f806 	bl	80031ec <HAL_GPIO_EXTI_Callback>
  }
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40010400 	.word	0x40010400

080031ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d141      	bne.n	8003296 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003212:	4b4b      	ldr	r3, [pc, #300]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800321a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321e:	d131      	bne.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003220:	4b47      	ldr	r3, [pc, #284]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003226:	4a46      	ldr	r2, [pc, #280]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800322c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003230:	4b43      	ldr	r3, [pc, #268]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003238:	4a41      	ldr	r2, [pc, #260]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800323e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003240:	4b40      	ldr	r3, [pc, #256]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2232      	movs	r2, #50	; 0x32
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	4a3f      	ldr	r2, [pc, #252]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	0c9b      	lsrs	r3, r3, #18
 8003252:	3301      	adds	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003256:	e002      	b.n	800325e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3b01      	subs	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800325e:	4b38      	ldr	r3, [pc, #224]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800326a:	d102      	bne.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f2      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003272:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d158      	bne.n	8003332 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e057      	b.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003284:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800328a:	4a2d      	ldr	r2, [pc, #180]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003294:	e04d      	b.n	8003332 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800329c:	d141      	bne.n	8003322 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800329e:	4b28      	ldr	r3, [pc, #160]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032aa:	d131      	bne.n	8003310 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ac:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b2:	4a23      	ldr	r2, [pc, #140]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032bc:	4b20      	ldr	r3, [pc, #128]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2232      	movs	r2, #50	; 0x32
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	0c9b      	lsrs	r3, r3, #18
 80032de:	3301      	adds	r3, #1
 80032e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032e2:	e002      	b.n	80032ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d102      	bne.n	80032fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f2      	bne.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d112      	bne.n	8003332 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e011      	b.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003320:	e007      	b.n	8003332 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003330:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40007000 	.word	0x40007000
 8003344:	20000000 	.word	0x20000000
 8003348:	431bde83 	.word	0x431bde83

0800334c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800335a:	6093      	str	r3, [r2, #8]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40007000 	.word	0x40007000

0800336c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e2fe      	b.n	800397c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d075      	beq.n	8003476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338a:	4b97      	ldr	r3, [pc, #604]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003394:	4b94      	ldr	r3, [pc, #592]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b0c      	cmp	r3, #12
 80033a2:	d102      	bne.n	80033aa <HAL_RCC_OscConfig+0x3e>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_OscConfig+0x44>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d10b      	bne.n	80033c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	4b8d      	ldr	r3, [pc, #564]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d05b      	beq.n	8003474 <HAL_RCC_OscConfig+0x108>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d157      	bne.n	8003474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e2d9      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d106      	bne.n	80033e0 <HAL_RCC_OscConfig+0x74>
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a84      	ldr	r2, [pc, #528]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e01d      	b.n	800341c <HAL_RCC_OscConfig+0xb0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0x98>
 80033ea:	4b7f      	ldr	r3, [pc, #508]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7e      	ldr	r2, [pc, #504]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80033f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b7c      	ldr	r3, [pc, #496]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7b      	ldr	r2, [pc, #492]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e00b      	b.n	800341c <HAL_RCC_OscConfig+0xb0>
 8003404:	4b78      	ldr	r3, [pc, #480]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a77      	ldr	r2, [pc, #476]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 800340a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b75      	ldr	r3, [pc, #468]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a74      	ldr	r2, [pc, #464]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fd fbea 	bl	8000bfc <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7fd fbe6 	bl	8000bfc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e29e      	b.n	800397c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343e:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0xc0>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd fbd6 	bl	8000bfc <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7fd fbd2 	bl	8000bfc <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e28a      	b.n	800397c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003466:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0xe8>
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d075      	beq.n	800356e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003482:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800348c:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d102      	bne.n	80034a2 <HAL_RCC_OscConfig+0x136>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d002      	beq.n	80034a8 <HAL_RCC_OscConfig+0x13c>
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d11f      	bne.n	80034e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034a8:	4b4f      	ldr	r3, [pc, #316]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_OscConfig+0x154>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e25d      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c0:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	4946      	ldr	r1, [pc, #280]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034d4:	4b45      	ldr	r3, [pc, #276]	; (80035ec <HAL_RCC_OscConfig+0x280>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd fb43 	bl	8000b64 <HAL_InitTick>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d043      	beq.n	800356c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e249      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d023      	beq.n	8003538 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80034f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fd fb7e 	bl	8000bfc <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003504:	f7fd fb7a 	bl	8000bfc <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e232      	b.n	800397c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	492d      	ldr	r1, [pc, #180]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
 8003536:	e01a      	b.n	800356e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 800353e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd fb5a 	bl	8000bfc <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354c:	f7fd fb56 	bl	8000bfc <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e20e      	b.n	800397c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1e0>
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d041      	beq.n	80035fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01c      	beq.n	80035bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003582:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fd fb33 	bl	8000bfc <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359a:	f7fd fb2f 	bl	8000bfc <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1e7      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0ef      	beq.n	800359a <HAL_RCC_OscConfig+0x22e>
 80035ba:	e020      	b.n	80035fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c2:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <HAL_RCC_OscConfig+0x27c>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd fb16 	bl	8000bfc <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035d2:	e00d      	b.n	80035f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fd fb12 	bl	8000bfc <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d906      	bls.n	80035f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1ca      	b.n	800397c <HAL_RCC_OscConfig+0x610>
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f0:	4b8c      	ldr	r3, [pc, #560]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80035f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1ea      	bne.n	80035d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80a6 	beq.w	8003758 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360c:	2300      	movs	r3, #0
 800360e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003610:	4b84      	ldr	r3, [pc, #528]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_OscConfig+0x2b4>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x2b6>
 8003620:	2300      	movs	r3, #0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	4b7f      	ldr	r3, [pc, #508]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	4a7e      	ldr	r2, [pc, #504]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	6593      	str	r3, [r2, #88]	; 0x58
 8003632:	4b7c      	ldr	r3, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003642:	4b79      	ldr	r3, [pc, #484]	; (8003828 <HAL_RCC_OscConfig+0x4bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d118      	bne.n	8003680 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364e:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x4bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a75      	ldr	r2, [pc, #468]	; (8003828 <HAL_RCC_OscConfig+0x4bc>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7fd facf 	bl	8000bfc <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fd facb 	bl	8000bfc <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e183      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003674:	4b6c      	ldr	r3, [pc, #432]	; (8003828 <HAL_RCC_OscConfig+0x4bc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d108      	bne.n	800369a <HAL_RCC_OscConfig+0x32e>
 8003688:	4b66      	ldr	r3, [pc, #408]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	4a65      	ldr	r2, [pc, #404]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003698:	e024      	b.n	80036e4 <HAL_RCC_OscConfig+0x378>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b05      	cmp	r3, #5
 80036a0:	d110      	bne.n	80036c4 <HAL_RCC_OscConfig+0x358>
 80036a2:	4b60      	ldr	r3, [pc, #384]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a8:	4a5e      	ldr	r2, [pc, #376]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036b2:	4b5c      	ldr	r3, [pc, #368]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	4a5a      	ldr	r2, [pc, #360]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c2:	e00f      	b.n	80036e4 <HAL_RCC_OscConfig+0x378>
 80036c4:	4b57      	ldr	r3, [pc, #348]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	4a56      	ldr	r2, [pc, #344]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80036d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036da:	4a52      	ldr	r2, [pc, #328]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d016      	beq.n	800371a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fd fa86 	bl	8000bfc <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fd fa82 	bl	8000bfc <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e138      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800370a:	4b46      	ldr	r3, [pc, #280]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0ed      	beq.n	80036f4 <HAL_RCC_OscConfig+0x388>
 8003718:	e015      	b.n	8003746 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fd fa6f 	bl	8000bfc <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003720:	e00a      	b.n	8003738 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003722:	f7fd fa6b 	bl	8000bfc <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e121      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003738:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ed      	bne.n	8003722 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003746:	7ffb      	ldrb	r3, [r7, #31]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d105      	bne.n	8003758 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374c:	4b35      	ldr	r3, [pc, #212]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	4a34      	ldr	r2, [pc, #208]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003756:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d03c      	beq.n	80037de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01c      	beq.n	80037a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800376c:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003772:	4a2c      	ldr	r2, [pc, #176]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd fa3e 	bl	8000bfc <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003784:	f7fd fa3a 	bl	8000bfc <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0f2      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003796:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003798:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ef      	beq.n	8003784 <HAL_RCC_OscConfig+0x418>
 80037a4:	e01b      	b.n	80037de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037a6:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fd fa21 	bl	8000bfc <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037be:	f7fd fa1d 	bl	8000bfc <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e0d5      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80037d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1ef      	bne.n	80037be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80c9 	beq.w	800397a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 030c 	and.w	r3, r3, #12
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	f000 8083 	beq.w	80038fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d15e      	bne.n	80038bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <HAL_RCC_OscConfig+0x4b8>)
 8003804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd f9f7 	bl	8000bfc <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003810:	e00c      	b.n	800382c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003812:	f7fd f9f3 	bl	8000bfc <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d905      	bls.n	800382c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e0ab      	b.n	800397c <HAL_RCC_OscConfig+0x610>
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800382c:	4b55      	ldr	r3, [pc, #340]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ec      	bne.n	8003812 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003838:	4b52      	ldr	r3, [pc, #328]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCC_OscConfig+0x61c>)
 800383e:	4013      	ands	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6a11      	ldr	r1, [r2, #32]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003848:	3a01      	subs	r2, #1
 800384a:	0112      	lsls	r2, r2, #4
 800384c:	4311      	orrs	r1, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003852:	0212      	lsls	r2, r2, #8
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800385a:	0852      	lsrs	r2, r2, #1
 800385c:	3a01      	subs	r2, #1
 800385e:	0552      	lsls	r2, r2, #21
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0652      	lsls	r2, r2, #25
 800386c:	4311      	orrs	r1, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003872:	06d2      	lsls	r2, r2, #27
 8003874:	430a      	orrs	r2, r1
 8003876:	4943      	ldr	r1, [pc, #268]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 8003878:	4313      	orrs	r3, r2
 800387a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800387c:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a40      	ldr	r2, [pc, #256]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 8003882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003886:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003888:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a3d      	ldr	r2, [pc, #244]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 800388e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003892:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fd f9b2 	bl	8000bfc <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389c:	f7fd f9ae 	bl	8000bfc <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e066      	b.n	800397c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	4b35      	ldr	r3, [pc, #212]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x530>
 80038ba:	e05e      	b.n	800397a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a30      	ldr	r2, [pc, #192]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd f998 	bl	8000bfc <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fd f994 	bl	8000bfc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e04c      	b.n	800397c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e2:	4b28      	ldr	r3, [pc, #160]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038ee:	4b25      	ldr	r3, [pc, #148]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	4924      	ldr	r1, [pc, #144]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_RCC_OscConfig+0x620>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
 80038fa:	e03e      	b.n	800397a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e039      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003908:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <HAL_RCC_OscConfig+0x618>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0203 	and.w	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	429a      	cmp	r2, r3
 800391a:	d12c      	bne.n	8003976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	3b01      	subs	r3, #1
 8003928:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d123      	bne.n	8003976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800393a:	429a      	cmp	r2, r3
 800393c:	d11b      	bne.n	8003976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d113      	bne.n	8003976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	085b      	lsrs	r3, r3, #1
 800395a:	3b01      	subs	r3, #1
 800395c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d109      	bne.n	8003976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	3b01      	subs	r3, #1
 8003970:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d001      	beq.n	800397a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	019f800c 	.word	0x019f800c
 800398c:	feeefffc 	.word	0xfeeefffc

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e11e      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b91      	ldr	r3, [pc, #580]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d910      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b8e      	ldr	r3, [pc, #568]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 020f 	bic.w	r2, r3, #15
 80039be:	498c      	ldr	r1, [pc, #560]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b8a      	ldr	r3, [pc, #552]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e106      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d073      	beq.n	8003acc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d129      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ec:	4b81      	ldr	r3, [pc, #516]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0f4      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039fc:	f000 f99e 	bl	8003d3c <RCC_GetSysClockFreqFromPLLSource>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4a7c      	ldr	r2, [pc, #496]	; (8003bf8 <HAL_RCC_ClockConfig+0x268>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d93f      	bls.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a0a:	4b7a      	ldr	r3, [pc, #488]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d033      	beq.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d12f      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a2a:	4b72      	ldr	r3, [pc, #456]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a32:	4a70      	ldr	r2, [pc, #448]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a3a:	2380      	movs	r3, #128	; 0x80
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e024      	b.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a48:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0c6      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a58:	4b66      	ldr	r3, [pc, #408]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0be      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a68:	f000 f8ce 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4a61      	ldr	r2, [pc, #388]	; (8003bf8 <HAL_RCC_ClockConfig+0x268>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d909      	bls.n	8003a8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a76:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7e:	4a5d      	ldr	r2, [pc, #372]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a86:	2380      	movs	r3, #128	; 0x80
 8003a88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a8a:	4b5a      	ldr	r3, [pc, #360]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 0203 	bic.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4957      	ldr	r1, [pc, #348]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9c:	f7fd f8ae 	bl	8000bfc <HAL_GetTick>
 8003aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fd f8aa 	bl	8000bfc <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e095      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aba:	4b4e      	ldr	r3, [pc, #312]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 020c 	and.w	r2, r3, #12
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d1eb      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a42      	ldr	r2, [pc, #264]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003afc:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b04:	4a3b      	ldr	r2, [pc, #236]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4936      	ldr	r1, [pc, #216]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d105      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b26:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4a32      	ldr	r2, [pc, #200]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b32:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d21d      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b40:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f023 020f 	bic.w	r2, r3, #15
 8003b48:	4929      	ldr	r1, [pc, #164]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b50:	f7fd f854 	bl	8000bfc <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fd f850 	bl	8000bfc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e03b      	b.n	8003be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_RCC_ClockConfig+0x260>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d1ed      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4917      	ldr	r1, [pc, #92]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490f      	ldr	r1, [pc, #60]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bba:	f000 f825 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_RCC_ClockConfig+0x264>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490c      	ldr	r1, [pc, #48]	; (8003bfc <HAL_RCC_ClockConfig+0x26c>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x270>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <HAL_RCC_ClockConfig+0x274>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fc ffc0 	bl	8000b64 <HAL_InitTick>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40022000 	.word	0x40022000
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	04c4b400 	.word	0x04c4b400
 8003bfc:	08004fb0 	.word	0x08004fb0
 8003c00:	20000000 	.word	0x20000000
 8003c04:	20000004 	.word	0x20000004

08003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c0e:	4b2c      	ldr	r3, [pc, #176]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d102      	bne.n	8003c20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c1a:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e047      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c20:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d102      	bne.n	8003c32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	e03e      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c32:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d136      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	3301      	adds	r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d10c      	bne.n	8003c76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c5c:	4a1a      	ldr	r2, [pc, #104]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c64:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c66:	68d2      	ldr	r2, [r2, #12]
 8003c68:	0a12      	lsrs	r2, r2, #8
 8003c6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
      break;
 8003c74:	e00c      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c76:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	4a10      	ldr	r2, [pc, #64]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c80:	68d2      	ldr	r2, [r2, #12]
 8003c82:	0a12      	lsrs	r2, r2, #8
 8003c84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]
      break;
 8003c8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	0e5b      	lsrs	r3, r3, #25
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	e001      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cb0:	693b      	ldr	r3, [r7, #16]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	00f42400 	.word	0x00f42400
 8003cc8:	016e3600 	.word	0x016e3600

08003ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000000 	.word	0x20000000

08003ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ce8:	f7ff fff0 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4904      	ldr	r1, [pc, #16]	; (8003d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	08004fc0 	.word	0x08004fc0

08003d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d14:	f7ff ffda 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0adb      	lsrs	r3, r3, #11
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4904      	ldr	r1, [pc, #16]	; (8003d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	08004fc0 	.word	0x08004fc0

08003d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d42:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d4c:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	3301      	adds	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d10c      	bne.n	8003d7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d60:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	4a14      	ldr	r2, [pc, #80]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d6a:	68d2      	ldr	r2, [r2, #12]
 8003d6c:	0a12      	lsrs	r2, r2, #8
 8003d6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
    break;
 8003d78:	e00c      	b.n	8003d94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	0a12      	lsrs	r2, r2, #8
 8003d88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    break;
 8003d92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0e5b      	lsrs	r3, r3, #25
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dae:	687b      	ldr	r3, [r7, #4]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	016e3600 	.word	0x016e3600
 8003dc4:	00f42400 	.word	0x00f42400

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 8098 	beq.w	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10d      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df6:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6593      	str	r3, [r2, #88]	; 0x58
 8003e02:	4b3d      	ldr	r3, [pc, #244]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e12:	4b3a      	ldr	r3, [pc, #232]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a39      	ldr	r2, [pc, #228]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1e:	f7fc feed 	bl	8000bfc <HAL_GetTick>
 8003e22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e24:	e009      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e26:	f7fc fee9 	bl	8000bfc <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d902      	bls.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	74fb      	strb	r3, [r7, #19]
        break;
 8003e38:	e005      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3a:	4b30      	ldr	r3, [pc, #192]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ef      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d159      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d019      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e74:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e84:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fc fea9 	bl	8000bfc <HAL_GetTick>
 8003eaa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fc fea5 	bl	8000bfc <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d902      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ec      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eda:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	4903      	ldr	r1, [pc, #12]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ef0:	e008      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ef2:	7cfb      	ldrb	r3, [r7, #19]
 8003ef4:	74bb      	strb	r3, [r7, #18]
 8003ef6:	e005      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f04:	7c7b      	ldrb	r3, [r7, #17]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4ba7      	ldr	r3, [pc, #668]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4aa6      	ldr	r2, [pc, #664]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f22:	4ba1      	ldr	r3, [pc, #644]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f023 0203 	bic.w	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	499d      	ldr	r1, [pc, #628]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f44:	4b98      	ldr	r3, [pc, #608]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f023 020c 	bic.w	r2, r3, #12
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	4995      	ldr	r1, [pc, #596]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f66:	4b90      	ldr	r3, [pc, #576]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	498c      	ldr	r1, [pc, #560]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f88:	4b87      	ldr	r3, [pc, #540]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	4984      	ldr	r1, [pc, #528]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003faa:	4b7f      	ldr	r3, [pc, #508]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	497b      	ldr	r1, [pc, #492]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fcc:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	4973      	ldr	r1, [pc, #460]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fee:	4b6e      	ldr	r3, [pc, #440]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	496a      	ldr	r1, [pc, #424]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004010:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	4962      	ldr	r1, [pc, #392]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004032:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	4959      	ldr	r1, [pc, #356]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004054:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800405a:	f023 0203 	bic.w	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	4951      	ldr	r1, [pc, #324]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004076:	4b4c      	ldr	r3, [pc, #304]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	4948      	ldr	r1, [pc, #288]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004098:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4940      	ldr	r1, [pc, #256]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040b6:	d105      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b8:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a3a      	ldr	r2, [pc, #232]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040d0:	4b35      	ldr	r3, [pc, #212]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	4932      	ldr	r1, [pc, #200]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ee:	d105      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f0:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4924      	ldr	r1, [pc, #144]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004126:	d105      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004132:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	4916      	ldr	r1, [pc, #88]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800415e:	d105      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800416a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d019      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4908      	ldr	r1, [pc, #32]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004196:	d109      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a02      	ldr	r2, [pc, #8]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041a2:	60d3      	str	r3, [r2, #12]
 80041a4:	e002      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	4926      	ldr	r1, [pc, #152]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fe:	4918      	ldr	r1, [pc, #96]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800422e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	490a      	ldr	r1, [pc, #40]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004254:	7cbb      	ldrb	r3, [r7, #18]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000

08004264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e042      	b.n	80042fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fc fb83 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2224      	movs	r2, #36	; 0x24
 8004292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fb24 	bl	80048fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f825 	bl	8004304 <UART_SetConfig>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e01b      	b.n	80042fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0201 	orr.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fba3 	bl	8004a40 <UART_CheckIdleState>
 80042fa:	4603      	mov	r3, r0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004308:	b08c      	sub	sp, #48	; 0x30
 800430a:	af00      	add	r7, sp, #0
 800430c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	431a      	orrs	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4313      	orrs	r3, r2
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4baa      	ldr	r3, [pc, #680]	; (80045dc <UART_SetConfig+0x2d8>)
 8004334:	4013      	ands	r3, r2
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800433c:	430b      	orrs	r3, r1
 800433e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a9f      	ldr	r2, [pc, #636]	; (80045e0 <UART_SetConfig+0x2dc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436c:	4313      	orrs	r3, r2
 800436e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800437a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	6812      	ldr	r2, [r2, #0]
 8004382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004384:	430b      	orrs	r3, r1
 8004386:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	f023 010f 	bic.w	r1, r3, #15
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a90      	ldr	r2, [pc, #576]	; (80045e4 <UART_SetConfig+0x2e0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d125      	bne.n	80043f4 <UART_SetConfig+0xf0>
 80043a8:	4b8f      	ldr	r3, [pc, #572]	; (80045e8 <UART_SetConfig+0x2e4>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d81a      	bhi.n	80043ec <UART_SetConfig+0xe8>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <UART_SetConfig+0xb8>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043cd 	.word	0x080043cd
 80043c0:	080043dd 	.word	0x080043dd
 80043c4:	080043d5 	.word	0x080043d5
 80043c8:	080043e5 	.word	0x080043e5
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043d2:	e116      	b.n	8004602 <UART_SetConfig+0x2fe>
 80043d4:	2302      	movs	r3, #2
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043da:	e112      	b.n	8004602 <UART_SetConfig+0x2fe>
 80043dc:	2304      	movs	r3, #4
 80043de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043e2:	e10e      	b.n	8004602 <UART_SetConfig+0x2fe>
 80043e4:	2308      	movs	r3, #8
 80043e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ea:	e10a      	b.n	8004602 <UART_SetConfig+0x2fe>
 80043ec:	2310      	movs	r3, #16
 80043ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043f2:	e106      	b.n	8004602 <UART_SetConfig+0x2fe>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a7c      	ldr	r2, [pc, #496]	; (80045ec <UART_SetConfig+0x2e8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d138      	bne.n	8004470 <UART_SetConfig+0x16c>
 80043fe:	4b7a      	ldr	r3, [pc, #488]	; (80045e8 <UART_SetConfig+0x2e4>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b0c      	cmp	r3, #12
 800440a:	d82d      	bhi.n	8004468 <UART_SetConfig+0x164>
 800440c:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <UART_SetConfig+0x110>)
 800440e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004412:	bf00      	nop
 8004414:	08004449 	.word	0x08004449
 8004418:	08004469 	.word	0x08004469
 800441c:	08004469 	.word	0x08004469
 8004420:	08004469 	.word	0x08004469
 8004424:	08004459 	.word	0x08004459
 8004428:	08004469 	.word	0x08004469
 800442c:	08004469 	.word	0x08004469
 8004430:	08004469 	.word	0x08004469
 8004434:	08004451 	.word	0x08004451
 8004438:	08004469 	.word	0x08004469
 800443c:	08004469 	.word	0x08004469
 8004440:	08004469 	.word	0x08004469
 8004444:	08004461 	.word	0x08004461
 8004448:	2300      	movs	r3, #0
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444e:	e0d8      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004450:	2302      	movs	r3, #2
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004456:	e0d4      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800445e:	e0d0      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004466:	e0cc      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800446e:	e0c8      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a5e      	ldr	r2, [pc, #376]	; (80045f0 <UART_SetConfig+0x2ec>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d125      	bne.n	80044c6 <UART_SetConfig+0x1c2>
 800447a:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <UART_SetConfig+0x2e4>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004480:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004484:	2b30      	cmp	r3, #48	; 0x30
 8004486:	d016      	beq.n	80044b6 <UART_SetConfig+0x1b2>
 8004488:	2b30      	cmp	r3, #48	; 0x30
 800448a:	d818      	bhi.n	80044be <UART_SetConfig+0x1ba>
 800448c:	2b20      	cmp	r3, #32
 800448e:	d00a      	beq.n	80044a6 <UART_SetConfig+0x1a2>
 8004490:	2b20      	cmp	r3, #32
 8004492:	d814      	bhi.n	80044be <UART_SetConfig+0x1ba>
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <UART_SetConfig+0x19a>
 8004498:	2b10      	cmp	r3, #16
 800449a:	d008      	beq.n	80044ae <UART_SetConfig+0x1aa>
 800449c:	e00f      	b.n	80044be <UART_SetConfig+0x1ba>
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a4:	e0ad      	b.n	8004602 <UART_SetConfig+0x2fe>
 80044a6:	2302      	movs	r3, #2
 80044a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ac:	e0a9      	b.n	8004602 <UART_SetConfig+0x2fe>
 80044ae:	2304      	movs	r3, #4
 80044b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b4:	e0a5      	b.n	8004602 <UART_SetConfig+0x2fe>
 80044b6:	2308      	movs	r3, #8
 80044b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044bc:	e0a1      	b.n	8004602 <UART_SetConfig+0x2fe>
 80044be:	2310      	movs	r3, #16
 80044c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c4:	e09d      	b.n	8004602 <UART_SetConfig+0x2fe>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <UART_SetConfig+0x2f0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d125      	bne.n	800451c <UART_SetConfig+0x218>
 80044d0:	4b45      	ldr	r3, [pc, #276]	; (80045e8 <UART_SetConfig+0x2e4>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044da:	2bc0      	cmp	r3, #192	; 0xc0
 80044dc:	d016      	beq.n	800450c <UART_SetConfig+0x208>
 80044de:	2bc0      	cmp	r3, #192	; 0xc0
 80044e0:	d818      	bhi.n	8004514 <UART_SetConfig+0x210>
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d00a      	beq.n	80044fc <UART_SetConfig+0x1f8>
 80044e6:	2b80      	cmp	r3, #128	; 0x80
 80044e8:	d814      	bhi.n	8004514 <UART_SetConfig+0x210>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <UART_SetConfig+0x1f0>
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d008      	beq.n	8004504 <UART_SetConfig+0x200>
 80044f2:	e00f      	b.n	8004514 <UART_SetConfig+0x210>
 80044f4:	2300      	movs	r3, #0
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fa:	e082      	b.n	8004602 <UART_SetConfig+0x2fe>
 80044fc:	2302      	movs	r3, #2
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004502:	e07e      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004504:	2304      	movs	r3, #4
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450a:	e07a      	b.n	8004602 <UART_SetConfig+0x2fe>
 800450c:	2308      	movs	r3, #8
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004512:	e076      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004514:	2310      	movs	r3, #16
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451a:	e072      	b.n	8004602 <UART_SetConfig+0x2fe>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a35      	ldr	r2, [pc, #212]	; (80045f8 <UART_SetConfig+0x2f4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d12a      	bne.n	800457c <UART_SetConfig+0x278>
 8004526:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <UART_SetConfig+0x2e4>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004534:	d01a      	beq.n	800456c <UART_SetConfig+0x268>
 8004536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800453a:	d81b      	bhi.n	8004574 <UART_SetConfig+0x270>
 800453c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004540:	d00c      	beq.n	800455c <UART_SetConfig+0x258>
 8004542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004546:	d815      	bhi.n	8004574 <UART_SetConfig+0x270>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <UART_SetConfig+0x250>
 800454c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004550:	d008      	beq.n	8004564 <UART_SetConfig+0x260>
 8004552:	e00f      	b.n	8004574 <UART_SetConfig+0x270>
 8004554:	2300      	movs	r3, #0
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455a:	e052      	b.n	8004602 <UART_SetConfig+0x2fe>
 800455c:	2302      	movs	r3, #2
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004562:	e04e      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004564:	2304      	movs	r3, #4
 8004566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456a:	e04a      	b.n	8004602 <UART_SetConfig+0x2fe>
 800456c:	2308      	movs	r3, #8
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004572:	e046      	b.n	8004602 <UART_SetConfig+0x2fe>
 8004574:	2310      	movs	r3, #16
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800457a:	e042      	b.n	8004602 <UART_SetConfig+0x2fe>
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a17      	ldr	r2, [pc, #92]	; (80045e0 <UART_SetConfig+0x2dc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d13a      	bne.n	80045fc <UART_SetConfig+0x2f8>
 8004586:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <UART_SetConfig+0x2e4>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004594:	d01a      	beq.n	80045cc <UART_SetConfig+0x2c8>
 8004596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800459a:	d81b      	bhi.n	80045d4 <UART_SetConfig+0x2d0>
 800459c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a0:	d00c      	beq.n	80045bc <UART_SetConfig+0x2b8>
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d815      	bhi.n	80045d4 <UART_SetConfig+0x2d0>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <UART_SetConfig+0x2b0>
 80045ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b0:	d008      	beq.n	80045c4 <UART_SetConfig+0x2c0>
 80045b2:	e00f      	b.n	80045d4 <UART_SetConfig+0x2d0>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ba:	e022      	b.n	8004602 <UART_SetConfig+0x2fe>
 80045bc:	2302      	movs	r3, #2
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c2:	e01e      	b.n	8004602 <UART_SetConfig+0x2fe>
 80045c4:	2304      	movs	r3, #4
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ca:	e01a      	b.n	8004602 <UART_SetConfig+0x2fe>
 80045cc:	2308      	movs	r3, #8
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d2:	e016      	b.n	8004602 <UART_SetConfig+0x2fe>
 80045d4:	2310      	movs	r3, #16
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045da:	e012      	b.n	8004602 <UART_SetConfig+0x2fe>
 80045dc:	cfff69f3 	.word	0xcfff69f3
 80045e0:	40008000 	.word	0x40008000
 80045e4:	40013800 	.word	0x40013800
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40004400 	.word	0x40004400
 80045f0:	40004800 	.word	0x40004800
 80045f4:	40004c00 	.word	0x40004c00
 80045f8:	40005000 	.word	0x40005000
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4aae      	ldr	r2, [pc, #696]	; (80048c0 <UART_SetConfig+0x5bc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	f040 8097 	bne.w	800473c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800460e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004612:	2b08      	cmp	r3, #8
 8004614:	d823      	bhi.n	800465e <UART_SetConfig+0x35a>
 8004616:	a201      	add	r2, pc, #4	; (adr r2, 800461c <UART_SetConfig+0x318>)
 8004618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461c:	08004641 	.word	0x08004641
 8004620:	0800465f 	.word	0x0800465f
 8004624:	08004649 	.word	0x08004649
 8004628:	0800465f 	.word	0x0800465f
 800462c:	0800464f 	.word	0x0800464f
 8004630:	0800465f 	.word	0x0800465f
 8004634:	0800465f 	.word	0x0800465f
 8004638:	0800465f 	.word	0x0800465f
 800463c:	08004657 	.word	0x08004657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004640:	f7ff fb50 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 8004644:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004646:	e010      	b.n	800466a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004648:	4b9e      	ldr	r3, [pc, #632]	; (80048c4 <UART_SetConfig+0x5c0>)
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800464c:	e00d      	b.n	800466a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800464e:	f7ff fadb 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004654:	e009      	b.n	800466a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800465c:	e005      	b.n	800466a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004668:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 8130 	beq.w	80048d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	4a94      	ldr	r2, [pc, #592]	; (80048c8 <UART_SetConfig+0x5c4>)
 8004678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800467c:	461a      	mov	r2, r3
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	fbb3 f3f2 	udiv	r3, r3, r2
 8004684:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	4413      	add	r3, r2
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	429a      	cmp	r2, r3
 8004694:	d305      	bcc.n	80046a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d903      	bls.n	80046aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046a8:	e113      	b.n	80048d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	2200      	movs	r2, #0
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	60fa      	str	r2, [r7, #12]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	4a84      	ldr	r2, [pc, #528]	; (80048c8 <UART_SetConfig+0x5c4>)
 80046b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2200      	movs	r2, #0
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046cc:	f7fb fda4 	bl	8000218 <__aeabi_uldivmod>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	020b      	lsls	r3, r1, #8
 80046e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046e6:	0202      	lsls	r2, r0, #8
 80046e8:	6979      	ldr	r1, [r7, #20]
 80046ea:	6849      	ldr	r1, [r1, #4]
 80046ec:	0849      	lsrs	r1, r1, #1
 80046ee:	2000      	movs	r0, #0
 80046f0:	460c      	mov	r4, r1
 80046f2:	4605      	mov	r5, r0
 80046f4:	eb12 0804 	adds.w	r8, r2, r4
 80046f8:	eb43 0905 	adc.w	r9, r3, r5
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	469a      	mov	sl, r3
 8004704:	4693      	mov	fp, r2
 8004706:	4652      	mov	r2, sl
 8004708:	465b      	mov	r3, fp
 800470a:	4640      	mov	r0, r8
 800470c:	4649      	mov	r1, r9
 800470e:	f7fb fd83 	bl	8000218 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4613      	mov	r3, r2
 8004718:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004720:	d308      	bcc.n	8004734 <UART_SetConfig+0x430>
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004728:	d204      	bcs.n	8004734 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6a3a      	ldr	r2, [r7, #32]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	e0ce      	b.n	80048d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800473a:	e0ca      	b.n	80048d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004744:	d166      	bne.n	8004814 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800474a:	2b08      	cmp	r3, #8
 800474c:	d827      	bhi.n	800479e <UART_SetConfig+0x49a>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <UART_SetConfig+0x450>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004779 	.word	0x08004779
 8004758:	08004781 	.word	0x08004781
 800475c:	08004789 	.word	0x08004789
 8004760:	0800479f 	.word	0x0800479f
 8004764:	0800478f 	.word	0x0800478f
 8004768:	0800479f 	.word	0x0800479f
 800476c:	0800479f 	.word	0x0800479f
 8004770:	0800479f 	.word	0x0800479f
 8004774:	08004797 	.word	0x08004797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004778:	f7ff fab4 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800477e:	e014      	b.n	80047aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004780:	f7ff fac6 	bl	8003d10 <HAL_RCC_GetPCLK2Freq>
 8004784:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004786:	e010      	b.n	80047aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004788:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <UART_SetConfig+0x5c0>)
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800478c:	e00d      	b.n	80047aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800478e:	f7ff fa3b 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8004792:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004794:	e009      	b.n	80047aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800479c:	e005      	b.n	80047aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8090 	beq.w	80048d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	4a44      	ldr	r2, [pc, #272]	; (80048c8 <UART_SetConfig+0x5c4>)
 80047b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047bc:	461a      	mov	r2, r3
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047c4:	005a      	lsls	r2, r3, #1
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	441a      	add	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2b0f      	cmp	r3, #15
 80047dc:	d916      	bls.n	800480c <UART_SetConfig+0x508>
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d212      	bcs.n	800480c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f023 030f 	bic.w	r3, r3, #15
 80047ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	8bfb      	ldrh	r3, [r7, #30]
 80047fe:	4313      	orrs	r3, r2
 8004800:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	8bfa      	ldrh	r2, [r7, #30]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	e062      	b.n	80048d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004812:	e05e      	b.n	80048d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004818:	2b08      	cmp	r3, #8
 800481a:	d828      	bhi.n	800486e <UART_SetConfig+0x56a>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x520>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	0800486f 	.word	0x0800486f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800486f 	.word	0x0800486f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7ff fa4c 	bl	8003ce4 <HAL_RCC_GetPCLK1Freq>
 800484c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800484e:	e014      	b.n	800487a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7ff fa5e 	bl	8003d10 <HAL_RCC_GetPCLK2Freq>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004856:	e010      	b.n	800487a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <UART_SetConfig+0x5c0>)
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800485c:	e00d      	b.n	800487a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7ff f9d3 	bl	8003c08 <HAL_RCC_GetSysClockFreq>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004864:	e009      	b.n	800487a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800486c:	e005      	b.n	800487a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004878:	bf00      	nop
    }

    if (pclk != 0U)
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d028      	beq.n	80048d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <UART_SetConfig+0x5c4>)
 8004886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800488a:	461a      	mov	r2, r3
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	441a      	add	r2, r3
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	2b0f      	cmp	r3, #15
 80048a8:	d910      	bls.n	80048cc <UART_SetConfig+0x5c8>
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d20c      	bcs.n	80048cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60da      	str	r2, [r3, #12]
 80048bc:	e009      	b.n	80048d2 <UART_SetConfig+0x5ce>
 80048be:	bf00      	nop
 80048c0:	40008000 	.word	0x40008000
 80048c4:	00f42400 	.word	0x00f42400
 80048c8:	08004fc8 	.word	0x08004fc8
      }
      else
      {
        ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2201      	movs	r2, #1
 80048de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2200      	movs	r2, #0
 80048e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2200      	movs	r2, #0
 80048ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80048ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3730      	adds	r7, #48	; 0x30
 80048f6:	46bd      	mov	sp, r7
 80048f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01a      	beq.n	8004a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049fa:	d10a      	bne.n	8004a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b098      	sub	sp, #96	; 0x60
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a50:	f7fc f8d4 	bl	8000bfc <HAL_GetTick>
 8004a54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d12f      	bne.n	8004ac4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f88e 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d022      	beq.n	8004ac4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a92:	653b      	str	r3, [r7, #80]	; 0x50
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aa4:	e841 2300 	strex	r3, r2, [r1]
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1e6      	bne.n	8004a7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e063      	b.n	8004b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d149      	bne.n	8004b66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ada:	2200      	movs	r2, #0
 8004adc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f857 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d03c      	beq.n	8004b66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	623b      	str	r3, [r7, #32]
   return(result);
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e6      	bne.n	8004aec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3308      	adds	r3, #8
 8004b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3308      	adds	r3, #8
 8004b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b3e:	61fa      	str	r2, [r7, #28]
 8004b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	69b9      	ldr	r1, [r7, #24]
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e5      	bne.n	8004b1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e012      	b.n	8004b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3758      	adds	r7, #88	; 0x58
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba4:	e04f      	b.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d04b      	beq.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bae:	f7fc f825 	bl	8000bfc <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d302      	bcc.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e04e      	b.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d037      	beq.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b80      	cmp	r3, #128	; 0x80
 8004bda:	d034      	beq.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	d031      	beq.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d110      	bne.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f838 	bl	8004c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2208      	movs	r2, #8
 8004c02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e029      	b.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c20:	d111      	bne.n	8004c46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f81e 	bl	8004c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e00f      	b.n	8004c66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	bf0c      	ite	eq
 8004c56:	2301      	moveq	r3, #1
 8004c58:	2300      	movne	r3, #0
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d0a0      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b095      	sub	sp, #84	; 0x54
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c94:	643b      	str	r3, [r7, #64]	; 0x40
 8004c96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e3      	bne.n	8004ca8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d118      	bne.n	8004d1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f023 0310 	bic.w	r3, r3, #16
 8004cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	6979      	ldr	r1, [r7, #20]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	613b      	str	r3, [r7, #16]
   return(result);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e6      	bne.n	8004ce8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d2e:	bf00      	nop
 8004d30:	3754      	adds	r7, #84	; 0x54
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e027      	b.n	8004da0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2224      	movs	r2, #36	; 0x24
 8004d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e02d      	b.n	8004e20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	; 0x24
 8004dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f84f 	bl	8004ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e02d      	b.n	8004e9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f811 	bl	8004ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d108      	bne.n	8004ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ec4:	e031      	b.n	8004f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eca:	2308      	movs	r3, #8
 8004ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	0e5b      	lsrs	r3, r3, #25
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	0f5b      	lsrs	r3, r3, #29
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eee:	7bbb      	ldrb	r3, [r7, #14]
 8004ef0:	7b3a      	ldrb	r2, [r7, #12]
 8004ef2:	4911      	ldr	r1, [pc, #68]	; (8004f38 <UARTEx_SetNbDataToProcess+0x94>)
 8004ef4:	5c8a      	ldrb	r2, [r1, r2]
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004efa:	7b3a      	ldrb	r2, [r7, #12]
 8004efc:	490f      	ldr	r1, [pc, #60]	; (8004f3c <UARTEx_SetNbDataToProcess+0x98>)
 8004efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	7b7a      	ldrb	r2, [r7, #13]
 8004f10:	4909      	ldr	r1, [pc, #36]	; (8004f38 <UARTEx_SetNbDataToProcess+0x94>)
 8004f12:	5c8a      	ldrb	r2, [r1, r2]
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f18:	7b7a      	ldrb	r2, [r7, #13]
 8004f1a:	4908      	ldr	r1, [pc, #32]	; (8004f3c <UARTEx_SetNbDataToProcess+0x98>)
 8004f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	08004fe0 	.word	0x08004fe0
 8004f3c:	08004fe8 	.word	0x08004fe8

08004f40 <memset>:
 8004f40:	4402      	add	r2, r0
 8004f42:	4603      	mov	r3, r0
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d100      	bne.n	8004f4a <memset+0xa>
 8004f48:	4770      	bx	lr
 8004f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f4e:	e7f9      	b.n	8004f44 <memset+0x4>

08004f50 <__libc_init_array>:
 8004f50:	b570      	push	{r4, r5, r6, lr}
 8004f52:	4d0d      	ldr	r5, [pc, #52]	; (8004f88 <__libc_init_array+0x38>)
 8004f54:	4c0d      	ldr	r4, [pc, #52]	; (8004f8c <__libc_init_array+0x3c>)
 8004f56:	1b64      	subs	r4, r4, r5
 8004f58:	10a4      	asrs	r4, r4, #2
 8004f5a:	2600      	movs	r6, #0
 8004f5c:	42a6      	cmp	r6, r4
 8004f5e:	d109      	bne.n	8004f74 <__libc_init_array+0x24>
 8004f60:	4d0b      	ldr	r5, [pc, #44]	; (8004f90 <__libc_init_array+0x40>)
 8004f62:	4c0c      	ldr	r4, [pc, #48]	; (8004f94 <__libc_init_array+0x44>)
 8004f64:	f000 f818 	bl	8004f98 <_init>
 8004f68:	1b64      	subs	r4, r4, r5
 8004f6a:	10a4      	asrs	r4, r4, #2
 8004f6c:	2600      	movs	r6, #0
 8004f6e:	42a6      	cmp	r6, r4
 8004f70:	d105      	bne.n	8004f7e <__libc_init_array+0x2e>
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
 8004f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f78:	4798      	blx	r3
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7ee      	b.n	8004f5c <__libc_init_array+0xc>
 8004f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f82:	4798      	blx	r3
 8004f84:	3601      	adds	r6, #1
 8004f86:	e7f2      	b.n	8004f6e <__libc_init_array+0x1e>
 8004f88:	08004ff8 	.word	0x08004ff8
 8004f8c:	08004ff8 	.word	0x08004ff8
 8004f90:	08004ff8 	.word	0x08004ff8
 8004f94:	08004ffc 	.word	0x08004ffc

08004f98 <_init>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	bf00      	nop
 8004f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9e:	bc08      	pop	{r3}
 8004fa0:	469e      	mov	lr, r3
 8004fa2:	4770      	bx	lr

08004fa4 <_fini>:
 8004fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa6:	bf00      	nop
 8004fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004faa:	bc08      	pop	{r3}
 8004fac:	469e      	mov	lr, r3
 8004fae:	4770      	bx	lr
