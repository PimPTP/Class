
CS7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005208  08005208  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005210  08005210  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  2000005c  08005274  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  08005274  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7d0  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ead  00000000  00000000  0002d89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002f750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fd  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e3c  00000000  00000000  000309b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d12d  00000000  00000000  000557f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e982d  00000000  00000000  0006291e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e8c  00000000  00000000  0014c14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0014efd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005148 	.word	0x08005148

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005148 	.word	0x08005148

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fc8a 	bl	8000eea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f82f 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f951 	bl	8000880 <MX_GPIO_Init>
  MX_DMA_Init();
 80005de:	f000 f90d 	bl	80007fc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005e2:	f000 f875 	bl	80006d0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 f8bd 	bl	8000764 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t text[] = "HELLO ^^";
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <main+0x5c>)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f0:	c303      	stmia	r3!, {r0, r1}
 80005f2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&hlpuart1, text, 9, 10);
 80005f4:	1d39      	adds	r1, r7, #4
 80005f6:	230a      	movs	r3, #10
 80005f8:	2209      	movs	r2, #9
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <main+0x60>)
 80005fc:	f002 fb98 	bl	8002d30 <HAL_UART_Transmit>

  UARTConfig();
 8000600:	f000 f9c4 	bl	800098c <UARTConfig>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //UARTPollingMethod();
	  DummyTask();
 8000604:	f000 f9aa 	bl	800095c <DummyTask>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8000608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <main+0x64>)
 800060e:	f001 faa1 	bl	8001b54 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f5      	beq.n	8000604 <main+0x38>
		  HAL_UART_Transmit(&huart1, text, 9, 10);
 8000618:	1d39      	adds	r1, r7, #4
 800061a:	230a      	movs	r3, #10
 800061c:	2209      	movs	r2, #9
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <main+0x68>)
 8000620:	f002 fb86 	bl	8002d30 <HAL_UART_Transmit>
	  DummyTask();
 8000624:	e7ee      	b.n	8000604 <main+0x38>
 8000626:	bf00      	nop
 8000628:	08005160 	.word	0x08005160
 800062c:	20000078 	.word	0x20000078
 8000630:	48000800 	.word	0x48000800
 8000634:	2000010c 	.word	0x2000010c

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	2238      	movs	r2, #56	; 0x38
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 f8fa 	bl	8004840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800065a:	2000      	movs	r0, #0
 800065c:	f001 fae8 	bl	8001c30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2340      	movs	r3, #64	; 0x40
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800067a:	2355      	movs	r3, #85	; 0x55
 800067c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0318 	add.w	r3, r7, #24
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fb82 	bl	8001d98 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800069a:	f000 f9bd 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2104      	movs	r1, #4
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fe80 	bl	80023bc <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006c2:	f000 f9a9 	bl	8000a18 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006d6:	4a22      	ldr	r2, [pc, #136]	; (8000760 <MX_LPUART1_UART_Init+0x90>)
 80006d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f002 fabc 	bl	8002c90 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f97b 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000726:	f003 ffa0 	bl	800466a <HAL_UARTEx_SetTxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000730:	f000 f972 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000738:	f003 ffd5 	bl	80046e6 <HAL_UARTEx_SetRxFifoThreshold>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000742:	f000 f969 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000748:	f003 ff56 	bl	80045f8 <HAL_UARTEx_DisableFifoMode>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000752:	f000 f961 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000078 	.word	0x20000078
 8000760:	40008000 	.word	0x40008000

08000764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 800076a:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <MX_USART1_UART_Init+0x94>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 80007ae:	f002 fa6f 	bl	8002c90 <HAL_UART_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007b8:	f000 f92e 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007bc:	2100      	movs	r1, #0
 80007be:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 80007c0:	f003 ff53 	bl	800466a <HAL_UARTEx_SetTxFifoThreshold>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007ca:	f000 f925 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 80007d2:	f003 ff88 	bl	80046e6 <HAL_UARTEx_SetRxFifoThreshold>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007dc:	f000 f91c 	bl	8000a18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_USART1_UART_Init+0x90>)
 80007e2:	f003 ff09 	bl	80045f8 <HAL_UARTEx_DisableFifoMode>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007ec:	f000 f914 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000010c 	.word	0x2000010c
 80007f8:	40013800 	.word	0x40013800

080007fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_DMA_Init+0x80>)
 8000804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000806:	4a1d      	ldr	r2, [pc, #116]	; (800087c <MX_DMA_Init+0x80>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6493      	str	r3, [r2, #72]	; 0x48
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_DMA_Init+0x80>)
 8000810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_DMA_Init+0x80>)
 800081c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_DMA_Init+0x80>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6493      	str	r3, [r2, #72]	; 0x48
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_DMA_Init+0x80>)
 8000828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2100      	movs	r1, #0
 8000836:	200b      	movs	r0, #11
 8000838:	f000 fca3 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800083c:	200b      	movs	r0, #11
 800083e:	f000 fcba 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	200c      	movs	r0, #12
 8000848:	f000 fc9b 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800084c:	200c      	movs	r0, #12
 800084e:	f000 fcb2 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	200d      	movs	r0, #13
 8000858:	f000 fc93 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800085c:	200d      	movs	r0, #13
 800085e:	f000 fcaa 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	200e      	movs	r0, #14
 8000868:	f000 fc8b 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800086c:	200e      	movs	r0, #14
 800086e:	f000 fca2 	bl	80011b6 <HAL_NVIC_EnableIRQ>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <MX_GPIO_Init+0xd4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <MX_GPIO_Init+0xd4>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a28      	ldr	r2, [pc, #160]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a22      	ldr	r2, [pc, #136]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_GPIO_Init+0xd4>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fe:	f001 f941 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000908:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	480f      	ldr	r0, [pc, #60]	; (8000958 <MX_GPIO_Init+0xd8>)
 800091a:	f000 ff99 	bl	8001850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800091e:	2320      	movs	r3, #32
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f000 ff8a 	bl	8001850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2028      	movs	r0, #40	; 0x28
 8000942:	f000 fc1e 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000946:	2028      	movs	r0, #40	; 0x28
 8000948:	f000 fc35 	bl	80011b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	; 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	48000800 	.word	0x48000800

0800095c <DummyTask>:
		HAL_UART_Transmit(&hlpuart1, TxBuffer, strlen((char*)TxBuffer), 10);
	}
}

void DummyTask()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	static uint32_t timestamp = 0;
	if(HAL_GetTick()>=timestamp)
 8000960:	f000 fb28 	bl	8000fb4 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <DummyTask+0x2c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	d30a      	bcc.n	8000984 <DummyTask+0x28>
	{
		timestamp = HAL_GetTick()+100;
 800096e:	f000 fb21 	bl	8000fb4 <HAL_GetTick>
 8000972:	4603      	mov	r3, r0
 8000974:	3364      	adds	r3, #100	; 0x64
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <DummyTask+0x2c>)
 8000978:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800097a:	2120      	movs	r1, #32
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f001 f918 	bl	8001bb4 <HAL_GPIO_TogglePin>
	}
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000388 	.word	0x20000388

0800098c <UARTConfig>:
void UARTConfig()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, RxBuffer, huart1.RxXferCount);
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <UARTConfig+0x1c>)
 8000992:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000996:	b29b      	uxth	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	4904      	ldr	r1, [pc, #16]	; (80009ac <UARTConfig+0x20>)
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <UARTConfig+0x1c>)
 800099e:	f002 fad5 	bl	8002f4c <HAL_UART_Receive_DMA>
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000010c 	.word	0x2000010c
 80009ac:	20000320 	.word	0x20000320

080009b0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <HAL_UART_RxCpltCallback+0x54>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d11d      	bne.n	80009fc <HAL_UART_RxCpltCallback+0x4c>
	{
		uint32_t lastCharPos = huart1.RxXferSize - huart1.RxXferCount;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_UART_RxCpltCallback+0x54>)
 80009c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_RxCpltCallback+0x54>)
 80009ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	60fb      	str	r3, [r7, #12]
		RxBuffer[lastCharPos] = '\0';
 80009d4:	4a0c      	ldr	r2, [pc, #48]	; (8000a08 <HAL_UART_RxCpltCallback+0x58>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]

		sprintf((char*)TxBuffer,"Received : %s\r\n",RxBuffer);
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_UART_RxCpltCallback+0x58>)
 80009e0:	490a      	ldr	r1, [pc, #40]	; (8000a0c <HAL_UART_RxCpltCallback+0x5c>)
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <HAL_UART_RxCpltCallback+0x60>)
 80009e4:	f003 ff0c 	bl	8004800 <siprintf>
		HAL_UART_Transmit_DMA(&hlpuart1, TxBuffer, strlen((char*)TxBuffer));
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <HAL_UART_RxCpltCallback+0x60>)
 80009ea:	f7ff fc19 	bl	8000220 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <HAL_UART_RxCpltCallback+0x60>)
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <HAL_UART_RxCpltCallback+0x64>)
 80009f8:	f002 fa28 	bl	8002e4c <HAL_UART_Transmit_DMA>

	}
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000010c 	.word	0x2000010c
 8000a08:	20000320 	.word	0x20000320
 8000a0c:	0800516c 	.word	0x0800516c
 8000a10:	20000354 	.word	0x20000354
 8000a14:	20000078 	.word	0x20000078

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	; 0x60
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a5a:	f001 f98d 	bl	8001d78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0a0      	sub	sp, #128	; 0x80
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	2254      	movs	r2, #84	; 0x54
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 fed7 	bl	8004840 <memset>
  if(huart->Instance==LPUART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a99      	ldr	r2, [pc, #612]	; (8000cfc <HAL_UART_MspInit+0x290>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	f040 8093 	bne.w	8000bc4 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa6:	f107 0318 	add.w	r3, r7, #24
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fea2 	bl	80027f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ab6:	f7ff ffaf 	bl	8000a18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aba:	4b91      	ldr	r3, [pc, #580]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000abe:	4a90      	ldr	r2, [pc, #576]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ac6:	4b8e      	ldr	r3, [pc, #568]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b8b      	ldr	r3, [pc, #556]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a8a      	ldr	r2, [pc, #552]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b88      	ldr	r3, [pc, #544]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000aea:	230c      	movs	r3, #12
 8000aec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000afa:	230c      	movs	r3, #12
 8000afc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f000 fea2 	bl	8001850 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000b0c:	4b7d      	ldr	r3, [pc, #500]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b0e:	4a7e      	ldr	r2, [pc, #504]	; (8000d08 <HAL_UART_MspInit+0x29c>)
 8000b10:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000b12:	4b7c      	ldr	r3, [pc, #496]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b14:	2222      	movs	r2, #34	; 0x22
 8000b16:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b18:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1e:	4b79      	ldr	r3, [pc, #484]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b24:	4b77      	ldr	r3, [pc, #476]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b2a:	4b76      	ldr	r3, [pc, #472]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b30:	4b74      	ldr	r3, [pc, #464]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b36:	4b73      	ldr	r3, [pc, #460]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b38:	2220      	movs	r2, #32
 8000b3a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3c:	4b71      	ldr	r3, [pc, #452]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000b42:	4870      	ldr	r0, [pc, #448]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b44:	f000 fb52 	bl	80011ec <HAL_DMA_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000b4e:	f7ff ff63 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a6b      	ldr	r2, [pc, #428]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000b5a:	4a6a      	ldr	r2, [pc, #424]	; (8000d04 <HAL_UART_MspInit+0x298>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000b60:	4b6a      	ldr	r3, [pc, #424]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b62:	4a6b      	ldr	r2, [pc, #428]	; (8000d10 <HAL_UART_MspInit+0x2a4>)
 8000b64:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000b66:	4b69      	ldr	r3, [pc, #420]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b68:	2223      	movs	r2, #35	; 0x23
 8000b6a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b6c:	4b67      	ldr	r3, [pc, #412]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b6e:	2210      	movs	r2, #16
 8000b70:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b72:	4b66      	ldr	r3, [pc, #408]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b78:	4b64      	ldr	r3, [pc, #400]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b7e:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b84:	4b61      	ldr	r3, [pc, #388]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000b8a:	4b60      	ldr	r3, [pc, #384]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b90:	4b5e      	ldr	r3, [pc, #376]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000b96:	485d      	ldr	r0, [pc, #372]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000b98:	f000 fb28 	bl	80011ec <HAL_DMA_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000ba2:	f7ff ff39 	bl	8000a18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a58      	ldr	r2, [pc, #352]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000baa:	67da      	str	r2, [r3, #124]	; 0x7c
 8000bac:	4a57      	ldr	r2, [pc, #348]	; (8000d0c <HAL_UART_MspInit+0x2a0>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	205b      	movs	r0, #91	; 0x5b
 8000bb8:	f000 fae3 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000bbc:	205b      	movs	r0, #91	; 0x5b
 8000bbe:	f000 fafa 	bl	80011b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bc2:	e096      	b.n	8000cf2 <HAL_UART_MspInit+0x286>
  else if(huart->Instance==USART1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a52      	ldr	r2, [pc, #328]	; (8000d14 <HAL_UART_MspInit+0x2a8>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	f040 8091 	bne.w	8000cf2 <HAL_UART_MspInit+0x286>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fe09 	bl	80027f4 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_UART_MspInit+0x180>
      Error_Handler();
 8000be8:	f7ff ff16 	bl	8000a18 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bec:	4b44      	ldr	r3, [pc, #272]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf0:	4a43      	ldr	r2, [pc, #268]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf8:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c04:	4b3e      	ldr	r3, [pc, #248]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c08:	4a3d      	ldr	r2, [pc, #244]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c10:	4b3b      	ldr	r3, [pc, #236]	; (8000d00 <HAL_UART_MspInit+0x294>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c1c:	2330      	movs	r3, #48	; 0x30
 8000c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c34:	4619      	mov	r1, r3
 8000c36:	4838      	ldr	r0, [pc, #224]	; (8000d18 <HAL_UART_MspInit+0x2ac>)
 8000c38:	f000 fe0a 	bl	8001850 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000c3c:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c3e:	4a38      	ldr	r2, [pc, #224]	; (8000d20 <HAL_UART_MspInit+0x2b4>)
 8000c40:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c44:	2218      	movs	r2, #24
 8000c46:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c48:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4e:	4b33      	ldr	r3, [pc, #204]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c54:	4b31      	ldr	r3, [pc, #196]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5a:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c60:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c68:	2220      	movs	r2, #32
 8000c6a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c72:	482a      	ldr	r0, [pc, #168]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c74:	f000 faba 	bl	80011ec <HAL_DMA_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_UART_MspInit+0x216>
      Error_Handler();
 8000c7e:	f7ff fecb 	bl	8000a18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a25      	ldr	r2, [pc, #148]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000c8a:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <HAL_UART_MspInit+0x2b0>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000c90:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000c92:	4a25      	ldr	r2, [pc, #148]	; (8000d28 <HAL_UART_MspInit+0x2bc>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000c98:	2219      	movs	r2, #25
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9c:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cc6:	4817      	ldr	r0, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000cc8:	f000 fa90 	bl	80011ec <HAL_DMA_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8000cd2:	f7ff fea1 	bl	8000a18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000cda:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0x2b8>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2025      	movs	r0, #37	; 0x25
 8000ce8:	f000 fa4b 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cec:	2025      	movs	r0, #37	; 0x25
 8000cee:	f000 fa62 	bl	80011b6 <HAL_NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	3780      	adds	r7, #128	; 0x80
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40008000 	.word	0x40008000
 8000d00:	40021000 	.word	0x40021000
 8000d04:	200001a0 	.word	0x200001a0
 8000d08:	40020008 	.word	0x40020008
 8000d0c:	20000200 	.word	0x20000200
 8000d10:	4002001c 	.word	0x4002001c
 8000d14:	40013800 	.word	0x40013800
 8000d18:	48000800 	.word	0x48000800
 8000d1c:	20000260 	.word	0x20000260
 8000d20:	40020030 	.word	0x40020030
 8000d24:	200002c0 	.word	0x200002c0
 8000d28:	40020044 	.word	0x40020044

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f90a 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA1_Channel1_IRQHandler+0x10>)
 8000d86:	f000 fc14 	bl	80015b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001a0 	.word	0x200001a0

08000d94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <DMA1_Channel2_IRQHandler+0x10>)
 8000d9a:	f000 fc0a 	bl	80015b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000200 	.word	0x20000200

08000da8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <DMA1_Channel3_IRQHandler+0x10>)
 8000dae:	f000 fc00 	bl	80015b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000260 	.word	0x20000260

08000dbc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <DMA1_Channel4_IRQHandler+0x10>)
 8000dc2:	f000 fbf6 	bl	80015b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200002c0 	.word	0x200002c0

08000dd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <USART1_IRQHandler+0x10>)
 8000dd6:	f002 f905 	bl	8002fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000010c 	.word	0x2000010c

08000de4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000de8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dec:	f000 fefc 	bl	8001be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <LPUART1_IRQHandler+0x10>)
 8000dfa:	f002 f8f3 	bl	8002fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000078 	.word	0x20000078

08000e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e38:	f003 fd0a 	bl	8004850 <__errno>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	220c      	movs	r2, #12
 8000e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20020000 	.word	0x20020000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	2000038c 	.word	0x2000038c
 8000e70:	200004e0 	.word	0x200004e0

08000e74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e9c:	f7ff ffea 	bl	8000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	; (8000ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <LoopForever+0xe>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ee4 <LoopForever+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f003 fcc9 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eca:	f7ff fb7f 	bl	80005cc <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   r0, =_estack
 8000ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000edc:	08005218 	.word	0x08005218
  ldr r2, =_sbss
 8000ee0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ee4:	200004dc 	.word	0x200004dc

08000ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_2_IRQHandler>

08000eea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f939 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f80e 	bl	8000f1c <HAL_InitTick>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	e001      	b.n	8000f10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f0c:	f7ff fd8a 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f10:	79fb      	ldrb	r3, [r7, #7]

}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_InitTick+0x68>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d022      	beq.n	8000f76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_InitTick+0x6c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <HAL_InitTick+0x68>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f944 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10f      	bne.n	8000f70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	d809      	bhi.n	8000f6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f56:	2200      	movs	r2, #0
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5e:	f000 f910 	bl	8001182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_InitTick+0x70>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	e007      	b.n	8000f7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e004      	b.n	8000f7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e001      	b.n	8000f7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000004 	.word	0x20000004

08000f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <HAL_IncTick+0x1c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a03      	ldr	r2, [pc, #12]	; (8000fac <HAL_IncTick+0x1c>)
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	20000390 	.word	0x20000390
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000390 	.word	0x20000390

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001190:	f7ff ff40 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f7ff ff90 	bl	80010c0 <NVIC_EncodePriority>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5f 	bl	800106c <__NVIC_SetPriority>
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff33 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffa4 	bl	8001128 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e08d      	b.n	800131a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	4b47      	ldr	r3, [pc, #284]	; (8001324 <HAL_DMA_Init+0x138>)
 8001206:	429a      	cmp	r2, r3
 8001208:	d80f      	bhi.n	800122a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	4b45      	ldr	r3, [pc, #276]	; (8001328 <HAL_DMA_Init+0x13c>)
 8001212:	4413      	add	r3, r2
 8001214:	4a45      	ldr	r2, [pc, #276]	; (800132c <HAL_DMA_Init+0x140>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	009a      	lsls	r2, r3, #2
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a42      	ldr	r2, [pc, #264]	; (8001330 <HAL_DMA_Init+0x144>)
 8001226:	641a      	str	r2, [r3, #64]	; 0x40
 8001228:	e00e      	b.n	8001248 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_DMA_Init+0x148>)
 8001232:	4413      	add	r3, r2
 8001234:	4a3d      	ldr	r2, [pc, #244]	; (800132c <HAL_DMA_Init+0x140>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	009a      	lsls	r2, r3, #2
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a3c      	ldr	r2, [pc, #240]	; (8001338 <HAL_DMA_Init+0x14c>)
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2202      	movs	r2, #2
 800124c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800125e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001262:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800126c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001278:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001284:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fa76 	bl	800178c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012a8:	d102      	bne.n	80012b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d010      	beq.n	80012f0 <HAL_DMA_Init+0x104>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d80c      	bhi.n	80012f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fa96 	bl	8001808 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	e008      	b.n	8001302 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40020407 	.word	0x40020407
 8001328:	bffdfff8 	.word	0xbffdfff8
 800132c:	cccccccd 	.word	0xcccccccd
 8001330:	40020000 	.word	0x40020000
 8001334:	bffdfbf8 	.word	0xbffdfbf8
 8001338:	40020400 	.word	0x40020400

0800133c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_DMA_Start_IT+0x20>
 8001358:	2302      	movs	r3, #2
 800135a:	e066      	b.n	800142a <HAL_DMA_Start_IT+0xee>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d155      	bne.n	800141c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2202      	movs	r2, #2
 8001374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0201 	bic.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	68f8      	ldr	r0, [r7, #12]
 8001396:	f000 f9bb 	bl	8001710 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f042 020e 	orr.w	r2, r2, #14
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	e00f      	b.n	80013d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0204 	bic.w	r2, r2, #4
 80013c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 020a 	orr.w	r2, r2, #10
 80013d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d007      	beq.n	80013f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001408:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e005      	b.n	8001428 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001424:	2302      	movs	r3, #2
 8001426:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d005      	beq.n	8001456 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2204      	movs	r2, #4
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e037      	b.n	80014c6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 020e 	bic.w	r2, r2, #14
 8001464:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001474:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0201 	bic.w	r2, r2, #1
 8001484:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f003 021f 	and.w	r2, r3, #31
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00c      	beq.n	80014c6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014ba:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d00d      	beq.n	8001518 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2204      	movs	r2, #4
 8001500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e047      	b.n	80015a8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 020e 	bic.w	r2, r2, #14
 8001526:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001546:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f003 021f 	and.w	r2, r3, #31
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2101      	movs	r1, #1
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001564:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00c      	beq.n	8001588 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001586:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
    }
  }
  return status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2204      	movs	r2, #4
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d026      	beq.n	800162c <HAL_DMA_IRQHandler+0x7a>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d021      	beq.n	800162c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d107      	bne.n	8001606 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0204 	bic.w	r2, r2, #4
 8001604:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f003 021f 	and.w	r2, r3, #31
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2104      	movs	r1, #4
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	2b00      	cmp	r3, #0
 8001620:	d071      	beq.n	8001706 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800162a:	e06c      	b.n	8001706 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	2202      	movs	r2, #2
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d02e      	beq.n	800169e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d029      	beq.n	800169e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10b      	bne.n	8001670 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 020a 	bic.w	r2, r2, #10
 8001666:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	2102      	movs	r1, #2
 800167e:	fa01 f202 	lsl.w	r2, r1, r2
 8001682:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	2b00      	cmp	r3, #0
 8001692:	d038      	beq.n	8001706 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800169c:	e033      	b.n	8001706 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	2208      	movs	r2, #8
 80016a8:	409a      	lsls	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d02a      	beq.n	8001708 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d025      	beq.n	8001708 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 020e 	bic.w	r2, r2, #14
 80016ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001706:	bf00      	nop
 8001708:	bf00      	nop
}
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001726:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001738:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f003 021f 	and.w	r2, r3, #31
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b10      	cmp	r3, #16
 800175c:	d108      	bne.n	8001770 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800176e:	e007      	b.n	8001780 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800179c:	429a      	cmp	r2, r3
 800179e:	d802      	bhi.n	80017a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80017a0:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e001      	b.n	80017aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80017a8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3b08      	subs	r3, #8
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	009a      	lsls	r2, r3, #2
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4413      	add	r3, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	2201      	movs	r2, #1
 80017e0:	409a      	lsls	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40020407 	.word	0x40020407
 80017f8:	40020800 	.word	0x40020800
 80017fc:	40020820 	.word	0x40020820
 8001800:	cccccccd 	.word	0xcccccccd
 8001804:	40020880 	.word	0x40020880

08001808 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	461a      	mov	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a08      	ldr	r2, [pc, #32]	; (800184c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800182a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3b01      	subs	r3, #1
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2201      	movs	r2, #1
 8001836:	409a      	lsls	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	1000823f 	.word	0x1000823f
 800184c:	40020940 	.word	0x40020940

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800185e:	e15a      	b.n	8001b16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 814c 	beq.w	8001b10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d005      	beq.n	8001890 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800188c:	2b02      	cmp	r3, #2
 800188e:	d130      	bne.n	80018f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c6:	2201      	movs	r2, #1
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 0201 	and.w	r2, r3, #1
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d017      	beq.n	800192e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d123      	bne.n	8001982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	6939      	ldr	r1, [r7, #16]
 800197e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0203 	and.w	r2, r3, #3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a6 	beq.w	8001b10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c4:	4b5b      	ldr	r3, [pc, #364]	; (8001b34 <HAL_GPIO_Init+0x2e4>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c8:	4a5a      	ldr	r2, [pc, #360]	; (8001b34 <HAL_GPIO_Init+0x2e4>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6613      	str	r3, [r2, #96]	; 0x60
 80019d0:	4b58      	ldr	r3, [pc, #352]	; (8001b34 <HAL_GPIO_Init+0x2e4>)
 80019d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019dc:	4a56      	ldr	r2, [pc, #344]	; (8001b38 <HAL_GPIO_Init+0x2e8>)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a06:	d01f      	beq.n	8001a48 <HAL_GPIO_Init+0x1f8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a4c      	ldr	r2, [pc, #304]	; (8001b3c <HAL_GPIO_Init+0x2ec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d019      	beq.n	8001a44 <HAL_GPIO_Init+0x1f4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a4b      	ldr	r2, [pc, #300]	; (8001b40 <HAL_GPIO_Init+0x2f0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d013      	beq.n	8001a40 <HAL_GPIO_Init+0x1f0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	; (8001b44 <HAL_GPIO_Init+0x2f4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x1ec>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a49      	ldr	r2, [pc, #292]	; (8001b48 <HAL_GPIO_Init+0x2f8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x1e8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a48      	ldr	r2, [pc, #288]	; (8001b4c <HAL_GPIO_Init+0x2fc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x1e4>
 8001a30:	2305      	movs	r3, #5
 8001a32:	e00a      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a34:	2306      	movs	r3, #6
 8001a36:	e008      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a38:	2304      	movs	r3, #4
 8001a3a:	e006      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e004      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_GPIO_Init+0x1fa>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	f002 0203 	and.w	r2, r2, #3
 8001a50:	0092      	lsls	r2, r2, #2
 8001a52:	4093      	lsls	r3, r2
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5a:	4937      	ldr	r1, [pc, #220]	; (8001b38 <HAL_GPIO_Init+0x2e8>)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	3302      	adds	r3, #2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a68:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a8c:	4a30      	ldr	r2, [pc, #192]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a92:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab6:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b0a:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_GPIO_Init+0x300>)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f47f ae9d 	bne.w	8001860 <HAL_GPIO_Init+0x10>
  }
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	48000800 	.word	0x48000800
 8001b44:	48000c00 	.word	0x48000c00
 8001b48:	48001000 	.word	0x48001000
 8001b4c:	48001400 	.word	0x48001400
 8001b50:	40010400 	.word	0x40010400

08001b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	e001      	b.n	8001b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	43d9      	mvns	r1, r3
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f806 	bl	8001c18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d141      	bne.n	8001cc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c3e:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4a:	d131      	bne.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c4c:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c52:	4a46      	ldr	r2, [pc, #280]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c64:	4a41      	ldr	r2, [pc, #260]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c6c:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2232      	movs	r2, #50	; 0x32
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	4a3f      	ldr	r2, [pc, #252]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	0c9b      	lsrs	r3, r3, #18
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c82:	e002      	b.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c8a:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c96:	d102      	bne.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f2      	bne.n	8001c84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c9e:	4b33      	ldr	r3, [pc, #204]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d158      	bne.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e057      	b.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cc0:	e04d      	b.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc8:	d141      	bne.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd6:	d131      	bne.n	8001d3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cde:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2232      	movs	r2, #50	; 0x32
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0c9b      	lsrs	r3, r3, #18
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d0e:	e002      	b.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	d102      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f2      	bne.n	8001d10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d112      	bne.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e011      	b.n	8001d60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d4c:	e007      	b.n	8001d5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	20000000 	.word	0x20000000
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d86:	6093      	str	r3, [r2, #8]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40007000 	.word	0x40007000

08001d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e2fe      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d075      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db6:	4b97      	ldr	r3, [pc, #604]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc0:	4b94      	ldr	r3, [pc, #592]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	d102      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3e>
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_OscConfig+0x44>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d10b      	bne.n	8001df4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ddc:	4b8d      	ldr	r3, [pc, #564]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d05b      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x108>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d157      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e2d9      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d106      	bne.n	8001e0c <HAL_RCC_OscConfig+0x74>
 8001dfe:	4b85      	ldr	r3, [pc, #532]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a84      	ldr	r2, [pc, #528]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e01d      	b.n	8001e48 <HAL_RCC_OscConfig+0xb0>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x98>
 8001e16:	4b7f      	ldr	r3, [pc, #508]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7e      	ldr	r2, [pc, #504]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a7b      	ldr	r2, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0xb0>
 8001e30:	4b78      	ldr	r3, [pc, #480]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a77      	ldr	r2, [pc, #476]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b75      	ldr	r3, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a74      	ldr	r2, [pc, #464]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f8b0 	bl	8000fb4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff f8ac 	bl	8000fb4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e29e      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6a:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0xc0>
 8001e76:	e014      	b.n	8001ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff f89c 	bl	8000fb4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff f898 	bl	8000fb4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e28a      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e92:	4b60      	ldr	r3, [pc, #384]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0xe8>
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d075      	beq.n	8001f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b0c      	cmp	r3, #12
 8001ec6:	d102      	bne.n	8001ece <HAL_RCC_OscConfig+0x136>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d002      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x13c>
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d11f      	bne.n	8001f14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x154>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e25d      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b49      	ldr	r3, [pc, #292]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	4946      	ldr	r1, [pc, #280]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f00:	4b45      	ldr	r3, [pc, #276]	; (8002018 <HAL_RCC_OscConfig+0x280>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f809 	bl	8000f1c <HAL_InitTick>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d043      	beq.n	8001f98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e249      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d023      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b3d      	ldr	r3, [pc, #244]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3c      	ldr	r2, [pc, #240]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff f844 	bl	8000fb4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff f840 	bl	8000fb4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e232      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	061b      	lsls	r3, r3, #24
 8001f5c:	492d      	ldr	r1, [pc, #180]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
 8001f62:	e01a      	b.n	8001f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2a      	ldr	r2, [pc, #168]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f820 	bl	8000fb4 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff f81c 	bl	8000fb4 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e20e      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1e0>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d041      	beq.n	800202a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d01c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb4:	4a17      	ldr	r2, [pc, #92]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fff9 	bl	8000fb4 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7fe fff5 	bl	8000fb4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e1e7      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0ef      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x22e>
 8001fe6:	e020      	b.n	800202a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x27c>)
 8001ff0:	f023 0301 	bic.w	r3, r3, #1
 8001ff4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7fe ffdc 	bl	8000fb4 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ffe:	e00d      	b.n	800201c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7fe ffd8 	bl	8000fb4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d906      	bls.n	800201c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1ca      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800201c:	4b8c      	ldr	r3, [pc, #560]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1ea      	bne.n	8002000 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80a6 	beq.w	8002184 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800203c:	4b84      	ldr	r3, [pc, #528]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_OscConfig+0x2b4>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x2b6>
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4a7e      	ldr	r2, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
 800205e:	4b7c      	ldr	r3, [pc, #496]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206e:	4b79      	ldr	r3, [pc, #484]	; (8002254 <HAL_RCC_OscConfig+0x4bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800207a:	4b76      	ldr	r3, [pc, #472]	; (8002254 <HAL_RCC_OscConfig+0x4bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a75      	ldr	r2, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x4bc>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7fe ff95 	bl	8000fb4 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7fe ff91 	bl	8000fb4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e183      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a0:	4b6c      	ldr	r3, [pc, #432]	; (8002254 <HAL_RCC_OscConfig+0x4bc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d108      	bne.n	80020c6 <HAL_RCC_OscConfig+0x32e>
 80020b4:	4b66      	ldr	r3, [pc, #408]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a65      	ldr	r2, [pc, #404]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c4:	e024      	b.n	8002110 <HAL_RCC_OscConfig+0x378>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d110      	bne.n	80020f0 <HAL_RCC_OscConfig+0x358>
 80020ce:	4b60      	ldr	r3, [pc, #384]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d4:	4a5e      	ldr	r2, [pc, #376]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020d6:	f043 0304 	orr.w	r3, r3, #4
 80020da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e4:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ee:	e00f      	b.n	8002110 <HAL_RCC_OscConfig+0x378>
 80020f0:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f6:	4a56      	ldr	r2, [pc, #344]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002100:	4b53      	ldr	r3, [pc, #332]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a52      	ldr	r2, [pc, #328]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d016      	beq.n	8002146 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002118:	f7fe ff4c 	bl	8000fb4 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	e00a      	b.n	8002136 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002120:	f7fe ff48 	bl	8000fb4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e138      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ed      	beq.n	8002120 <HAL_RCC_OscConfig+0x388>
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7fe ff35 	bl	8000fb4 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe ff31 	bl	8000fb4 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	; 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e121      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002164:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ed      	bne.n	800214e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002172:	7ffb      	ldrb	r3, [r7, #31]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4b35      	ldr	r3, [pc, #212]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	4a34      	ldr	r2, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d03c      	beq.n	800220a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800219a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219e:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe ff04 	bl	8000fb4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b0:	f7fe ff00 	bl	8000fb4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0f2      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ef      	beq.n	80021b0 <HAL_RCC_OscConfig+0x418>
 80021d0:	e01b      	b.n	800220a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d2:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f023 0301 	bic.w	r3, r3, #1
 80021de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e2:	f7fe fee7 	bl	8000fb4 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ea:	f7fe fee3 	bl	8000fb4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0d5      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ef      	bne.n	80021ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80c9 	beq.w	80023a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b0c      	cmp	r3, #12
 800221e:	f000 8083 	beq.w	8002328 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d15e      	bne.n	80022e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_RCC_OscConfig+0x4b8>)
 8002230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002236:	f7fe febd 	bl	8000fb4 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223c:	e00c      	b.n	8002258 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe feb9 	bl	8000fb4 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d905      	bls.n	8002258 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0ab      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002258:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ec      	bne.n	800223e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b52      	ldr	r3, [pc, #328]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	4b52      	ldr	r3, [pc, #328]	; (80023b4 <HAL_RCC_OscConfig+0x61c>)
 800226a:	4013      	ands	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6a11      	ldr	r1, [r2, #32]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002274:	3a01      	subs	r2, #1
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800227e:	0212      	lsls	r2, r2, #8
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002286:	0852      	lsrs	r2, r2, #1
 8002288:	3a01      	subs	r2, #1
 800228a:	0552      	lsls	r2, r2, #21
 800228c:	4311      	orrs	r1, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002292:	0852      	lsrs	r2, r2, #1
 8002294:	3a01      	subs	r2, #1
 8002296:	0652      	lsls	r2, r2, #25
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800229e:	06d2      	lsls	r2, r2, #27
 80022a0:	430a      	orrs	r2, r1
 80022a2:	4943      	ldr	r1, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 80022ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b4:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a3d      	ldr	r2, [pc, #244]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 80022ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fe78 	bl	8000fb4 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fe74 	bl	8000fb4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e066      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x530>
 80022e6:	e05e      	b.n	80023a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a30      	ldr	r2, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 80022ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fe5e 	bl	8000fb4 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe fe5a 	bl	8000fb4 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e04c      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800231a:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	4924      	ldr	r1, [pc, #144]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_RCC_OscConfig+0x620>)
 8002322:	4013      	ands	r3, r2
 8002324:	60cb      	str	r3, [r1, #12]
 8002326:	e03e      	b.n	80023a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e039      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_RCC_OscConfig+0x618>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	429a      	cmp	r2, r3
 8002346:	d12c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	3b01      	subs	r3, #1
 8002354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d123      	bne.n	80023a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d11b      	bne.n	80023a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d113      	bne.n	80023a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d109      	bne.n	80023a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	3b01      	subs	r3, #1
 800239c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	019f800c 	.word	0x019f800c
 80023b8:	feeefffc 	.word	0xfeeefffc

080023bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e11e      	b.n	8002612 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b91      	ldr	r3, [pc, #580]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d910      	bls.n	8002404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b8e      	ldr	r3, [pc, #568]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 020f 	bic.w	r2, r3, #15
 80023ea:	498c      	ldr	r1, [pc, #560]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b8a      	ldr	r3, [pc, #552]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e106      	b.n	8002612 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d073      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d129      	bne.n	800246c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002418:	4b81      	ldr	r3, [pc, #516]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0f4      	b.n	8002612 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002428:	f000 f99e 	bl	8002768 <RCC_GetSysClockFreqFromPLLSource>
 800242c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4a7c      	ldr	r2, [pc, #496]	; (8002624 <HAL_RCC_ClockConfig+0x268>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d93f      	bls.n	80024b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002436:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800244a:	2b00      	cmp	r3, #0
 800244c:	d033      	beq.n	80024b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002452:	2b00      	cmp	r3, #0
 8002454:	d12f      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002456:	4b72      	ldr	r3, [pc, #456]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245e:	4a70      	ldr	r2, [pc, #448]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002464:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	e024      	b.n	80024b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d107      	bne.n	8002484 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002474:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0c6      	b.n	8002612 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	4b66      	ldr	r3, [pc, #408]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0be      	b.n	8002612 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002494:	f000 f8ce 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 8002498:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4a61      	ldr	r2, [pc, #388]	; (8002624 <HAL_RCC_ClockConfig+0x268>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d909      	bls.n	80024b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024a2:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024aa:	4a5d      	ldr	r2, [pc, #372]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80024ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b5a      	ldr	r3, [pc, #360]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4957      	ldr	r1, [pc, #348]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c8:	f7fe fd74 	bl	8000fb4 <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7fe fd70 	bl	8000fb4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e095      	b.n	8002612 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b4e      	ldr	r3, [pc, #312]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d023      	beq.n	800254c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a42      	ldr	r2, [pc, #264]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800251a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002528:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002530:	4a3b      	ldr	r2, [pc, #236]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002532:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002536:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4936      	ldr	r1, [pc, #216]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
 800254a:	e008      	b.n	800255e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	d105      	bne.n	800255e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4a32      	ldr	r2, [pc, #200]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 8002558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800255c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800255e:	4b2f      	ldr	r3, [pc, #188]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d21d      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256c:	4b2b      	ldr	r3, [pc, #172]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 020f 	bic.w	r2, r3, #15
 8002574:	4929      	ldr	r1, [pc, #164]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800257c:	f7fe fd1a 	bl	8000fb4 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe fd16 	bl	8000fb4 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e03b      	b.n	8002612 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCC_ClockConfig+0x260>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1ed      	bne.n	8002584 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4917      	ldr	r1, [pc, #92]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	490f      	ldr	r1, [pc, #60]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e6:	f000 f825 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_RCC_ClockConfig+0x264>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	490c      	ldr	r1, [pc, #48]	; (8002628 <HAL_RCC_ClockConfig+0x26c>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_RCC_ClockConfig+0x270>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x274>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fc86 	bl	8000f1c <HAL_InitTick>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40022000 	.word	0x40022000
 8002620:	40021000 	.word	0x40021000
 8002624:	04c4b400 	.word	0x04c4b400
 8002628:	08005194 	.word	0x08005194
 800262c:	20000000 	.word	0x20000000
 8002630:	20000004 	.word	0x20000004

08002634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b087      	sub	sp, #28
 8002638:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b04      	cmp	r3, #4
 8002644:	d102      	bne.n	800264c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e047      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 030c 	and.w	r3, r3, #12
 8002654:	2b08      	cmp	r3, #8
 8002656:	d102      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e03e      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d136      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3301      	adds	r3, #1
 8002680:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	4a16      	ldr	r2, [pc, #88]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002692:	68d2      	ldr	r2, [r2, #12]
 8002694:	0a12      	lsrs	r2, r2, #8
 8002696:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	617b      	str	r3, [r7, #20]
      break;
 80026a0:	e00c      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a2:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4a10      	ldr	r2, [pc, #64]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	0a12      	lsrs	r2, r2, #8
 80026b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
      break;
 80026ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	0e5b      	lsrs	r3, r3, #25
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e001      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026dc:	693b      	ldr	r3, [r7, #16]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	371c      	adds	r7, #28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	016e3600 	.word	0x016e3600

080026f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002714:	f7ff fff0 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4904      	ldr	r1, [pc, #16]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	080051a4 	.word	0x080051a4

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002740:	f7ff ffda 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0adb      	lsrs	r3, r3, #11
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4904      	ldr	r1, [pc, #16]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	080051a4 	.word	0x080051a4

08002768 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	3301      	adds	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d10c      	bne.n	80027a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002796:	68d2      	ldr	r2, [r2, #12]
 8002798:	0a12      	lsrs	r2, r2, #8
 800279a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
    break;
 80027a4:	e00c      	b.n	80027c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027b0:	68d2      	ldr	r2, [r2, #12]
 80027b2:	0a12      	lsrs	r2, r2, #8
 80027b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027b8:	fb02 f303 	mul.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
    break;
 80027be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0e5b      	lsrs	r3, r3, #25
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	3301      	adds	r3, #1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027da:	687b      	ldr	r3, [r7, #4]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40021000 	.word	0x40021000
 80027ec:	016e3600 	.word	0x016e3600
 80027f0:	00f42400 	.word	0x00f42400

080027f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027fc:	2300      	movs	r3, #0
 80027fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002800:	2300      	movs	r3, #0
 8002802:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8098 	beq.w	8002942 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002812:	2300      	movs	r3, #0
 8002814:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282c:	6593      	str	r3, [r2, #88]	; 0x58
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283a:	2301      	movs	r3, #1
 800283c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a39      	ldr	r2, [pc, #228]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002848:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800284a:	f7fe fbb3 	bl	8000fb4 <HAL_GetTick>
 800284e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002850:	e009      	b.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fe fbaf 	bl	8000fb4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d902      	bls.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	74fb      	strb	r3, [r7, #19]
        break;
 8002864:	e005      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ef      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d159      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002878:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002882:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01e      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	429a      	cmp	r2, r3
 8002892:	d019      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800289e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	4a1f      	ldr	r2, [pc, #124]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b0:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d016      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fb6f 	bl	8000fb4 <HAL_GetTick>
 80028d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028d8:	e00b      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fe fb6b 	bl	8000fb4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d902      	bls.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	74fb      	strb	r3, [r7, #19]
            break;
 80028f0:	e006      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b0c      	ldr	r3, [pc, #48]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0ec      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002914:	4903      	ldr	r1, [pc, #12]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800291c:	e008      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	74bb      	strb	r3, [r7, #18]
 8002922:	e005      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002924:	40021000 	.word	0x40021000
 8002928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002930:	7c7b      	ldrb	r3, [r7, #17]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d105      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002936:	4ba7      	ldr	r3, [pc, #668]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	4aa6      	ldr	r2, [pc, #664]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002940:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800294e:	4ba1      	ldr	r3, [pc, #644]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f023 0203 	bic.w	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	499d      	ldr	r1, [pc, #628]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002970:	4b98      	ldr	r3, [pc, #608]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f023 020c 	bic.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4995      	ldr	r1, [pc, #596]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002992:	4b90      	ldr	r3, [pc, #576]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	498c      	ldr	r1, [pc, #560]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b4:	4b87      	ldr	r3, [pc, #540]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	4984      	ldr	r1, [pc, #528]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029d6:	4b7f      	ldr	r3, [pc, #508]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	497b      	ldr	r1, [pc, #492]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029f8:	4b76      	ldr	r3, [pc, #472]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	4973      	ldr	r1, [pc, #460]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a1a:	4b6e      	ldr	r3, [pc, #440]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	496a      	ldr	r1, [pc, #424]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a3c:	4b65      	ldr	r3, [pc, #404]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4962      	ldr	r1, [pc, #392]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	4959      	ldr	r1, [pc, #356]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a80:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a86:	f023 0203 	bic.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	4951      	ldr	r1, [pc, #324]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aa2:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab0:	4948      	ldr	r1, [pc, #288]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ac4:	4b43      	ldr	r3, [pc, #268]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4940      	ldr	r1, [pc, #256]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae4:	4b3b      	ldr	r3, [pc, #236]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	4932      	ldr	r1, [pc, #200]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a2c      	ldr	r2, [pc, #176]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	4924      	ldr	r1, [pc, #144]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b52:	d105      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d019      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bc2:	d109      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a02      	ldr	r2, [pc, #8]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bce:	60d3      	str	r3, [r2, #12]
 8002bd0:	e002      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	4926      	ldr	r1, [pc, #152]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c02:	d105      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	4918      	ldr	r1, [pc, #96]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d015      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c72:	d105      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c80:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000

08002c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e042      	b.n	8002d28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7fd fed9 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2224      	movs	r2, #36	; 0x24
 8002cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 ffd6 	bl	8003c8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fcd7 	bl	8003694 <UART_SetConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e01b      	b.n	8002d28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f001 f855 	bl	8003dd0 <UART_CheckIdleState>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d17b      	bne.n	8002e42 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_UART_Transmit+0x26>
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e074      	b.n	8002e44 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2221      	movs	r2, #33	; 0x21
 8002d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6a:	f7fe f923 	bl	8000fb4 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d108      	bne.n	8002d9c <HAL_UART_Transmit+0x6c>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da4:	e030      	b.n	8002e08 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f001 f8b7 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e03d      	b.n	8002e44 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	3302      	adds	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	e007      	b.n	8002df6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1c8      	bne.n	8002da6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2140      	movs	r1, #64	; 0x40
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f001 f880 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e006      	b.n	8002e44 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d167      	bne.n	8002f34 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_UART_Transmit_DMA+0x24>
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e060      	b.n	8002f36 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2221      	movs	r2, #33	; 0x21
 8002e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d028      	beq.n	8002ef4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea6:	4a26      	ldr	r2, [pc, #152]	; (8002f40 <HAL_UART_Transmit_DMA+0xf4>)
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eae:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_UART_Transmit_DMA+0xf8>)
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb6:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <HAL_UART_Transmit_DMA+0xfc>)
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3328      	adds	r3, #40	; 0x28
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	f7fe fa31 	bl	800133c <HAL_DMA_Start_IT>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e020      	b.n	8002f36 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	623a      	str	r2, [r7, #32]
 8002f1e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	69f9      	ldr	r1, [r7, #28]
 8002f22:	6a3a      	ldr	r2, [r7, #32]
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e5      	bne.n	8002efc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	0800429b 	.word	0x0800429b
 8002f44:	08004335 	.word	0x08004335
 8002f48:	080044bb 	.word	0x080044bb

08002f4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d137      	bne.n	8002fd4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_UART_Receive_DMA+0x24>
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e030      	b.n	8002fd6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_UART_Receive_DMA+0x94>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01f      	beq.n	8002fc4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	623b      	str	r3, [r7, #32]
 8002fb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	69f9      	ldr	r1, [r7, #28]
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e6      	bne.n	8002f92 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f001 f818 	bl	8004000 <UART_Start_Receive_DMA>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	e000      	b.n	8002fd6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fd4:	2302      	movs	r3, #2
  }
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3728      	adds	r7, #40	; 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40008000 	.word	0x40008000

08002fe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b0ba      	sub	sp, #232	; 0xe8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800300a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800300e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003012:	4013      	ands	r3, r2
 8003014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d11b      	bne.n	8003058 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d015      	beq.n	8003058 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800302c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800303c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 82e3 	beq.w	8003614 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
      }
      return;
 8003056:	e2dd      	b.n	8003614 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003058:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8123 	beq.w	80032a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003062:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003066:	4b8d      	ldr	r3, [pc, #564]	; (800329c <HAL_UART_IRQHandler+0x2b8>)
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800306e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003072:	4b8b      	ldr	r3, [pc, #556]	; (80032a0 <HAL_UART_IRQHandler+0x2bc>)
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8116 	beq.w	80032a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d011      	beq.n	80030ac <HAL_UART_IRQHandler+0xc8>
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2201      	movs	r2, #1
 800309a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d011      	beq.n	80030dc <HAL_UART_IRQHandler+0xf8>
 80030b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2202      	movs	r2, #2
 80030ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f043 0204 	orr.w	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d011      	beq.n	800310c <HAL_UART_IRQHandler+0x128>
 80030e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2204      	movs	r2, #4
 80030fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f043 0202 	orr.w	r2, r3, #2
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800310c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003124:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003128:	4b5c      	ldr	r3, [pc, #368]	; (800329c <HAL_UART_IRQHandler+0x2b8>)
 800312a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2208      	movs	r2, #8
 8003136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <HAL_UART_IRQHandler+0x196>
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003158:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00c      	beq.n	800317a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003168:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8249 	beq.w	8003618 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d013      	beq.n	80031ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800319e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d005      	beq.n	80031de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d054      	beq.n	8003288 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fff5 	bl	80041ce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d146      	bne.n	8003280 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3308      	adds	r3, #8
 80031f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800320c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3308      	adds	r3, #8
 800321a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800321e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800322a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800322e:	e841 2300 	strex	r3, r2, [r1]
 8003232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1d9      	bne.n	80031f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d017      	beq.n	8003278 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324e:	4a15      	ldr	r2, [pc, #84]	; (80032a4 <HAL_UART_IRQHandler+0x2c0>)
 8003250:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe f943 	bl	80014e4 <HAL_DMA_Abort_IT>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d019      	beq.n	8003298 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003272:	4610      	mov	r0, r2
 8003274:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003276:	e00f      	b.n	8003298 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f9f5 	bl	8003668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327e:	e00b      	b.n	8003298 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f9f1 	bl	8003668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003286:	e007      	b.n	8003298 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f9ed 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003296:	e1bf      	b.n	8003618 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	bf00      	nop
    return;
 800329a:	e1bd      	b.n	8003618 <HAL_UART_IRQHandler+0x634>
 800329c:	10000001 	.word	0x10000001
 80032a0:	04000120 	.word	0x04000120
 80032a4:	0800453b 	.word	0x0800453b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f040 8153 	bne.w	8003558 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 814c 	beq.w	8003558 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8145 	beq.w	8003558 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2210      	movs	r2, #16
 80032d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b40      	cmp	r3, #64	; 0x40
 80032e2:	f040 80bb 	bne.w	800345c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 818f 	beq.w	800361c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003304:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003308:	429a      	cmp	r2, r3
 800330a:	f080 8187 	bcs.w	800361c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003314:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 8087 	bne.w	800343a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003338:	e853 3f00 	ldrex	r3, [r3]
 800333c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800335a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003362:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800336e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1da      	bne.n	800332c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3308      	adds	r3, #8
 800337c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3308      	adds	r3, #8
 8003396:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800339a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800339e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e1      	bne.n	8003376 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3308      	adds	r3, #8
 80033b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3308      	adds	r3, #8
 80033d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e3      	bne.n	80033b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003408:	f023 0310 	bic.w	r3, r3, #16
 800340c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800341a:	65bb      	str	r3, [r7, #88]	; 0x58
 800341c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e4      	bne.n	80033f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd fffc 	bl	8001432 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800344c:	b29b      	uxth	r3, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	b29b      	uxth	r3, r3
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f911 	bl	800367c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800345a:	e0df      	b.n	800361c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003468:	b29b      	uxth	r3, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80d1 	beq.w	8003620 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800347e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80cc 	beq.w	8003620 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034aa:	647b      	str	r3, [r7, #68]	; 0x44
 80034ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e4      	bne.n	8003488 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3308      	adds	r3, #8
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	623b      	str	r3, [r7, #32]
   return(result);
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3308      	adds	r3, #8
 80034e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034e6:	633a      	str	r2, [r7, #48]	; 0x30
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e1      	bne.n	80034be <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	60fb      	str	r3, [r7, #12]
   return(result);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0310 	bic.w	r3, r3, #16
 8003522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	69b9      	ldr	r1, [r7, #24]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	617b      	str	r3, [r7, #20]
   return(result);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e4      	bne.n	800350e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800354a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f893 	bl	800367c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003556:	e063      	b.n	8003620 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00e      	beq.n	8003582 <HAL_UART_IRQHandler+0x59e>
 8003564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f001 f81e 	bl	80045bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003580:	e051      	b.n	8003626 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d014      	beq.n	80035b8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800358e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800359a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d03a      	beq.n	8003624 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
    }
    return;
 80035b6:	e035      	b.n	8003624 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_UART_IRQHandler+0x5f4>
 80035c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 ffc8 	bl	8004566 <UART_EndTransmit_IT>
    return;
 80035d6:	e026      	b.n	8003626 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80035d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_UART_IRQHandler+0x614>
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fff7 	bl	80045e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035f6:	e016      	b.n	8003626 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <HAL_UART_IRQHandler+0x642>
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	2b00      	cmp	r3, #0
 800360a:	da0c      	bge.n	8003626 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 ffdf 	bl	80045d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003612:	e008      	b.n	8003626 <HAL_UART_IRQHandler+0x642>
      return;
 8003614:	bf00      	nop
 8003616:	e006      	b.n	8003626 <HAL_UART_IRQHandler+0x642>
    return;
 8003618:	bf00      	nop
 800361a:	e004      	b.n	8003626 <HAL_UART_IRQHandler+0x642>
      return;
 800361c:	bf00      	nop
 800361e:	e002      	b.n	8003626 <HAL_UART_IRQHandler+0x642>
      return;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <HAL_UART_IRQHandler+0x642>
    return;
 8003624:	bf00      	nop
  }
}
 8003626:	37e8      	adds	r7, #232	; 0xe8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003698:	b08c      	sub	sp, #48	; 0x30
 800369a:	af00      	add	r7, sp, #0
 800369c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4baa      	ldr	r3, [pc, #680]	; (800396c <UART_SetConfig+0x2d8>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	6812      	ldr	r2, [r2, #0]
 80036ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a9f      	ldr	r2, [pc, #636]	; (8003970 <UART_SetConfig+0x2dc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036fc:	4313      	orrs	r3, r2
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800370a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003714:	430b      	orrs	r3, r1
 8003716:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f023 010f 	bic.w	r1, r3, #15
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a90      	ldr	r2, [pc, #576]	; (8003974 <UART_SetConfig+0x2e0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d125      	bne.n	8003784 <UART_SetConfig+0xf0>
 8003738:	4b8f      	ldr	r3, [pc, #572]	; (8003978 <UART_SetConfig+0x2e4>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b03      	cmp	r3, #3
 8003744:	d81a      	bhi.n	800377c <UART_SetConfig+0xe8>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <UART_SetConfig+0xb8>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	0800375d 	.word	0x0800375d
 8003750:	0800376d 	.word	0x0800376d
 8003754:	08003765 	.word	0x08003765
 8003758:	08003775 	.word	0x08003775
 800375c:	2301      	movs	r3, #1
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003762:	e116      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003764:	2302      	movs	r3, #2
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800376a:	e112      	b.n	8003992 <UART_SetConfig+0x2fe>
 800376c:	2304      	movs	r3, #4
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003772:	e10e      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003774:	2308      	movs	r3, #8
 8003776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800377a:	e10a      	b.n	8003992 <UART_SetConfig+0x2fe>
 800377c:	2310      	movs	r3, #16
 800377e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003782:	e106      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7c      	ldr	r2, [pc, #496]	; (800397c <UART_SetConfig+0x2e8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d138      	bne.n	8003800 <UART_SetConfig+0x16c>
 800378e:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <UART_SetConfig+0x2e4>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b0c      	cmp	r3, #12
 800379a:	d82d      	bhi.n	80037f8 <UART_SetConfig+0x164>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <UART_SetConfig+0x110>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037d9 	.word	0x080037d9
 80037a8:	080037f9 	.word	0x080037f9
 80037ac:	080037f9 	.word	0x080037f9
 80037b0:	080037f9 	.word	0x080037f9
 80037b4:	080037e9 	.word	0x080037e9
 80037b8:	080037f9 	.word	0x080037f9
 80037bc:	080037f9 	.word	0x080037f9
 80037c0:	080037f9 	.word	0x080037f9
 80037c4:	080037e1 	.word	0x080037e1
 80037c8:	080037f9 	.word	0x080037f9
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	080037f9 	.word	0x080037f9
 80037d4:	080037f1 	.word	0x080037f1
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037de:	e0d8      	b.n	8003992 <UART_SetConfig+0x2fe>
 80037e0:	2302      	movs	r3, #2
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e6:	e0d4      	b.n	8003992 <UART_SetConfig+0x2fe>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ee:	e0d0      	b.n	8003992 <UART_SetConfig+0x2fe>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037f6:	e0cc      	b.n	8003992 <UART_SetConfig+0x2fe>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037fe:	e0c8      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5e      	ldr	r2, [pc, #376]	; (8003980 <UART_SetConfig+0x2ec>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d125      	bne.n	8003856 <UART_SetConfig+0x1c2>
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <UART_SetConfig+0x2e4>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003814:	2b30      	cmp	r3, #48	; 0x30
 8003816:	d016      	beq.n	8003846 <UART_SetConfig+0x1b2>
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d818      	bhi.n	800384e <UART_SetConfig+0x1ba>
 800381c:	2b20      	cmp	r3, #32
 800381e:	d00a      	beq.n	8003836 <UART_SetConfig+0x1a2>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d814      	bhi.n	800384e <UART_SetConfig+0x1ba>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <UART_SetConfig+0x19a>
 8003828:	2b10      	cmp	r3, #16
 800382a:	d008      	beq.n	800383e <UART_SetConfig+0x1aa>
 800382c:	e00f      	b.n	800384e <UART_SetConfig+0x1ba>
 800382e:	2300      	movs	r3, #0
 8003830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003834:	e0ad      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003836:	2302      	movs	r3, #2
 8003838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383c:	e0a9      	b.n	8003992 <UART_SetConfig+0x2fe>
 800383e:	2304      	movs	r3, #4
 8003840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003844:	e0a5      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003846:	2308      	movs	r3, #8
 8003848:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800384c:	e0a1      	b.n	8003992 <UART_SetConfig+0x2fe>
 800384e:	2310      	movs	r3, #16
 8003850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003854:	e09d      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a4a      	ldr	r2, [pc, #296]	; (8003984 <UART_SetConfig+0x2f0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d125      	bne.n	80038ac <UART_SetConfig+0x218>
 8003860:	4b45      	ldr	r3, [pc, #276]	; (8003978 <UART_SetConfig+0x2e4>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800386a:	2bc0      	cmp	r3, #192	; 0xc0
 800386c:	d016      	beq.n	800389c <UART_SetConfig+0x208>
 800386e:	2bc0      	cmp	r3, #192	; 0xc0
 8003870:	d818      	bhi.n	80038a4 <UART_SetConfig+0x210>
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d00a      	beq.n	800388c <UART_SetConfig+0x1f8>
 8003876:	2b80      	cmp	r3, #128	; 0x80
 8003878:	d814      	bhi.n	80038a4 <UART_SetConfig+0x210>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <UART_SetConfig+0x1f0>
 800387e:	2b40      	cmp	r3, #64	; 0x40
 8003880:	d008      	beq.n	8003894 <UART_SetConfig+0x200>
 8003882:	e00f      	b.n	80038a4 <UART_SetConfig+0x210>
 8003884:	2300      	movs	r3, #0
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800388a:	e082      	b.n	8003992 <UART_SetConfig+0x2fe>
 800388c:	2302      	movs	r3, #2
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003892:	e07e      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003894:	2304      	movs	r3, #4
 8003896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389a:	e07a      	b.n	8003992 <UART_SetConfig+0x2fe>
 800389c:	2308      	movs	r3, #8
 800389e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a2:	e076      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038a4:	2310      	movs	r3, #16
 80038a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038aa:	e072      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a35      	ldr	r2, [pc, #212]	; (8003988 <UART_SetConfig+0x2f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d12a      	bne.n	800390c <UART_SetConfig+0x278>
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <UART_SetConfig+0x2e4>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038c4:	d01a      	beq.n	80038fc <UART_SetConfig+0x268>
 80038c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ca:	d81b      	bhi.n	8003904 <UART_SetConfig+0x270>
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d0:	d00c      	beq.n	80038ec <UART_SetConfig+0x258>
 80038d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d6:	d815      	bhi.n	8003904 <UART_SetConfig+0x270>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <UART_SetConfig+0x250>
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e0:	d008      	beq.n	80038f4 <UART_SetConfig+0x260>
 80038e2:	e00f      	b.n	8003904 <UART_SetConfig+0x270>
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ea:	e052      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f2:	e04e      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fa:	e04a      	b.n	8003992 <UART_SetConfig+0x2fe>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003902:	e046      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390a:	e042      	b.n	8003992 <UART_SetConfig+0x2fe>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a17      	ldr	r2, [pc, #92]	; (8003970 <UART_SetConfig+0x2dc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d13a      	bne.n	800398c <UART_SetConfig+0x2f8>
 8003916:	4b18      	ldr	r3, [pc, #96]	; (8003978 <UART_SetConfig+0x2e4>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003924:	d01a      	beq.n	800395c <UART_SetConfig+0x2c8>
 8003926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800392a:	d81b      	bhi.n	8003964 <UART_SetConfig+0x2d0>
 800392c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003930:	d00c      	beq.n	800394c <UART_SetConfig+0x2b8>
 8003932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003936:	d815      	bhi.n	8003964 <UART_SetConfig+0x2d0>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <UART_SetConfig+0x2b0>
 800393c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003940:	d008      	beq.n	8003954 <UART_SetConfig+0x2c0>
 8003942:	e00f      	b.n	8003964 <UART_SetConfig+0x2d0>
 8003944:	2300      	movs	r3, #0
 8003946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394a:	e022      	b.n	8003992 <UART_SetConfig+0x2fe>
 800394c:	2302      	movs	r3, #2
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003952:	e01e      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003954:	2304      	movs	r3, #4
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e01a      	b.n	8003992 <UART_SetConfig+0x2fe>
 800395c:	2308      	movs	r3, #8
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003962:	e016      	b.n	8003992 <UART_SetConfig+0x2fe>
 8003964:	2310      	movs	r3, #16
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396a:	e012      	b.n	8003992 <UART_SetConfig+0x2fe>
 800396c:	cfff69f3 	.word	0xcfff69f3
 8003970:	40008000 	.word	0x40008000
 8003974:	40013800 	.word	0x40013800
 8003978:	40021000 	.word	0x40021000
 800397c:	40004400 	.word	0x40004400
 8003980:	40004800 	.word	0x40004800
 8003984:	40004c00 	.word	0x40004c00
 8003988:	40005000 	.word	0x40005000
 800398c:	2310      	movs	r3, #16
 800398e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4aae      	ldr	r2, [pc, #696]	; (8003c50 <UART_SetConfig+0x5bc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	f040 8097 	bne.w	8003acc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800399e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d823      	bhi.n	80039ee <UART_SetConfig+0x35a>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <UART_SetConfig+0x318>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039d1 	.word	0x080039d1
 80039b0:	080039ef 	.word	0x080039ef
 80039b4:	080039d9 	.word	0x080039d9
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039df 	.word	0x080039df
 80039c0:	080039ef 	.word	0x080039ef
 80039c4:	080039ef 	.word	0x080039ef
 80039c8:	080039ef 	.word	0x080039ef
 80039cc:	080039e7 	.word	0x080039e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe fe9e 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039d6:	e010      	b.n	80039fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d8:	4b9e      	ldr	r3, [pc, #632]	; (8003c54 <UART_SetConfig+0x5c0>)
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039dc:	e00d      	b.n	80039fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039de:	f7fe fe29 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 80039e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039e4:	e009      	b.n	80039fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039ec:	e005      	b.n	80039fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8130 	beq.w	8003c62 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	4a94      	ldr	r2, [pc, #592]	; (8003c58 <UART_SetConfig+0x5c4>)
 8003a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	4413      	add	r3, r2
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d305      	bcc.n	8003a32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d903      	bls.n	8003a3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a38:	e113      	b.n	8003c62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	60fa      	str	r2, [r7, #12]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	4a84      	ldr	r2, [pc, #528]	; (8003c58 <UART_SetConfig+0x5c4>)
 8003a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2200      	movs	r2, #0
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a5c:	f7fc fc38 	bl	80002d0 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	020b      	lsls	r3, r1, #8
 8003a72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a76:	0202      	lsls	r2, r0, #8
 8003a78:	6979      	ldr	r1, [r7, #20]
 8003a7a:	6849      	ldr	r1, [r1, #4]
 8003a7c:	0849      	lsrs	r1, r1, #1
 8003a7e:	2000      	movs	r0, #0
 8003a80:	460c      	mov	r4, r1
 8003a82:	4605      	mov	r5, r0
 8003a84:	eb12 0804 	adds.w	r8, r2, r4
 8003a88:	eb43 0905 	adc.w	r9, r3, r5
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	469a      	mov	sl, r3
 8003a94:	4693      	mov	fp, r2
 8003a96:	4652      	mov	r2, sl
 8003a98:	465b      	mov	r3, fp
 8003a9a:	4640      	mov	r0, r8
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	f7fc fc17 	bl	80002d0 <__aeabi_uldivmod>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab0:	d308      	bcc.n	8003ac4 <UART_SetConfig+0x430>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab8:	d204      	bcs.n	8003ac4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a3a      	ldr	r2, [r7, #32]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	e0ce      	b.n	8003c62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003aca:	e0ca      	b.n	8003c62 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad4:	d166      	bne.n	8003ba4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003ad6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d827      	bhi.n	8003b2e <UART_SetConfig+0x49a>
 8003ade:	a201      	add	r2, pc, #4	; (adr r2, 8003ae4 <UART_SetConfig+0x450>)
 8003ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae4:	08003b09 	.word	0x08003b09
 8003ae8:	08003b11 	.word	0x08003b11
 8003aec:	08003b19 	.word	0x08003b19
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b1f 	.word	0x08003b1f
 8003af8:	08003b2f 	.word	0x08003b2f
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b08:	f7fe fe02 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8003b0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b0e:	e014      	b.n	8003b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b10:	f7fe fe14 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 8003b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b16:	e010      	b.n	8003b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b4e      	ldr	r3, [pc, #312]	; (8003c54 <UART_SetConfig+0x5c0>)
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b1c:	e00d      	b.n	8003b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7fe fd89 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b24:	e009      	b.n	8003b3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b2c:	e005      	b.n	8003b3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8090 	beq.w	8003c62 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	4a44      	ldr	r2, [pc, #272]	; (8003c58 <UART_SetConfig+0x5c4>)
 8003b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b54:	005a      	lsls	r2, r3, #1
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	441a      	add	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	d916      	bls.n	8003b9c <UART_SetConfig+0x508>
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d212      	bcs.n	8003b9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f023 030f 	bic.w	r3, r3, #15
 8003b7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	8bfb      	ldrh	r3, [r7, #30]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	8bfa      	ldrh	r2, [r7, #30]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	e062      	b.n	8003c62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ba2:	e05e      	b.n	8003c62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d828      	bhi.n	8003bfe <UART_SetConfig+0x56a>
 8003bac:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0x520>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bff 	.word	0x08003bff
 8003bc4:	08003bef 	.word	0x08003bef
 8003bc8:	08003bff 	.word	0x08003bff
 8003bcc:	08003bff 	.word	0x08003bff
 8003bd0:	08003bff 	.word	0x08003bff
 8003bd4:	08003bf7 	.word	0x08003bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7fe fd9a 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bde:	e014      	b.n	8003c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe fdac 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 8003be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003be6:	e010      	b.n	8003c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <UART_SetConfig+0x5c0>)
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bec:	e00d      	b.n	8003c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bee:	f7fe fd21 	bl	8002634 <HAL_RCC_GetSysClockFreq>
 8003bf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bf4:	e009      	b.n	8003c0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bfc:	e005      	b.n	8003c0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c08:	bf00      	nop
    }

    if (pclk != 0U)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d028      	beq.n	8003c62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <UART_SetConfig+0x5c4>)
 8003c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	441a      	add	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	d910      	bls.n	8003c5c <UART_SetConfig+0x5c8>
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d20c      	bcs.n	8003c5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60da      	str	r2, [r3, #12]
 8003c4c:	e009      	b.n	8003c62 <UART_SetConfig+0x5ce>
 8003c4e:	bf00      	nop
 8003c50:	40008000 	.word	0x40008000
 8003c54:	00f42400 	.word	0x00f42400
 8003c58:	080051ac 	.word	0x080051ac
      }
      else
      {
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003c7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	; 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01a      	beq.n	8003da2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d8a:	d10a      	bne.n	8003da2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b098      	sub	sp, #96	; 0x60
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de0:	f7fd f8e8 	bl	8000fb4 <HAL_GetTick>
 8003de4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d12f      	bne.n	8003e54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003df4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f88e 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d022      	beq.n	8003e54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e22:	653b      	str	r3, [r7, #80]	; 0x50
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e063      	b.n	8003f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d149      	bne.n	8003ef6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f857 	bl	8003f24 <UART_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d03c      	beq.n	8003ef6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	623b      	str	r3, [r7, #32]
   return(result);
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e6      	bne.n	8003e7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ece:	61fa      	str	r2, [r7, #28]
 8003ed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	69b9      	ldr	r1, [r7, #24]
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	617b      	str	r3, [r7, #20]
   return(result);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e5      	bne.n	8003eae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e012      	b.n	8003f1c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3758      	adds	r7, #88	; 0x58
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f34:	e04f      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3c:	d04b      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fd f839 	bl	8000fb4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e04e      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d037      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b80      	cmp	r3, #128	; 0x80
 8003f6a:	d034      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d031      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d110      	bne.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2208      	movs	r2, #8
 8003f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f920 	bl	80041ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2208      	movs	r2, #8
 8003f92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e029      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb0:	d111      	bne.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f906 	bl	80041ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e00f      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	bf0c      	ite	eq
 8003fe6:	2301      	moveq	r3, #1
 8003fe8:	2300      	movne	r3, #0
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d0a0      	beq.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b096      	sub	sp, #88	; 0x58
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	4613      	mov	r3, r2
 800400c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	88fa      	ldrh	r2, [r7, #6]
 8004018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2222      	movs	r2, #34	; 0x22
 8004028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d02d      	beq.n	8004092 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403c:	4a40      	ldr	r2, [pc, #256]	; (8004140 <UART_Start_Receive_DMA+0x140>)
 800403e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004046:	4a3f      	ldr	r2, [pc, #252]	; (8004144 <UART_Start_Receive_DMA+0x144>)
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004050:	4a3d      	ldr	r2, [pc, #244]	; (8004148 <UART_Start_Receive_DMA+0x148>)
 8004052:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405a:	2200      	movs	r2, #0
 800405c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3324      	adds	r3, #36	; 0x24
 800406a:	4619      	mov	r1, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	461a      	mov	r2, r3
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	f7fd f962 	bl	800133c <HAL_DMA_Start_IT>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2210      	movs	r2, #16
 8004082:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e051      	b.n	8004136 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d018      	beq.n	80040cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	657b      	str	r3, [r7, #84]	; 0x54
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e6      	bne.n	800409a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3308      	adds	r3, #8
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d6:	e853 3f00 	ldrex	r3, [r3]
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	653b      	str	r3, [r7, #80]	; 0x50
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040ec:	637a      	str	r2, [r7, #52]	; 0x34
 80040ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e5      	bne.n	80040cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	613b      	str	r3, [r7, #16]
   return(result);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004120:	623a      	str	r2, [r7, #32]
 8004122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	69f9      	ldr	r1, [r7, #28]
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	61bb      	str	r3, [r7, #24]
   return(result);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e5      	bne.n	8004100 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3758      	adds	r7, #88	; 0x58
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	08004351 	.word	0x08004351
 8004144:	0800447d 	.word	0x0800447d
 8004148:	080044bb 	.word	0x080044bb

0800414c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b08f      	sub	sp, #60	; 0x3c
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	61fb      	str	r3, [r7, #28]
   return(result);
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004174:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e6      	bne.n	8004154 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3308      	adds	r3, #8
 800418c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	60bb      	str	r3, [r7, #8]
   return(result);
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a6:	61ba      	str	r2, [r7, #24]
 80041a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6979      	ldr	r1, [r7, #20]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	613b      	str	r3, [r7, #16]
   return(result);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80041c2:	bf00      	nop
 80041c4:	373c      	adds	r7, #60	; 0x3c
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b095      	sub	sp, #84	; 0x54
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f4:	643b      	str	r3, [r7, #64]	; 0x40
 80041f6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e6      	bne.n	80041d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3308      	adds	r3, #8
 800420e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	61fb      	str	r3, [r7, #28]
   return(result);
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	64bb      	str	r3, [r7, #72]	; 0x48
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3308      	adds	r3, #8
 800422a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800422c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e3      	bne.n	8004208 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d118      	bne.n	800427a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	60bb      	str	r3, [r7, #8]
   return(result);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f023 0310 	bic.w	r3, r3, #16
 800425c:	647b      	str	r3, [r7, #68]	; 0x44
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6979      	ldr	r1, [r7, #20]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	613b      	str	r3, [r7, #16]
   return(result);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e6      	bne.n	8004248 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800428e:	bf00      	nop
 8004290:	3754      	adds	r7, #84	; 0x54
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b090      	sub	sp, #64	; 0x40
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d137      	bne.n	8004326 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	623b      	str	r3, [r7, #32]
   return(result);
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042de:	633a      	str	r2, [r7, #48]	; 0x30
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	e853 3f00 	ldrex	r3, [r3]
 80042fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004306:	637b      	str	r3, [r7, #52]	; 0x34
 8004308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	617b      	str	r3, [r7, #20]
   return(result);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e6      	bne.n	80042f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004324:	e002      	b.n	800432c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004326:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004328:	f7ff f980 	bl	800362c <HAL_UART_TxCpltCallback>
}
 800432c:	bf00      	nop
 800432e:	3740      	adds	r7, #64	; 0x40
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f7ff f97c 	bl	8003640 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b09c      	sub	sp, #112	; 0x70
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d171      	bne.n	8004450 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	2200      	movs	r2, #0
 8004370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004388:	66bb      	str	r3, [r7, #104]	; 0x68
 800438a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004392:	65bb      	str	r3, [r7, #88]	; 0x58
 8004394:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e6      	bne.n	8004374 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3308      	adds	r3, #8
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	667b      	str	r3, [r7, #100]	; 0x64
 80043be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043c6:	647a      	str	r2, [r7, #68]	; 0x44
 80043c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e5      	bne.n	80043a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	623b      	str	r3, [r7, #32]
   return(result);
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f0:	663b      	str	r3, [r7, #96]	; 0x60
 80043f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043fa:	633a      	str	r2, [r7, #48]	; 0x30
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e5      	bne.n	80043da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d118      	bne.n	8004450 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	60fb      	str	r3, [r7, #12]
   return(result);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0310 	bic.w	r3, r3, #16
 8004432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	69b9      	ldr	r1, [r7, #24]
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	617b      	str	r3, [r7, #20]
   return(result);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e6      	bne.n	800441e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004452:	2200      	movs	r2, #0
 8004454:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800445e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004464:	4619      	mov	r1, r3
 8004466:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004468:	f7ff f908 	bl	800367c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800446c:	e002      	b.n	8004474 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800446e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004470:	f7fc fa9e 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 8004474:	bf00      	nop
 8004476:	3770      	adds	r7, #112	; 0x70
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d109      	bne.n	80044ac <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	4619      	mov	r1, r3
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff f8e9 	bl	800367c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044aa:	e002      	b.n	80044b2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f7ff f8d1 	bl	8003654 <HAL_UART_RxHalfCpltCallback>
}
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d109      	bne.n	80044fa <UART_DMAError+0x40>
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b21      	cmp	r3, #33	; 0x21
 80044ea:	d106      	bne.n	80044fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f7ff fe29 	bl	800414c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d109      	bne.n	800451c <UART_DMAError+0x62>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b22      	cmp	r3, #34	; 0x22
 800450c:	d106      	bne.n	800451c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2200      	movs	r2, #0
 8004512:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	f7ff fe59 	bl	80041ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f043 0210 	orr.w	r2, r3, #16
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800452c:	6978      	ldr	r0, [r7, #20]
 800452e:	f7ff f89b 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff f885 	bl	8003668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	60bb      	str	r3, [r7, #8]
   return(result);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6979      	ldr	r1, [r7, #20]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	613b      	str	r3, [r7, #16]
   return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e6      	bne.n	800456e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff f83c 	bl	800362c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045b4:	bf00      	nop
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_UARTEx_DisableFifoMode+0x16>
 800460a:	2302      	movs	r3, #2
 800460c:	e027      	b.n	800465e <HAL_UARTEx_DisableFifoMode+0x66>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2224      	movs	r2, #36	; 0x24
 800461a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800463c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800467e:	2302      	movs	r3, #2
 8004680:	e02d      	b.n	80046de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2224      	movs	r2, #36	; 0x24
 800468e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f850 	bl	8004764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e02d      	b.n	800475a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2224      	movs	r2, #36	; 0x24
 800470a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0201 	bic.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f812 	bl	8004764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004770:	2b00      	cmp	r3, #0
 8004772:	d108      	bne.n	8004786 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004784:	e031      	b.n	80047ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004786:	2308      	movs	r3, #8
 8004788:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800478a:	2308      	movs	r3, #8
 800478c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	0e5b      	lsrs	r3, r3, #25
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	0f5b      	lsrs	r3, r3, #29
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047ae:	7bbb      	ldrb	r3, [r7, #14]
 80047b0:	7b3a      	ldrb	r2, [r7, #12]
 80047b2:	4911      	ldr	r1, [pc, #68]	; (80047f8 <UARTEx_SetNbDataToProcess+0x94>)
 80047b4:	5c8a      	ldrb	r2, [r1, r2]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047ba:	7b3a      	ldrb	r2, [r7, #12]
 80047bc:	490f      	ldr	r1, [pc, #60]	; (80047fc <UARTEx_SetNbDataToProcess+0x98>)
 80047be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	7b7a      	ldrb	r2, [r7, #13]
 80047d0:	4909      	ldr	r1, [pc, #36]	; (80047f8 <UARTEx_SetNbDataToProcess+0x94>)
 80047d2:	5c8a      	ldrb	r2, [r1, r2]
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047d8:	7b7a      	ldrb	r2, [r7, #13]
 80047da:	4908      	ldr	r1, [pc, #32]	; (80047fc <UARTEx_SetNbDataToProcess+0x98>)
 80047dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047de:	fb93 f3f2 	sdiv	r3, r3, r2
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	080051c4 	.word	0x080051c4
 80047fc:	080051cc 	.word	0x080051cc

08004800 <siprintf>:
 8004800:	b40e      	push	{r1, r2, r3}
 8004802:	b500      	push	{lr}
 8004804:	b09c      	sub	sp, #112	; 0x70
 8004806:	ab1d      	add	r3, sp, #116	; 0x74
 8004808:	9002      	str	r0, [sp, #8]
 800480a:	9006      	str	r0, [sp, #24]
 800480c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004810:	4809      	ldr	r0, [pc, #36]	; (8004838 <siprintf+0x38>)
 8004812:	9107      	str	r1, [sp, #28]
 8004814:	9104      	str	r1, [sp, #16]
 8004816:	4909      	ldr	r1, [pc, #36]	; (800483c <siprintf+0x3c>)
 8004818:	f853 2b04 	ldr.w	r2, [r3], #4
 800481c:	9105      	str	r1, [sp, #20]
 800481e:	6800      	ldr	r0, [r0, #0]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	a902      	add	r1, sp, #8
 8004824:	f000 f992 	bl	8004b4c <_svfiprintf_r>
 8004828:	9b02      	ldr	r3, [sp, #8]
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	b01c      	add	sp, #112	; 0x70
 8004830:	f85d eb04 	ldr.w	lr, [sp], #4
 8004834:	b003      	add	sp, #12
 8004836:	4770      	bx	lr
 8004838:	20000058 	.word	0x20000058
 800483c:	ffff0208 	.word	0xffff0208

08004840 <memset>:
 8004840:	4402      	add	r2, r0
 8004842:	4603      	mov	r3, r0
 8004844:	4293      	cmp	r3, r2
 8004846:	d100      	bne.n	800484a <memset+0xa>
 8004848:	4770      	bx	lr
 800484a:	f803 1b01 	strb.w	r1, [r3], #1
 800484e:	e7f9      	b.n	8004844 <memset+0x4>

08004850 <__errno>:
 8004850:	4b01      	ldr	r3, [pc, #4]	; (8004858 <__errno+0x8>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000058 	.word	0x20000058

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4d0d      	ldr	r5, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1b64      	subs	r4, r4, r5
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2600      	movs	r6, #0
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4d0b      	ldr	r5, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f000 fc6a 	bl	8005148 <_init>
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2600      	movs	r6, #0
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	08005210 	.word	0x08005210
 8004898:	08005210 	.word	0x08005210
 800489c:	08005210 	.word	0x08005210
 80048a0:	08005214 	.word	0x08005214

080048a4 <__retarget_lock_acquire_recursive>:
 80048a4:	4770      	bx	lr

080048a6 <__retarget_lock_release_recursive>:
 80048a6:	4770      	bx	lr

080048a8 <_free_r>:
 80048a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048aa:	2900      	cmp	r1, #0
 80048ac:	d044      	beq.n	8004938 <_free_r+0x90>
 80048ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048b2:	9001      	str	r0, [sp, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f1a1 0404 	sub.w	r4, r1, #4
 80048ba:	bfb8      	it	lt
 80048bc:	18e4      	addlt	r4, r4, r3
 80048be:	f000 f8df 	bl	8004a80 <__malloc_lock>
 80048c2:	4a1e      	ldr	r2, [pc, #120]	; (800493c <_free_r+0x94>)
 80048c4:	9801      	ldr	r0, [sp, #4]
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	b933      	cbnz	r3, 80048d8 <_free_r+0x30>
 80048ca:	6063      	str	r3, [r4, #4]
 80048cc:	6014      	str	r4, [r2, #0]
 80048ce:	b003      	add	sp, #12
 80048d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048d4:	f000 b8da 	b.w	8004a8c <__malloc_unlock>
 80048d8:	42a3      	cmp	r3, r4
 80048da:	d908      	bls.n	80048ee <_free_r+0x46>
 80048dc:	6825      	ldr	r5, [r4, #0]
 80048de:	1961      	adds	r1, r4, r5
 80048e0:	428b      	cmp	r3, r1
 80048e2:	bf01      	itttt	eq
 80048e4:	6819      	ldreq	r1, [r3, #0]
 80048e6:	685b      	ldreq	r3, [r3, #4]
 80048e8:	1949      	addeq	r1, r1, r5
 80048ea:	6021      	streq	r1, [r4, #0]
 80048ec:	e7ed      	b.n	80048ca <_free_r+0x22>
 80048ee:	461a      	mov	r2, r3
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	b10b      	cbz	r3, 80048f8 <_free_r+0x50>
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d9fa      	bls.n	80048ee <_free_r+0x46>
 80048f8:	6811      	ldr	r1, [r2, #0]
 80048fa:	1855      	adds	r5, r2, r1
 80048fc:	42a5      	cmp	r5, r4
 80048fe:	d10b      	bne.n	8004918 <_free_r+0x70>
 8004900:	6824      	ldr	r4, [r4, #0]
 8004902:	4421      	add	r1, r4
 8004904:	1854      	adds	r4, r2, r1
 8004906:	42a3      	cmp	r3, r4
 8004908:	6011      	str	r1, [r2, #0]
 800490a:	d1e0      	bne.n	80048ce <_free_r+0x26>
 800490c:	681c      	ldr	r4, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	6053      	str	r3, [r2, #4]
 8004912:	440c      	add	r4, r1
 8004914:	6014      	str	r4, [r2, #0]
 8004916:	e7da      	b.n	80048ce <_free_r+0x26>
 8004918:	d902      	bls.n	8004920 <_free_r+0x78>
 800491a:	230c      	movs	r3, #12
 800491c:	6003      	str	r3, [r0, #0]
 800491e:	e7d6      	b.n	80048ce <_free_r+0x26>
 8004920:	6825      	ldr	r5, [r4, #0]
 8004922:	1961      	adds	r1, r4, r5
 8004924:	428b      	cmp	r3, r1
 8004926:	bf04      	itt	eq
 8004928:	6819      	ldreq	r1, [r3, #0]
 800492a:	685b      	ldreq	r3, [r3, #4]
 800492c:	6063      	str	r3, [r4, #4]
 800492e:	bf04      	itt	eq
 8004930:	1949      	addeq	r1, r1, r5
 8004932:	6021      	streq	r1, [r4, #0]
 8004934:	6054      	str	r4, [r2, #4]
 8004936:	e7ca      	b.n	80048ce <_free_r+0x26>
 8004938:	b003      	add	sp, #12
 800493a:	bd30      	pop	{r4, r5, pc}
 800493c:	200004d4 	.word	0x200004d4

08004940 <sbrk_aligned>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4e0e      	ldr	r6, [pc, #56]	; (800497c <sbrk_aligned+0x3c>)
 8004944:	460c      	mov	r4, r1
 8004946:	6831      	ldr	r1, [r6, #0]
 8004948:	4605      	mov	r5, r0
 800494a:	b911      	cbnz	r1, 8004952 <sbrk_aligned+0x12>
 800494c:	f000 fba6 	bl	800509c <_sbrk_r>
 8004950:	6030      	str	r0, [r6, #0]
 8004952:	4621      	mov	r1, r4
 8004954:	4628      	mov	r0, r5
 8004956:	f000 fba1 	bl	800509c <_sbrk_r>
 800495a:	1c43      	adds	r3, r0, #1
 800495c:	d00a      	beq.n	8004974 <sbrk_aligned+0x34>
 800495e:	1cc4      	adds	r4, r0, #3
 8004960:	f024 0403 	bic.w	r4, r4, #3
 8004964:	42a0      	cmp	r0, r4
 8004966:	d007      	beq.n	8004978 <sbrk_aligned+0x38>
 8004968:	1a21      	subs	r1, r4, r0
 800496a:	4628      	mov	r0, r5
 800496c:	f000 fb96 	bl	800509c <_sbrk_r>
 8004970:	3001      	adds	r0, #1
 8004972:	d101      	bne.n	8004978 <sbrk_aligned+0x38>
 8004974:	f04f 34ff 	mov.w	r4, #4294967295
 8004978:	4620      	mov	r0, r4
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	200004d8 	.word	0x200004d8

08004980 <_malloc_r>:
 8004980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004984:	1ccd      	adds	r5, r1, #3
 8004986:	f025 0503 	bic.w	r5, r5, #3
 800498a:	3508      	adds	r5, #8
 800498c:	2d0c      	cmp	r5, #12
 800498e:	bf38      	it	cc
 8004990:	250c      	movcc	r5, #12
 8004992:	2d00      	cmp	r5, #0
 8004994:	4607      	mov	r7, r0
 8004996:	db01      	blt.n	800499c <_malloc_r+0x1c>
 8004998:	42a9      	cmp	r1, r5
 800499a:	d905      	bls.n	80049a8 <_malloc_r+0x28>
 800499c:	230c      	movs	r3, #12
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	2600      	movs	r6, #0
 80049a2:	4630      	mov	r0, r6
 80049a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a7c <_malloc_r+0xfc>
 80049ac:	f000 f868 	bl	8004a80 <__malloc_lock>
 80049b0:	f8d8 3000 	ldr.w	r3, [r8]
 80049b4:	461c      	mov	r4, r3
 80049b6:	bb5c      	cbnz	r4, 8004a10 <_malloc_r+0x90>
 80049b8:	4629      	mov	r1, r5
 80049ba:	4638      	mov	r0, r7
 80049bc:	f7ff ffc0 	bl	8004940 <sbrk_aligned>
 80049c0:	1c43      	adds	r3, r0, #1
 80049c2:	4604      	mov	r4, r0
 80049c4:	d155      	bne.n	8004a72 <_malloc_r+0xf2>
 80049c6:	f8d8 4000 	ldr.w	r4, [r8]
 80049ca:	4626      	mov	r6, r4
 80049cc:	2e00      	cmp	r6, #0
 80049ce:	d145      	bne.n	8004a5c <_malloc_r+0xdc>
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	d048      	beq.n	8004a66 <_malloc_r+0xe6>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	4631      	mov	r1, r6
 80049d8:	4638      	mov	r0, r7
 80049da:	eb04 0903 	add.w	r9, r4, r3
 80049de:	f000 fb5d 	bl	800509c <_sbrk_r>
 80049e2:	4581      	cmp	r9, r0
 80049e4:	d13f      	bne.n	8004a66 <_malloc_r+0xe6>
 80049e6:	6821      	ldr	r1, [r4, #0]
 80049e8:	1a6d      	subs	r5, r5, r1
 80049ea:	4629      	mov	r1, r5
 80049ec:	4638      	mov	r0, r7
 80049ee:	f7ff ffa7 	bl	8004940 <sbrk_aligned>
 80049f2:	3001      	adds	r0, #1
 80049f4:	d037      	beq.n	8004a66 <_malloc_r+0xe6>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	442b      	add	r3, r5
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d038      	beq.n	8004a76 <_malloc_r+0xf6>
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	42a2      	cmp	r2, r4
 8004a08:	d12b      	bne.n	8004a62 <_malloc_r+0xe2>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	e00f      	b.n	8004a30 <_malloc_r+0xb0>
 8004a10:	6822      	ldr	r2, [r4, #0]
 8004a12:	1b52      	subs	r2, r2, r5
 8004a14:	d41f      	bmi.n	8004a56 <_malloc_r+0xd6>
 8004a16:	2a0b      	cmp	r2, #11
 8004a18:	d917      	bls.n	8004a4a <_malloc_r+0xca>
 8004a1a:	1961      	adds	r1, r4, r5
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	6025      	str	r5, [r4, #0]
 8004a20:	bf18      	it	ne
 8004a22:	6059      	strne	r1, [r3, #4]
 8004a24:	6863      	ldr	r3, [r4, #4]
 8004a26:	bf08      	it	eq
 8004a28:	f8c8 1000 	streq.w	r1, [r8]
 8004a2c:	5162      	str	r2, [r4, r5]
 8004a2e:	604b      	str	r3, [r1, #4]
 8004a30:	4638      	mov	r0, r7
 8004a32:	f104 060b 	add.w	r6, r4, #11
 8004a36:	f000 f829 	bl	8004a8c <__malloc_unlock>
 8004a3a:	f026 0607 	bic.w	r6, r6, #7
 8004a3e:	1d23      	adds	r3, r4, #4
 8004a40:	1af2      	subs	r2, r6, r3
 8004a42:	d0ae      	beq.n	80049a2 <_malloc_r+0x22>
 8004a44:	1b9b      	subs	r3, r3, r6
 8004a46:	50a3      	str	r3, [r4, r2]
 8004a48:	e7ab      	b.n	80049a2 <_malloc_r+0x22>
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	6862      	ldr	r2, [r4, #4]
 8004a4e:	d1dd      	bne.n	8004a0c <_malloc_r+0x8c>
 8004a50:	f8c8 2000 	str.w	r2, [r8]
 8004a54:	e7ec      	b.n	8004a30 <_malloc_r+0xb0>
 8004a56:	4623      	mov	r3, r4
 8004a58:	6864      	ldr	r4, [r4, #4]
 8004a5a:	e7ac      	b.n	80049b6 <_malloc_r+0x36>
 8004a5c:	4634      	mov	r4, r6
 8004a5e:	6876      	ldr	r6, [r6, #4]
 8004a60:	e7b4      	b.n	80049cc <_malloc_r+0x4c>
 8004a62:	4613      	mov	r3, r2
 8004a64:	e7cc      	b.n	8004a00 <_malloc_r+0x80>
 8004a66:	230c      	movs	r3, #12
 8004a68:	603b      	str	r3, [r7, #0]
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	f000 f80e 	bl	8004a8c <__malloc_unlock>
 8004a70:	e797      	b.n	80049a2 <_malloc_r+0x22>
 8004a72:	6025      	str	r5, [r4, #0]
 8004a74:	e7dc      	b.n	8004a30 <_malloc_r+0xb0>
 8004a76:	605b      	str	r3, [r3, #4]
 8004a78:	deff      	udf	#255	; 0xff
 8004a7a:	bf00      	nop
 8004a7c:	200004d4 	.word	0x200004d4

08004a80 <__malloc_lock>:
 8004a80:	4801      	ldr	r0, [pc, #4]	; (8004a88 <__malloc_lock+0x8>)
 8004a82:	f7ff bf0f 	b.w	80048a4 <__retarget_lock_acquire_recursive>
 8004a86:	bf00      	nop
 8004a88:	200004d0 	.word	0x200004d0

08004a8c <__malloc_unlock>:
 8004a8c:	4801      	ldr	r0, [pc, #4]	; (8004a94 <__malloc_unlock+0x8>)
 8004a8e:	f7ff bf0a 	b.w	80048a6 <__retarget_lock_release_recursive>
 8004a92:	bf00      	nop
 8004a94:	200004d0 	.word	0x200004d0

08004a98 <__ssputs_r>:
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	688e      	ldr	r6, [r1, #8]
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	42be      	cmp	r6, r7
 8004aa2:	680b      	ldr	r3, [r1, #0]
 8004aa4:	4682      	mov	sl, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4690      	mov	r8, r2
 8004aaa:	d82c      	bhi.n	8004b06 <__ssputs_r+0x6e>
 8004aac:	898a      	ldrh	r2, [r1, #12]
 8004aae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ab2:	d026      	beq.n	8004b02 <__ssputs_r+0x6a>
 8004ab4:	6965      	ldr	r5, [r4, #20]
 8004ab6:	6909      	ldr	r1, [r1, #16]
 8004ab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004abc:	eba3 0901 	sub.w	r9, r3, r1
 8004ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ac4:	1c7b      	adds	r3, r7, #1
 8004ac6:	444b      	add	r3, r9
 8004ac8:	106d      	asrs	r5, r5, #1
 8004aca:	429d      	cmp	r5, r3
 8004acc:	bf38      	it	cc
 8004ace:	461d      	movcc	r5, r3
 8004ad0:	0553      	lsls	r3, r2, #21
 8004ad2:	d527      	bpl.n	8004b24 <__ssputs_r+0x8c>
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	f7ff ff53 	bl	8004980 <_malloc_r>
 8004ada:	4606      	mov	r6, r0
 8004adc:	b360      	cbz	r0, 8004b38 <__ssputs_r+0xa0>
 8004ade:	6921      	ldr	r1, [r4, #16]
 8004ae0:	464a      	mov	r2, r9
 8004ae2:	f000 faeb 	bl	80050bc <memcpy>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af0:	81a3      	strh	r3, [r4, #12]
 8004af2:	6126      	str	r6, [r4, #16]
 8004af4:	6165      	str	r5, [r4, #20]
 8004af6:	444e      	add	r6, r9
 8004af8:	eba5 0509 	sub.w	r5, r5, r9
 8004afc:	6026      	str	r6, [r4, #0]
 8004afe:	60a5      	str	r5, [r4, #8]
 8004b00:	463e      	mov	r6, r7
 8004b02:	42be      	cmp	r6, r7
 8004b04:	d900      	bls.n	8004b08 <__ssputs_r+0x70>
 8004b06:	463e      	mov	r6, r7
 8004b08:	6820      	ldr	r0, [r4, #0]
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	f000 faab 	bl	8005068 <memmove>
 8004b12:	68a3      	ldr	r3, [r4, #8]
 8004b14:	1b9b      	subs	r3, r3, r6
 8004b16:	60a3      	str	r3, [r4, #8]
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	4433      	add	r3, r6
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b24:	462a      	mov	r2, r5
 8004b26:	f000 fad7 	bl	80050d8 <_realloc_r>
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d1e0      	bne.n	8004af2 <__ssputs_r+0x5a>
 8004b30:	6921      	ldr	r1, [r4, #16]
 8004b32:	4650      	mov	r0, sl
 8004b34:	f7ff feb8 	bl	80048a8 <_free_r>
 8004b38:	230c      	movs	r3, #12
 8004b3a:	f8ca 3000 	str.w	r3, [sl]
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b44:	81a3      	strh	r3, [r4, #12]
 8004b46:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4a:	e7e9      	b.n	8004b20 <__ssputs_r+0x88>

08004b4c <_svfiprintf_r>:
 8004b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b50:	4698      	mov	r8, r3
 8004b52:	898b      	ldrh	r3, [r1, #12]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	b09d      	sub	sp, #116	; 0x74
 8004b58:	4607      	mov	r7, r0
 8004b5a:	460d      	mov	r5, r1
 8004b5c:	4614      	mov	r4, r2
 8004b5e:	d50e      	bpl.n	8004b7e <_svfiprintf_r+0x32>
 8004b60:	690b      	ldr	r3, [r1, #16]
 8004b62:	b963      	cbnz	r3, 8004b7e <_svfiprintf_r+0x32>
 8004b64:	2140      	movs	r1, #64	; 0x40
 8004b66:	f7ff ff0b 	bl	8004980 <_malloc_r>
 8004b6a:	6028      	str	r0, [r5, #0]
 8004b6c:	6128      	str	r0, [r5, #16]
 8004b6e:	b920      	cbnz	r0, 8004b7a <_svfiprintf_r+0x2e>
 8004b70:	230c      	movs	r3, #12
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	e0d0      	b.n	8004d1c <_svfiprintf_r+0x1d0>
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	616b      	str	r3, [r5, #20]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9309      	str	r3, [sp, #36]	; 0x24
 8004b82:	2320      	movs	r3, #32
 8004b84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b8c:	2330      	movs	r3, #48	; 0x30
 8004b8e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d34 <_svfiprintf_r+0x1e8>
 8004b92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b96:	f04f 0901 	mov.w	r9, #1
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	469a      	mov	sl, r3
 8004b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ba2:	b10a      	cbz	r2, 8004ba8 <_svfiprintf_r+0x5c>
 8004ba4:	2a25      	cmp	r2, #37	; 0x25
 8004ba6:	d1f9      	bne.n	8004b9c <_svfiprintf_r+0x50>
 8004ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bac:	d00b      	beq.n	8004bc6 <_svfiprintf_r+0x7a>
 8004bae:	465b      	mov	r3, fp
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	f7ff ff6f 	bl	8004a98 <__ssputs_r>
 8004bba:	3001      	adds	r0, #1
 8004bbc:	f000 80a9 	beq.w	8004d12 <_svfiprintf_r+0x1c6>
 8004bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bc2:	445a      	add	r2, fp
 8004bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8004bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a1 	beq.w	8004d12 <_svfiprintf_r+0x1c6>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bda:	f10a 0a01 	add.w	sl, sl, #1
 8004bde:	9304      	str	r3, [sp, #16]
 8004be0:	9307      	str	r3, [sp, #28]
 8004be2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004be6:	931a      	str	r3, [sp, #104]	; 0x68
 8004be8:	4654      	mov	r4, sl
 8004bea:	2205      	movs	r2, #5
 8004bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf0:	4850      	ldr	r0, [pc, #320]	; (8004d34 <_svfiprintf_r+0x1e8>)
 8004bf2:	f7fb fb1d 	bl	8000230 <memchr>
 8004bf6:	9a04      	ldr	r2, [sp, #16]
 8004bf8:	b9d8      	cbnz	r0, 8004c32 <_svfiprintf_r+0xe6>
 8004bfa:	06d0      	lsls	r0, r2, #27
 8004bfc:	bf44      	itt	mi
 8004bfe:	2320      	movmi	r3, #32
 8004c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c04:	0711      	lsls	r1, r2, #28
 8004c06:	bf44      	itt	mi
 8004c08:	232b      	movmi	r3, #43	; 0x2b
 8004c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c12:	2b2a      	cmp	r3, #42	; 0x2a
 8004c14:	d015      	beq.n	8004c42 <_svfiprintf_r+0xf6>
 8004c16:	9a07      	ldr	r2, [sp, #28]
 8004c18:	4654      	mov	r4, sl
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f04f 0c0a 	mov.w	ip, #10
 8004c20:	4621      	mov	r1, r4
 8004c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c26:	3b30      	subs	r3, #48	; 0x30
 8004c28:	2b09      	cmp	r3, #9
 8004c2a:	d94d      	bls.n	8004cc8 <_svfiprintf_r+0x17c>
 8004c2c:	b1b0      	cbz	r0, 8004c5c <_svfiprintf_r+0x110>
 8004c2e:	9207      	str	r2, [sp, #28]
 8004c30:	e014      	b.n	8004c5c <_svfiprintf_r+0x110>
 8004c32:	eba0 0308 	sub.w	r3, r0, r8
 8004c36:	fa09 f303 	lsl.w	r3, r9, r3
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	9304      	str	r3, [sp, #16]
 8004c3e:	46a2      	mov	sl, r4
 8004c40:	e7d2      	b.n	8004be8 <_svfiprintf_r+0x9c>
 8004c42:	9b03      	ldr	r3, [sp, #12]
 8004c44:	1d19      	adds	r1, r3, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	9103      	str	r1, [sp, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfbb      	ittet	lt
 8004c4e:	425b      	neglt	r3, r3
 8004c50:	f042 0202 	orrlt.w	r2, r2, #2
 8004c54:	9307      	strge	r3, [sp, #28]
 8004c56:	9307      	strlt	r3, [sp, #28]
 8004c58:	bfb8      	it	lt
 8004c5a:	9204      	strlt	r2, [sp, #16]
 8004c5c:	7823      	ldrb	r3, [r4, #0]
 8004c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c60:	d10c      	bne.n	8004c7c <_svfiprintf_r+0x130>
 8004c62:	7863      	ldrb	r3, [r4, #1]
 8004c64:	2b2a      	cmp	r3, #42	; 0x2a
 8004c66:	d134      	bne.n	8004cd2 <_svfiprintf_r+0x186>
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	9203      	str	r2, [sp, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bfb8      	it	lt
 8004c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c78:	3402      	adds	r4, #2
 8004c7a:	9305      	str	r3, [sp, #20]
 8004c7c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004d44 <_svfiprintf_r+0x1f8>
 8004c80:	7821      	ldrb	r1, [r4, #0]
 8004c82:	2203      	movs	r2, #3
 8004c84:	4650      	mov	r0, sl
 8004c86:	f7fb fad3 	bl	8000230 <memchr>
 8004c8a:	b138      	cbz	r0, 8004c9c <_svfiprintf_r+0x150>
 8004c8c:	9b04      	ldr	r3, [sp, #16]
 8004c8e:	eba0 000a 	sub.w	r0, r0, sl
 8004c92:	2240      	movs	r2, #64	; 0x40
 8004c94:	4082      	lsls	r2, r0
 8004c96:	4313      	orrs	r3, r2
 8004c98:	3401      	adds	r4, #1
 8004c9a:	9304      	str	r3, [sp, #16]
 8004c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca0:	4825      	ldr	r0, [pc, #148]	; (8004d38 <_svfiprintf_r+0x1ec>)
 8004ca2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ca6:	2206      	movs	r2, #6
 8004ca8:	f7fb fac2 	bl	8000230 <memchr>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d038      	beq.n	8004d22 <_svfiprintf_r+0x1d6>
 8004cb0:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <_svfiprintf_r+0x1f0>)
 8004cb2:	bb1b      	cbnz	r3, 8004cfc <_svfiprintf_r+0x1b0>
 8004cb4:	9b03      	ldr	r3, [sp, #12]
 8004cb6:	3307      	adds	r3, #7
 8004cb8:	f023 0307 	bic.w	r3, r3, #7
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	9303      	str	r3, [sp, #12]
 8004cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc2:	4433      	add	r3, r6
 8004cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc6:	e768      	b.n	8004b9a <_svfiprintf_r+0x4e>
 8004cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ccc:	460c      	mov	r4, r1
 8004cce:	2001      	movs	r0, #1
 8004cd0:	e7a6      	b.n	8004c20 <_svfiprintf_r+0xd4>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	3401      	adds	r4, #1
 8004cd6:	9305      	str	r3, [sp, #20]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f04f 0c0a 	mov.w	ip, #10
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ce4:	3a30      	subs	r2, #48	; 0x30
 8004ce6:	2a09      	cmp	r2, #9
 8004ce8:	d903      	bls.n	8004cf2 <_svfiprintf_r+0x1a6>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0c6      	beq.n	8004c7c <_svfiprintf_r+0x130>
 8004cee:	9105      	str	r1, [sp, #20]
 8004cf0:	e7c4      	b.n	8004c7c <_svfiprintf_r+0x130>
 8004cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e7f0      	b.n	8004cde <_svfiprintf_r+0x192>
 8004cfc:	ab03      	add	r3, sp, #12
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	462a      	mov	r2, r5
 8004d02:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <_svfiprintf_r+0x1f4>)
 8004d04:	a904      	add	r1, sp, #16
 8004d06:	4638      	mov	r0, r7
 8004d08:	f3af 8000 	nop.w
 8004d0c:	1c42      	adds	r2, r0, #1
 8004d0e:	4606      	mov	r6, r0
 8004d10:	d1d6      	bne.n	8004cc0 <_svfiprintf_r+0x174>
 8004d12:	89ab      	ldrh	r3, [r5, #12]
 8004d14:	065b      	lsls	r3, r3, #25
 8004d16:	f53f af2d 	bmi.w	8004b74 <_svfiprintf_r+0x28>
 8004d1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d1c:	b01d      	add	sp, #116	; 0x74
 8004d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d22:	ab03      	add	r3, sp, #12
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	462a      	mov	r2, r5
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <_svfiprintf_r+0x1f4>)
 8004d2a:	a904      	add	r1, sp, #16
 8004d2c:	4638      	mov	r0, r7
 8004d2e:	f000 f879 	bl	8004e24 <_printf_i>
 8004d32:	e7eb      	b.n	8004d0c <_svfiprintf_r+0x1c0>
 8004d34:	080051d4 	.word	0x080051d4
 8004d38:	080051de 	.word	0x080051de
 8004d3c:	00000000 	.word	0x00000000
 8004d40:	08004a99 	.word	0x08004a99
 8004d44:	080051da 	.word	0x080051da

08004d48 <_printf_common>:
 8004d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4c:	4616      	mov	r6, r2
 8004d4e:	4699      	mov	r9, r3
 8004d50:	688a      	ldr	r2, [r1, #8]
 8004d52:	690b      	ldr	r3, [r1, #16]
 8004d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	bfb8      	it	lt
 8004d5c:	4613      	movlt	r3, r2
 8004d5e:	6033      	str	r3, [r6, #0]
 8004d60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d64:	4607      	mov	r7, r0
 8004d66:	460c      	mov	r4, r1
 8004d68:	b10a      	cbz	r2, 8004d6e <_printf_common+0x26>
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	6033      	str	r3, [r6, #0]
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	0699      	lsls	r1, r3, #26
 8004d72:	bf42      	ittt	mi
 8004d74:	6833      	ldrmi	r3, [r6, #0]
 8004d76:	3302      	addmi	r3, #2
 8004d78:	6033      	strmi	r3, [r6, #0]
 8004d7a:	6825      	ldr	r5, [r4, #0]
 8004d7c:	f015 0506 	ands.w	r5, r5, #6
 8004d80:	d106      	bne.n	8004d90 <_printf_common+0x48>
 8004d82:	f104 0a19 	add.w	sl, r4, #25
 8004d86:	68e3      	ldr	r3, [r4, #12]
 8004d88:	6832      	ldr	r2, [r6, #0]
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	42ab      	cmp	r3, r5
 8004d8e:	dc26      	bgt.n	8004dde <_printf_common+0x96>
 8004d90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d94:	1e13      	subs	r3, r2, #0
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	bf18      	it	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	0692      	lsls	r2, r2, #26
 8004d9e:	d42b      	bmi.n	8004df8 <_printf_common+0xb0>
 8004da0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004da4:	4649      	mov	r1, r9
 8004da6:	4638      	mov	r0, r7
 8004da8:	47c0      	blx	r8
 8004daa:	3001      	adds	r0, #1
 8004dac:	d01e      	beq.n	8004dec <_printf_common+0xa4>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	6922      	ldr	r2, [r4, #16]
 8004db2:	f003 0306 	and.w	r3, r3, #6
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	bf02      	ittt	eq
 8004dba:	68e5      	ldreq	r5, [r4, #12]
 8004dbc:	6833      	ldreq	r3, [r6, #0]
 8004dbe:	1aed      	subeq	r5, r5, r3
 8004dc0:	68a3      	ldr	r3, [r4, #8]
 8004dc2:	bf0c      	ite	eq
 8004dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc8:	2500      	movne	r5, #0
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	bfc4      	itt	gt
 8004dce:	1a9b      	subgt	r3, r3, r2
 8004dd0:	18ed      	addgt	r5, r5, r3
 8004dd2:	2600      	movs	r6, #0
 8004dd4:	341a      	adds	r4, #26
 8004dd6:	42b5      	cmp	r5, r6
 8004dd8:	d11a      	bne.n	8004e10 <_printf_common+0xc8>
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e008      	b.n	8004df0 <_printf_common+0xa8>
 8004dde:	2301      	movs	r3, #1
 8004de0:	4652      	mov	r2, sl
 8004de2:	4649      	mov	r1, r9
 8004de4:	4638      	mov	r0, r7
 8004de6:	47c0      	blx	r8
 8004de8:	3001      	adds	r0, #1
 8004dea:	d103      	bne.n	8004df4 <_printf_common+0xac>
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df4:	3501      	adds	r5, #1
 8004df6:	e7c6      	b.n	8004d86 <_printf_common+0x3e>
 8004df8:	18e1      	adds	r1, r4, r3
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	2030      	movs	r0, #48	; 0x30
 8004dfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e02:	4422      	add	r2, r4
 8004e04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e0c:	3302      	adds	r3, #2
 8004e0e:	e7c7      	b.n	8004da0 <_printf_common+0x58>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4622      	mov	r2, r4
 8004e14:	4649      	mov	r1, r9
 8004e16:	4638      	mov	r0, r7
 8004e18:	47c0      	blx	r8
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d0e6      	beq.n	8004dec <_printf_common+0xa4>
 8004e1e:	3601      	adds	r6, #1
 8004e20:	e7d9      	b.n	8004dd6 <_printf_common+0x8e>
	...

08004e24 <_printf_i>:
 8004e24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	7e0f      	ldrb	r7, [r1, #24]
 8004e2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e2c:	2f78      	cmp	r7, #120	; 0x78
 8004e2e:	4691      	mov	r9, r2
 8004e30:	4680      	mov	r8, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	469a      	mov	sl, r3
 8004e36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e3a:	d807      	bhi.n	8004e4c <_printf_i+0x28>
 8004e3c:	2f62      	cmp	r7, #98	; 0x62
 8004e3e:	d80a      	bhi.n	8004e56 <_printf_i+0x32>
 8004e40:	2f00      	cmp	r7, #0
 8004e42:	f000 80d4 	beq.w	8004fee <_printf_i+0x1ca>
 8004e46:	2f58      	cmp	r7, #88	; 0x58
 8004e48:	f000 80c0 	beq.w	8004fcc <_printf_i+0x1a8>
 8004e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e54:	e03a      	b.n	8004ecc <_printf_i+0xa8>
 8004e56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e5a:	2b15      	cmp	r3, #21
 8004e5c:	d8f6      	bhi.n	8004e4c <_printf_i+0x28>
 8004e5e:	a101      	add	r1, pc, #4	; (adr r1, 8004e64 <_printf_i+0x40>)
 8004e60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e64:	08004ebd 	.word	0x08004ebd
 8004e68:	08004ed1 	.word	0x08004ed1
 8004e6c:	08004e4d 	.word	0x08004e4d
 8004e70:	08004e4d 	.word	0x08004e4d
 8004e74:	08004e4d 	.word	0x08004e4d
 8004e78:	08004e4d 	.word	0x08004e4d
 8004e7c:	08004ed1 	.word	0x08004ed1
 8004e80:	08004e4d 	.word	0x08004e4d
 8004e84:	08004e4d 	.word	0x08004e4d
 8004e88:	08004e4d 	.word	0x08004e4d
 8004e8c:	08004e4d 	.word	0x08004e4d
 8004e90:	08004fd5 	.word	0x08004fd5
 8004e94:	08004efd 	.word	0x08004efd
 8004e98:	08004f8f 	.word	0x08004f8f
 8004e9c:	08004e4d 	.word	0x08004e4d
 8004ea0:	08004e4d 	.word	0x08004e4d
 8004ea4:	08004ff7 	.word	0x08004ff7
 8004ea8:	08004e4d 	.word	0x08004e4d
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	08004e4d 	.word	0x08004e4d
 8004eb4:	08004e4d 	.word	0x08004e4d
 8004eb8:	08004f97 	.word	0x08004f97
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	1d1a      	adds	r2, r3, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	602a      	str	r2, [r5, #0]
 8004ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e09f      	b.n	8005010 <_printf_i+0x1ec>
 8004ed0:	6820      	ldr	r0, [r4, #0]
 8004ed2:	682b      	ldr	r3, [r5, #0]
 8004ed4:	0607      	lsls	r7, r0, #24
 8004ed6:	f103 0104 	add.w	r1, r3, #4
 8004eda:	6029      	str	r1, [r5, #0]
 8004edc:	d501      	bpl.n	8004ee2 <_printf_i+0xbe>
 8004ede:	681e      	ldr	r6, [r3, #0]
 8004ee0:	e003      	b.n	8004eea <_printf_i+0xc6>
 8004ee2:	0646      	lsls	r6, r0, #25
 8004ee4:	d5fb      	bpl.n	8004ede <_printf_i+0xba>
 8004ee6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004eea:	2e00      	cmp	r6, #0
 8004eec:	da03      	bge.n	8004ef6 <_printf_i+0xd2>
 8004eee:	232d      	movs	r3, #45	; 0x2d
 8004ef0:	4276      	negs	r6, r6
 8004ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef6:	485a      	ldr	r0, [pc, #360]	; (8005060 <_printf_i+0x23c>)
 8004ef8:	230a      	movs	r3, #10
 8004efa:	e012      	b.n	8004f22 <_printf_i+0xfe>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	1d19      	adds	r1, r3, #4
 8004f02:	6029      	str	r1, [r5, #0]
 8004f04:	0605      	lsls	r5, r0, #24
 8004f06:	d501      	bpl.n	8004f0c <_printf_i+0xe8>
 8004f08:	681e      	ldr	r6, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <_printf_i+0xee>
 8004f0c:	0641      	lsls	r1, r0, #25
 8004f0e:	d5fb      	bpl.n	8004f08 <_printf_i+0xe4>
 8004f10:	881e      	ldrh	r6, [r3, #0]
 8004f12:	4853      	ldr	r0, [pc, #332]	; (8005060 <_printf_i+0x23c>)
 8004f14:	2f6f      	cmp	r7, #111	; 0x6f
 8004f16:	bf0c      	ite	eq
 8004f18:	2308      	moveq	r3, #8
 8004f1a:	230a      	movne	r3, #10
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f22:	6865      	ldr	r5, [r4, #4]
 8004f24:	60a5      	str	r5, [r4, #8]
 8004f26:	2d00      	cmp	r5, #0
 8004f28:	bfa2      	ittt	ge
 8004f2a:	6821      	ldrge	r1, [r4, #0]
 8004f2c:	f021 0104 	bicge.w	r1, r1, #4
 8004f30:	6021      	strge	r1, [r4, #0]
 8004f32:	b90e      	cbnz	r6, 8004f38 <_printf_i+0x114>
 8004f34:	2d00      	cmp	r5, #0
 8004f36:	d04b      	beq.n	8004fd0 <_printf_i+0x1ac>
 8004f38:	4615      	mov	r5, r2
 8004f3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f3e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f42:	5dc7      	ldrb	r7, [r0, r7]
 8004f44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f48:	4637      	mov	r7, r6
 8004f4a:	42bb      	cmp	r3, r7
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	d9f4      	bls.n	8004f3a <_printf_i+0x116>
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d10b      	bne.n	8004f6c <_printf_i+0x148>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	07de      	lsls	r6, r3, #31
 8004f58:	d508      	bpl.n	8004f6c <_printf_i+0x148>
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	6861      	ldr	r1, [r4, #4]
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	bfde      	ittt	le
 8004f62:	2330      	movle	r3, #48	; 0x30
 8004f64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f6c:	1b52      	subs	r2, r2, r5
 8004f6e:	6122      	str	r2, [r4, #16]
 8004f70:	f8cd a000 	str.w	sl, [sp]
 8004f74:	464b      	mov	r3, r9
 8004f76:	aa03      	add	r2, sp, #12
 8004f78:	4621      	mov	r1, r4
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	f7ff fee4 	bl	8004d48 <_printf_common>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d14a      	bne.n	800501a <_printf_i+0x1f6>
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	b004      	add	sp, #16
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f043 0320 	orr.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	4833      	ldr	r0, [pc, #204]	; (8005064 <_printf_i+0x240>)
 8004f98:	2778      	movs	r7, #120	; 0x78
 8004f9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	6829      	ldr	r1, [r5, #0]
 8004fa2:	061f      	lsls	r7, r3, #24
 8004fa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fa8:	d402      	bmi.n	8004fb0 <_printf_i+0x18c>
 8004faa:	065f      	lsls	r7, r3, #25
 8004fac:	bf48      	it	mi
 8004fae:	b2b6      	uxthmi	r6, r6
 8004fb0:	07df      	lsls	r7, r3, #31
 8004fb2:	bf48      	it	mi
 8004fb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fb8:	6029      	str	r1, [r5, #0]
 8004fba:	bf48      	it	mi
 8004fbc:	6023      	strmi	r3, [r4, #0]
 8004fbe:	b91e      	cbnz	r6, 8004fc8 <_printf_i+0x1a4>
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	f023 0320 	bic.w	r3, r3, #32
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	2310      	movs	r3, #16
 8004fca:	e7a7      	b.n	8004f1c <_printf_i+0xf8>
 8004fcc:	4824      	ldr	r0, [pc, #144]	; (8005060 <_printf_i+0x23c>)
 8004fce:	e7e4      	b.n	8004f9a <_printf_i+0x176>
 8004fd0:	4615      	mov	r5, r2
 8004fd2:	e7bd      	b.n	8004f50 <_printf_i+0x12c>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	6826      	ldr	r6, [r4, #0]
 8004fd8:	6961      	ldr	r1, [r4, #20]
 8004fda:	1d18      	adds	r0, r3, #4
 8004fdc:	6028      	str	r0, [r5, #0]
 8004fde:	0635      	lsls	r5, r6, #24
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	d501      	bpl.n	8004fe8 <_printf_i+0x1c4>
 8004fe4:	6019      	str	r1, [r3, #0]
 8004fe6:	e002      	b.n	8004fee <_printf_i+0x1ca>
 8004fe8:	0670      	lsls	r0, r6, #25
 8004fea:	d5fb      	bpl.n	8004fe4 <_printf_i+0x1c0>
 8004fec:	8019      	strh	r1, [r3, #0]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	4615      	mov	r5, r2
 8004ff4:	e7bc      	b.n	8004f70 <_printf_i+0x14c>
 8004ff6:	682b      	ldr	r3, [r5, #0]
 8004ff8:	1d1a      	adds	r2, r3, #4
 8004ffa:	602a      	str	r2, [r5, #0]
 8004ffc:	681d      	ldr	r5, [r3, #0]
 8004ffe:	6862      	ldr	r2, [r4, #4]
 8005000:	2100      	movs	r1, #0
 8005002:	4628      	mov	r0, r5
 8005004:	f7fb f914 	bl	8000230 <memchr>
 8005008:	b108      	cbz	r0, 800500e <_printf_i+0x1ea>
 800500a:	1b40      	subs	r0, r0, r5
 800500c:	6060      	str	r0, [r4, #4]
 800500e:	6863      	ldr	r3, [r4, #4]
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	2300      	movs	r3, #0
 8005014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005018:	e7aa      	b.n	8004f70 <_printf_i+0x14c>
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	462a      	mov	r2, r5
 800501e:	4649      	mov	r1, r9
 8005020:	4640      	mov	r0, r8
 8005022:	47d0      	blx	sl
 8005024:	3001      	adds	r0, #1
 8005026:	d0ad      	beq.n	8004f84 <_printf_i+0x160>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	079b      	lsls	r3, r3, #30
 800502c:	d413      	bmi.n	8005056 <_printf_i+0x232>
 800502e:	68e0      	ldr	r0, [r4, #12]
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	4298      	cmp	r0, r3
 8005034:	bfb8      	it	lt
 8005036:	4618      	movlt	r0, r3
 8005038:	e7a6      	b.n	8004f88 <_printf_i+0x164>
 800503a:	2301      	movs	r3, #1
 800503c:	4632      	mov	r2, r6
 800503e:	4649      	mov	r1, r9
 8005040:	4640      	mov	r0, r8
 8005042:	47d0      	blx	sl
 8005044:	3001      	adds	r0, #1
 8005046:	d09d      	beq.n	8004f84 <_printf_i+0x160>
 8005048:	3501      	adds	r5, #1
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	9903      	ldr	r1, [sp, #12]
 800504e:	1a5b      	subs	r3, r3, r1
 8005050:	42ab      	cmp	r3, r5
 8005052:	dcf2      	bgt.n	800503a <_printf_i+0x216>
 8005054:	e7eb      	b.n	800502e <_printf_i+0x20a>
 8005056:	2500      	movs	r5, #0
 8005058:	f104 0619 	add.w	r6, r4, #25
 800505c:	e7f5      	b.n	800504a <_printf_i+0x226>
 800505e:	bf00      	nop
 8005060:	080051e5 	.word	0x080051e5
 8005064:	080051f6 	.word	0x080051f6

08005068 <memmove>:
 8005068:	4288      	cmp	r0, r1
 800506a:	b510      	push	{r4, lr}
 800506c:	eb01 0402 	add.w	r4, r1, r2
 8005070:	d902      	bls.n	8005078 <memmove+0x10>
 8005072:	4284      	cmp	r4, r0
 8005074:	4623      	mov	r3, r4
 8005076:	d807      	bhi.n	8005088 <memmove+0x20>
 8005078:	1e43      	subs	r3, r0, #1
 800507a:	42a1      	cmp	r1, r4
 800507c:	d008      	beq.n	8005090 <memmove+0x28>
 800507e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005082:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005086:	e7f8      	b.n	800507a <memmove+0x12>
 8005088:	4402      	add	r2, r0
 800508a:	4601      	mov	r1, r0
 800508c:	428a      	cmp	r2, r1
 800508e:	d100      	bne.n	8005092 <memmove+0x2a>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800509a:	e7f7      	b.n	800508c <memmove+0x24>

0800509c <_sbrk_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4d06      	ldr	r5, [pc, #24]	; (80050b8 <_sbrk_r+0x1c>)
 80050a0:	2300      	movs	r3, #0
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	f7fb feae 	bl	8000e08 <_sbrk>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	d102      	bne.n	80050b6 <_sbrk_r+0x1a>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b103      	cbz	r3, 80050b6 <_sbrk_r+0x1a>
 80050b4:	6023      	str	r3, [r4, #0]
 80050b6:	bd38      	pop	{r3, r4, r5, pc}
 80050b8:	200004cc 	.word	0x200004cc

080050bc <memcpy>:
 80050bc:	440a      	add	r2, r1
 80050be:	4291      	cmp	r1, r2
 80050c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050c4:	d100      	bne.n	80050c8 <memcpy+0xc>
 80050c6:	4770      	bx	lr
 80050c8:	b510      	push	{r4, lr}
 80050ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d2:	4291      	cmp	r1, r2
 80050d4:	d1f9      	bne.n	80050ca <memcpy+0xe>
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <_realloc_r>:
 80050d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050dc:	4680      	mov	r8, r0
 80050de:	4614      	mov	r4, r2
 80050e0:	460e      	mov	r6, r1
 80050e2:	b921      	cbnz	r1, 80050ee <_realloc_r+0x16>
 80050e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050e8:	4611      	mov	r1, r2
 80050ea:	f7ff bc49 	b.w	8004980 <_malloc_r>
 80050ee:	b92a      	cbnz	r2, 80050fc <_realloc_r+0x24>
 80050f0:	f7ff fbda 	bl	80048a8 <_free_r>
 80050f4:	4625      	mov	r5, r4
 80050f6:	4628      	mov	r0, r5
 80050f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050fc:	f000 f81b 	bl	8005136 <_malloc_usable_size_r>
 8005100:	4284      	cmp	r4, r0
 8005102:	4607      	mov	r7, r0
 8005104:	d802      	bhi.n	800510c <_realloc_r+0x34>
 8005106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800510a:	d812      	bhi.n	8005132 <_realloc_r+0x5a>
 800510c:	4621      	mov	r1, r4
 800510e:	4640      	mov	r0, r8
 8005110:	f7ff fc36 	bl	8004980 <_malloc_r>
 8005114:	4605      	mov	r5, r0
 8005116:	2800      	cmp	r0, #0
 8005118:	d0ed      	beq.n	80050f6 <_realloc_r+0x1e>
 800511a:	42bc      	cmp	r4, r7
 800511c:	4622      	mov	r2, r4
 800511e:	4631      	mov	r1, r6
 8005120:	bf28      	it	cs
 8005122:	463a      	movcs	r2, r7
 8005124:	f7ff ffca 	bl	80050bc <memcpy>
 8005128:	4631      	mov	r1, r6
 800512a:	4640      	mov	r0, r8
 800512c:	f7ff fbbc 	bl	80048a8 <_free_r>
 8005130:	e7e1      	b.n	80050f6 <_realloc_r+0x1e>
 8005132:	4635      	mov	r5, r6
 8005134:	e7df      	b.n	80050f6 <_realloc_r+0x1e>

08005136 <_malloc_usable_size_r>:
 8005136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800513a:	1f18      	subs	r0, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	bfbc      	itt	lt
 8005140:	580b      	ldrlt	r3, [r1, r0]
 8005142:	18c0      	addlt	r0, r0, r3
 8005144:	4770      	bx	lr
	...

08005148 <_init>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr

08005154 <_fini>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	bf00      	nop
 8005158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515a:	bc08      	pop	{r3}
 800515c:	469e      	mov	lr, r3
 800515e:	4770      	bx	lr
