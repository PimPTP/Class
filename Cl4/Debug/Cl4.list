
Cl4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b70  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d88  08004d88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d90  08004d90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d94  08004d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08004da4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004da4  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000116ad  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020dc  00000000  00000000  0003172c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00033808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c43  00000000  00000000  000347a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  000353eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ee0  00000000  00000000  0005aa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b86  00000000  00000000  0006c948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042ac  00000000  00000000  001644d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  0016877c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004d30 	.word	0x08004d30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004d30 	.word	0x08004d30

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fbff 	bl	8000d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f862 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa0e 	bl	8000940 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f8aa 	bl	800067c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000528:	f000 f992 	bl	8000850 <MX_TIM3_Init>
  MX_TIM1_Init();
 800052c:	f000 f8f0 	bl	8000710 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000530:	4825      	ldr	r0, [pc, #148]	; (80005c8 <main+0xb4>)
 8000532:	f001 ffd1 	bl	80024d8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000536:	2100      	movs	r1, #0
 8000538:	4823      	ldr	r0, [pc, #140]	; (80005c8 <main+0xb4>)
 800053a:	f002 f89f 	bl	800267c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 800053e:	4823      	ldr	r0, [pc, #140]	; (80005cc <main+0xb8>)
 8000540:	f001 ffca 	bl	80024d8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000544:	2100      	movs	r1, #0
 8000546:	4821      	ldr	r0, [pc, #132]	; (80005cc <main+0xb8>)
 8000548:	f002 fa0c 	bl	8002964 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 800054c:	2104      	movs	r1, #4
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <main+0xb8>)
 8000550:	f002 fa08 	bl	8002964 <HAL_TIM_IC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8000554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000558:	481d      	ldr	r0, [pc, #116]	; (80005d0 <main+0xbc>)
 800055a:	f000 fee1 	bl	8001320 <HAL_GPIO_ReadPin>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d005      	beq.n	8000570 <main+0x5c>
	  {
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <main+0xb4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
 800056e:	e004      	b.n	800057a <main+0x66>
	  }
	  else
	  {
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <main+0xb4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  Rise = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <main+0xb8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000580:	b29a      	uxth	r2, r3
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0xc0>)
 8000584:	801a      	strh	r2, [r3, #0]
	  Fall = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_2);
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <main+0xb8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <main+0xc4>)
 8000590:	801a      	strh	r2, [r3, #0]
	  dt = Fall - Rise;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <main+0xc4>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	461a      	mov	r2, r3
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <main+0xc0>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <main+0xc8>)
 80005a0:	6013      	str	r3, [r2, #0]
	  if(Rise>Fall)
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <main+0xc0>)
 80005a4:	881a      	ldrh	r2, [r3, #0]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0xc4>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d907      	bls.n	80005be <main+0xaa>
	  ServoTime = dt + 65535 ;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <main+0xc8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80005b6:	33ff      	adds	r3, #255	; 0xff
 80005b8:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <main+0xcc>)
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	e7ca      	b.n	8000554 <main+0x40>
	  else
	  ServoTime = dt;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0xc8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <main+0xcc>)
 80005c4:	6013      	str	r3, [r2, #0]
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80005c6:	e7c5      	b.n	8000554 <main+0x40>
 80005c8:	20000108 	.word	0x20000108
 80005cc:	200000bc 	.word	0x200000bc
 80005d0:	48000800 	.word	0x48000800
 80005d4:	2000015c 	.word	0x2000015c
 80005d8:	2000015e 	.word	0x2000015e
 80005dc:	20000158 	.word	0x20000158
 80005e0:	20000154 	.word	0x20000154

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2238      	movs	r2, #56	; 0x38
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fb70 	bl	8004cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fede 	bl	80013c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000622:	2304      	movs	r3, #4
 8000624:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000626:	2355      	movs	r3, #85	; 0x55
 8000628:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	4618      	mov	r0, r3
 800063c:	f000 ff78 	bl	8001530 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000646:	f000 f9e9 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fa76 	bl	8001b54 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800066e:	f000 f9d5 	bl	8000a1c <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 8000682:	4a22      	ldr	r2, [pc, #136]	; (800070c <MX_LPUART1_UART_Init+0x90>)
 8000684:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006be:	4812      	ldr	r0, [pc, #72]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	f003 fc9c 	bl	8003ffc <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f9a7 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	f004 fa37 	bl	8004b44 <HAL_UARTEx_SetTxFifoThreshold>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006dc:	f000 f99e 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4809      	ldr	r0, [pc, #36]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	f004 fa6c 	bl	8004bc0 <HAL_UARTEx_SetRxFifoThreshold>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006ee:	f000 f995 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_LPUART1_UART_Init+0x8c>)
 80006f4:	f004 f9ed 	bl	8004ad2 <HAL_UARTEx_DisableFifoMode>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006fe:	f000 f98d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028
 800070c:	40008000 	.word	0x40008000

08000710 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b090      	sub	sp, #64	; 0x40
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000740:	463b      	mov	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b3e      	ldr	r3, [pc, #248]	; (8000848 <MX_TIM1_Init+0x138>)
 800074e:	4a3f      	ldr	r2, [pc, #252]	; (800084c <MX_TIM1_Init+0x13c>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000752:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <MX_TIM1_Init+0x138>)
 8000754:	22a9      	movs	r2, #169	; 0xa9
 8000756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b3b      	ldr	r3, [pc, #236]	; (8000848 <MX_TIM1_Init+0x138>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800075e:	4b3a      	ldr	r3, [pc, #232]	; (8000848 <MX_TIM1_Init+0x138>)
 8000760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b38      	ldr	r3, [pc, #224]	; (8000848 <MX_TIM1_Init+0x138>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	4b36      	ldr	r3, [pc, #216]	; (8000848 <MX_TIM1_Init+0x138>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b35      	ldr	r3, [pc, #212]	; (8000848 <MX_TIM1_Init+0x138>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000778:	4833      	ldr	r0, [pc, #204]	; (8000848 <MX_TIM1_Init+0x138>)
 800077a:	f001 fe55 	bl	8002428 <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000784:	f000 f94a 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000792:	4619      	mov	r1, r3
 8000794:	482c      	ldr	r0, [pc, #176]	; (8000848 <MX_TIM1_Init+0x138>)
 8000796:	f002 fb99 	bl	8002ecc <HAL_TIM_ConfigClockSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007a0:	f000 f93c 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80007a4:	4828      	ldr	r0, [pc, #160]	; (8000848 <MX_TIM1_Init+0x138>)
 80007a6:	f002 f87b 	bl	80028a0 <HAL_TIM_IC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007b0:	f000 f934 	bl	8000a1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80007b4:	2304      	movs	r3, #4
 80007b6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80007b8:	2350      	movs	r3, #80	; 0x50
 80007ba:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	481f      	ldr	r0, [pc, #124]	; (8000848 <MX_TIM1_Init+0x138>)
 80007cc:	f002 fc94 	bl	80030f8 <HAL_TIM_SlaveConfigSynchro>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007d6:	f000 f921 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	4816      	ldr	r0, [pc, #88]	; (8000848 <MX_TIM1_Init+0x138>)
 80007ee:	f003 fb6f 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80007f8:	f000 f910 	bl	8000a1c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000800:	2301      	movs	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_TIM1_Init+0x138>)
 8000814:	f002 f9aa 	bl	8002b6c <HAL_TIM_IC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800081e:	f000 f8fd 	bl	8000a1c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000822:	2302      	movs	r3, #2
 8000824:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000826:	2302      	movs	r3, #2
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	2204      	movs	r2, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_TIM1_Init+0x138>)
 8000832:	f002 f99b 	bl	8002b6c <HAL_TIM_IC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 800083c:	f000 f8ee 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3740      	adds	r7, #64	; 0x40
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200000bc 	.word	0x200000bc
 800084c:	40012c00 	.word	0x40012c00

08000850 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_TIM3_Init+0xe8>)
 8000884:	4a2d      	ldr	r2, [pc, #180]	; (800093c <MX_TIM3_Init+0xec>)
 8000886:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000888:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_TIM3_Init+0xe8>)
 800088a:	22a9      	movs	r2, #169	; 0xa9
 800088c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_TIM3_Init+0xe8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_TIM3_Init+0xe8>)
 8000896:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800089a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_TIM3_Init+0xe8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008a8:	4823      	ldr	r0, [pc, #140]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008aa:	f001 fdbd 	bl	8002428 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008b4:	f000 f8b2 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c2:	4619      	mov	r1, r3
 80008c4:	481c      	ldr	r0, [pc, #112]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008c6:	f002 fb01 	bl	8002ecc <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80008d0:	f000 f8a4 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008d6:	f001 fe6f 	bl	80025b8 <HAL_TIM_PWM_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008e0:	f000 f89c 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_TIM3_Init+0xe8>)
 80008f4:	f003 faec 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008fe:	f000 f88d 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000902:	2360      	movs	r3, #96	; 0x60
 8000904:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000906:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800090a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	4807      	ldr	r0, [pc, #28]	; (8000938 <MX_TIM3_Init+0xe8>)
 800091c:	f002 f9c2 	bl	8002ca4 <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000926:	f000 f879 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <MX_TIM3_Init+0xe8>)
 800092c:	f000 f950 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 8000930:	bf00      	nop
 8000932:	3738      	adds	r7, #56	; 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000108 	.word	0x20000108
 800093c:	40000400 	.word	0x40000400

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a2e      	ldr	r2, [pc, #184]	; (8000a14 <MX_GPIO_Init+0xd4>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000974:	f043 0320 	orr.w	r3, r3, #32
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_GPIO_Init+0xd4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <MX_GPIO_Init+0xd4>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_GPIO_Init+0xd4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_GPIO_Init+0xd4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2120      	movs	r1, #32
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f000 fcc7 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	480f      	ldr	r0, [pc, #60]	; (8000a18 <MX_GPIO_Init+0xd8>)
 80009da:	f000 fb1f 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f000 fb10 	bl	800101c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	2028      	movs	r0, #40	; 0x28
 8000a02:	f000 fad6 	bl	8000fb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a06:	2028      	movs	r0, #40	; 0x28
 8000a08:	f000 faed 	bl	8000fe6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48000800 	.word	0x48000800

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6593      	str	r3, [r2, #88]	; 0x58
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a5e:	f000 fd57 	bl	8001510 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09e      	sub	sp, #120	; 0x78
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2254      	movs	r2, #84	; 0x54
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 f921 	bl	8004cd8 <memset>
  if(huart->Instance==LPUART1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <HAL_UART_MspInit+0xa8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d136      	bne.n	8000b0e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aa0:	2320      	movs	r3, #32
 8000aa2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fa6d 	bl	8001f8c <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab8:	f7ff ffb0 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0xac>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000aec:	230c      	movs	r3, #12
 8000aee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000afc:	230c      	movs	r3, #12
 8000afe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0a:	f000 fa87 	bl	800101c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3778      	adds	r7, #120	; 0x78
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40008000 	.word	0x40008000
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <HAL_TIM_Base_MspInit+0xa4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12a      	bne.n	8000b98 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b84:	2306      	movs	r3, #6
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b92:	f000 fa43 	bl	800101c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b96:	e010      	b.n	8000bba <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_TIM_Base_MspInit+0xac>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10b      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6593      	str	r3, [r2, #88]	; 0x58
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_TIM_Base_MspInit+0xa8>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40000400 	.word	0x40000400

08000bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <HAL_TIM_MspPostInit+0x64>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d11b      	bne.n	8000c2a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_TIM_MspPostInit+0x68>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_TIM_MspPostInit+0x68>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_TIM_MspPostInit+0x68>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_TIM_MspPostInit+0x6c>)
 8000c26:	f000 f9f9 	bl	800101c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 f898 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c9c:	f000 fb70 	bl	8001380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <LoopForever+0xe>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <LoopForever+0x16>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f003 fff7 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cfa:	f7ff fc0b 	bl	8000514 <main>

08000cfe <LoopForever>:

LoopForever:
    b LoopForever
 8000cfe:	e7fe      	b.n	8000cfe <LoopForever>
  ldr   r0, =_estack
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d0c:	08004d98 	.word	0x08004d98
  ldr r2, =_sbss
 8000d10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d14:	20000164 	.word	0x20000164

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>

08000d1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f939 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f000 f80e 	bl	8000d4c <HAL_InitTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	e001      	b.n	8000d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3c:	f7ff fe74 	bl	8000a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d40:	79fb      	ldrb	r3, [r7, #7]

}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_InitTick+0x68>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d022      	beq.n	8000da6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d60:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_InitTick+0x68>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f944 	bl	8001002 <HAL_SYSTICK_Config>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10f      	bne.n	8000da0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	d809      	bhi.n	8000d9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	2200      	movs	r2, #0
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8e:	f000 f910 	bl	8000fb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_InitTick+0x70>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	e007      	b.n	8000daa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e004      	b.n	8000daa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e001      	b.n	8000daa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x20>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dd0:	6013      	str	r3, [r2, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20000160 	.word	0x20000160
 8000de0:	20000008 	.word	0x20000008

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000160 	.word	0x20000160

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff40 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff90 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5f 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff33 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa4 	bl	8000f58 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800102a:	e15a      	b.n	80012e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2b00      	cmp	r3, #0
 8001040:	f000 814c 	beq.w	80012dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b01      	cmp	r3, #1
 800104e:	d005      	beq.n	800105c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001058:	2b02      	cmp	r3, #2
 800105a:	d130      	bne.n	80010be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001092:	2201      	movs	r2, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	f003 0201 	and.w	r2, r3, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d017      	beq.n	80010fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d123      	bne.n	800114e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691a      	ldr	r2, [r3, #16]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0203 	and.w	r2, r3, #3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80a6 	beq.w	80012dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001190:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001194:	4a5a      	ldr	r2, [pc, #360]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6613      	str	r3, [r2, #96]	; 0x60
 800119c:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_GPIO_Init+0x2e4>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a8:	4a56      	ldr	r2, [pc, #344]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011d2:	d01f      	beq.n	8001214 <HAL_GPIO_Init+0x1f8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4c      	ldr	r2, [pc, #304]	; (8001308 <HAL_GPIO_Init+0x2ec>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d019      	beq.n	8001210 <HAL_GPIO_Init+0x1f4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4b      	ldr	r2, [pc, #300]	; (800130c <HAL_GPIO_Init+0x2f0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d013      	beq.n	800120c <HAL_GPIO_Init+0x1f0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a4a      	ldr	r2, [pc, #296]	; (8001310 <HAL_GPIO_Init+0x2f4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00d      	beq.n	8001208 <HAL_GPIO_Init+0x1ec>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_GPIO_Init+0x2f8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <HAL_GPIO_Init+0x1e8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a48      	ldr	r2, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x2fc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d101      	bne.n	8001200 <HAL_GPIO_Init+0x1e4>
 80011fc:	2305      	movs	r3, #5
 80011fe:	e00a      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001200:	2306      	movs	r3, #6
 8001202:	e008      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001204:	2304      	movs	r3, #4
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001208:	2303      	movs	r3, #3
 800120a:	e004      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 800120c:	2302      	movs	r3, #2
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_GPIO_Init+0x1fa>
 8001214:	2300      	movs	r3, #0
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001226:	4937      	ldr	r1, [pc, #220]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <HAL_GPIO_Init+0x300>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001258:	4a30      	ldr	r2, [pc, #192]	; (800131c <HAL_GPIO_Init+0x300>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800125e:	4b2f      	ldr	r3, [pc, #188]	; (800131c <HAL_GPIO_Init+0x300>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001282:	4a26      	ldr	r2, [pc, #152]	; (800131c <HAL_GPIO_Init+0x300>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001288:	4b24      	ldr	r3, [pc, #144]	; (800131c <HAL_GPIO_Init+0x300>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_GPIO_Init+0x300>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_GPIO_Init+0x300>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d6:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_GPIO_Init+0x300>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f47f ae9d 	bne.w	800102c <HAL_GPIO_Init+0x10>
  }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	48000400 	.word	0x48000400
 800130c:	48000800 	.word	0x48000800
 8001310:	48000c00 	.word	0x48000c00
 8001314:	48001000 	.word	0x48001000
 8001318:	48001400 	.word	0x48001400
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	887b      	ldrh	r3, [r7, #2]
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e001      	b.n	8001342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800136c:	e002      	b.n	8001374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f806 	bl	80013b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d141      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013d6:	4b4b      	ldr	r3, [pc, #300]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e2:	d131      	bne.n	8001448 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013e4:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013ea:	4a46      	ldr	r2, [pc, #280]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013fc:	4a41      	ldr	r2, [pc, #260]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001402:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001404:	4b40      	ldr	r3, [pc, #256]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2232      	movs	r2, #50	; 0x32
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	4a3f      	ldr	r2, [pc, #252]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9b      	lsrs	r3, r3, #18
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141a:	e002      	b.n	8001422 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3b01      	subs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142e:	d102      	bne.n	8001436 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f2      	bne.n	800141c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001436:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001442:	d158      	bne.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e057      	b.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800144e:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001454:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001458:	e04d      	b.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001460:	d141      	bne.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146e:	d131      	bne.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001476:	4a23      	ldr	r2, [pc, #140]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001488:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800148e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2232      	movs	r2, #50	; 0x32
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	0c9b      	lsrs	r3, r3, #18
 80014a2:	3301      	adds	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a6:	e002      	b.n	80014ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ba:	d102      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f2      	bne.n	80014a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ce:	d112      	bne.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e011      	b.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014e4:	e007      	b.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40007000 	.word	0x40007000
 8001508:	20000000 	.word	0x20000000
 800150c:	431bde83 	.word	0x431bde83

08001510 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800151a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151e:	6093      	str	r3, [r2, #8]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40007000 	.word	0x40007000

08001530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e2fe      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d075      	beq.n	800163a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154e:	4b97      	ldr	r3, [pc, #604]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001558:	4b94      	ldr	r3, [pc, #592]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	d102      	bne.n	800156e <HAL_RCC_OscConfig+0x3e>
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d002      	beq.n	8001574 <HAL_RCC_OscConfig+0x44>
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b08      	cmp	r3, #8
 8001572:	d10b      	bne.n	800158c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	4b8d      	ldr	r3, [pc, #564]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d05b      	beq.n	8001638 <HAL_RCC_OscConfig+0x108>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d157      	bne.n	8001638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e2d9      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d106      	bne.n	80015a4 <HAL_RCC_OscConfig+0x74>
 8001596:	4b85      	ldr	r3, [pc, #532]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a84      	ldr	r2, [pc, #528]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e01d      	b.n	80015e0 <HAL_RCC_OscConfig+0xb0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x98>
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80015b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7b      	ldr	r2, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80015c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0xb0>
 80015c8:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a77      	ldr	r2, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b75      	ldr	r3, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a74      	ldr	r2, [pc, #464]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fbfc 	bl	8000de4 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fbf8 	bl	8000de4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e29e      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0xc0>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fbe8 	bl	8000de4 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fbe4 	bl	8000de4 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e28a      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162a:	4b60      	ldr	r3, [pc, #384]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0xe8>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d075      	beq.n	8001732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001646:	4b59      	ldr	r3, [pc, #356]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001650:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b0c      	cmp	r3, #12
 800165e:	d102      	bne.n	8001666 <HAL_RCC_OscConfig+0x136>
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d002      	beq.n	800166c <HAL_RCC_OscConfig+0x13c>
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b04      	cmp	r3, #4
 800166a:	d11f      	bne.n	80016ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166c:	4b4f      	ldr	r3, [pc, #316]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_OscConfig+0x154>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e25d      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001684:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	4946      	ldr	r1, [pc, #280]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001698:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <HAL_RCC_OscConfig+0x280>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb55 	bl	8000d4c <HAL_InitTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d043      	beq.n	8001730 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e249      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d023      	beq.n	80016fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b4:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb90 	bl	8000de4 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fb8c 	bl	8000de4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e232      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b31      	ldr	r3, [pc, #196]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	492d      	ldr	r1, [pc, #180]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
 80016fa:	e01a      	b.n	8001732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2a      	ldr	r2, [pc, #168]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fb6c 	bl	8000de4 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff fb68 	bl	8000de4 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e20e      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x1e0>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d041      	beq.n	80017c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d01c      	beq.n	8001780 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174c:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001756:	f7ff fb45 	bl	8000de4 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175e:	f7ff fb41 	bl	8000de4 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1e7      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ef      	beq.n	800175e <HAL_RCC_OscConfig+0x22e>
 800177e:	e020      	b.n	80017c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_RCC_OscConfig+0x27c>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001790:	f7ff fb28 	bl	8000de4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001796:	e00d      	b.n	80017b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fb24 	bl	8000de4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d906      	bls.n	80017b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1ca      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b4:	4b8c      	ldr	r3, [pc, #560]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ea      	bne.n	8001798 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 80a6 	beq.w	800191c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017d4:	4b84      	ldr	r3, [pc, #528]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2b4>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x2b6>
 80017e4:	2300      	movs	r3, #0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00d      	beq.n	8001806 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b7f      	ldr	r3, [pc, #508]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	4a7e      	ldr	r2, [pc, #504]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f4:	6593      	str	r3, [r2, #88]	; 0x58
 80017f6:	4b7c      	ldr	r3, [pc, #496]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001802:	2301      	movs	r3, #1
 8001804:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001806:	4b79      	ldr	r3, [pc, #484]	; (80019ec <HAL_RCC_OscConfig+0x4bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001812:	4b76      	ldr	r3, [pc, #472]	; (80019ec <HAL_RCC_OscConfig+0x4bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a75      	ldr	r2, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x4bc>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff fae1 	bl	8000de4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001826:	f7ff fadd 	bl	8000de4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e183      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <HAL_RCC_OscConfig+0x4bc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d108      	bne.n	800185e <HAL_RCC_OscConfig+0x32e>
 800184c:	4b66      	ldr	r3, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001852:	4a65      	ldr	r2, [pc, #404]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800185c:	e024      	b.n	80018a8 <HAL_RCC_OscConfig+0x378>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d110      	bne.n	8001888 <HAL_RCC_OscConfig+0x358>
 8001866:	4b60      	ldr	r3, [pc, #384]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186c:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001876:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187c:	4a5a      	ldr	r2, [pc, #360]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001886:	e00f      	b.n	80018a8 <HAL_RCC_OscConfig+0x378>
 8001888:	4b57      	ldr	r3, [pc, #348]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a56      	ldr	r2, [pc, #344]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 800189a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189e:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80018a0:	f023 0304 	bic.w	r3, r3, #4
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d016      	beq.n	80018de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fa98 	bl	8000de4 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff fa94 	bl	8000de4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e138      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ce:	4b46      	ldr	r3, [pc, #280]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80018d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ed      	beq.n	80018b8 <HAL_RCC_OscConfig+0x388>
 80018dc:	e015      	b.n	800190a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa81 	bl	8000de4 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e4:	e00a      	b.n	80018fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fa7d 	bl	8000de4 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e121      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fc:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1ed      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800190a:	7ffb      	ldrb	r3, [r7, #31]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001914:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b00      	cmp	r3, #0
 8001926:	d03c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d01c      	beq.n	800196a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001936:	4a2c      	ldr	r2, [pc, #176]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff fa50 	bl	8000de4 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001948:	f7ff fa4c 	bl	8000de4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0f2      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 800195c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0ef      	beq.n	8001948 <HAL_RCC_OscConfig+0x418>
 8001968:	e01b      	b.n	80019a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 800196c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001970:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197a:	f7ff fa33 	bl	8000de4 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001982:	f7ff fa2f 	bl	8000de4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0d5      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 8001996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1ef      	bne.n	8001982 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80c9 	beq.w	8001b3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b0c      	cmp	r3, #12
 80019b6:	f000 8083 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d15e      	bne.n	8001a80 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_RCC_OscConfig+0x4b8>)
 80019c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fa09 	bl	8000de4 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	e00c      	b.n	80019f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff fa05 	bl	8000de4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d905      	bls.n	80019f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e0ab      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f0:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ec      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fc:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <HAL_RCC_OscConfig+0x61c>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6a11      	ldr	r1, [r2, #32]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a0c:	3a01      	subs	r2, #1
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	4311      	orrs	r1, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a16:	0212      	lsls	r2, r2, #8
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a1e:	0852      	lsrs	r2, r2, #1
 8001a20:	3a01      	subs	r2, #1
 8001a22:	0552      	lsls	r2, r2, #21
 8001a24:	4311      	orrs	r1, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a2a:	0852      	lsrs	r2, r2, #1
 8001a2c:	3a01      	subs	r2, #1
 8001a2e:	0652      	lsls	r2, r2, #25
 8001a30:	4311      	orrs	r1, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a36:	06d2      	lsls	r2, r2, #27
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	4943      	ldr	r1, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a40:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a40      	ldr	r2, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a4c:	4b3e      	ldr	r3, [pc, #248]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff f9c4 	bl	8000de4 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f9c0 	bl	8000de4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e066      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x530>
 8001a7e:	e05e      	b.n	8001b3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a30      	ldr	r2, [pc, #192]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f9aa 	bl	8000de4 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f9a6 	bl	8000de4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e04c      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	4924      	ldr	r1, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_RCC_OscConfig+0x620>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	60cb      	str	r3, [r1, #12]
 8001abe:	e03e      	b.n	8001b3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e039      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCC_OscConfig+0x618>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d12c      	bne.n	8001b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	3b01      	subs	r3, #1
 8001aec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d123      	bne.n	8001b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d11b      	bne.n	8001b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d113      	bne.n	8001b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d109      	bne.n	8001b3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	085b      	lsrs	r3, r3, #1
 8001b32:	3b01      	subs	r3, #1
 8001b34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	019f800c 	.word	0x019f800c
 8001b50:	feeefffc 	.word	0xfeeefffc

08001b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e11e      	b.n	8001daa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d910      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b8e      	ldr	r3, [pc, #568]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 020f 	bic.w	r2, r3, #15
 8001b82:	498c      	ldr	r1, [pc, #560]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8a:	4b8a      	ldr	r3, [pc, #552]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e106      	b.n	8001daa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d073      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d129      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb0:	4b81      	ldr	r3, [pc, #516]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0f4      	b.n	8001daa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bc0:	f000 f99e 	bl	8001f00 <RCC_GetSysClockFreqFromPLLSource>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4a7c      	ldr	r2, [pc, #496]	; (8001dbc <HAL_RCC_ClockConfig+0x268>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d93f      	bls.n	8001c4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bce:	4b7a      	ldr	r3, [pc, #488]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d033      	beq.n	8001c4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d12f      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bee:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bf6:	4a70      	ldr	r2, [pc, #448]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e024      	b.n	8001c4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d109      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0c6      	b.n	8001daa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0be      	b.n	8001daa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c2c:	f000 f8ce 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4a61      	ldr	r2, [pc, #388]	; (8001dbc <HAL_RCC_ClockConfig+0x268>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d909      	bls.n	8001c4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c3a:	4b5f      	ldr	r3, [pc, #380]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c42:	4a5d      	ldr	r2, [pc, #372]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	4b5a      	ldr	r3, [pc, #360]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4957      	ldr	r1, [pc, #348]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c60:	f7ff f8c0 	bl	8000de4 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff f8bc 	bl	8000de4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e095      	b.n	8001daa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b4e      	ldr	r3, [pc, #312]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 020c 	and.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1eb      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	4a42      	ldr	r2, [pc, #264]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001cc8:	4a3b      	ldr	r2, [pc, #236]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4936      	ldr	r1, [pc, #216]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cea:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d21d      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 020f 	bic.w	r2, r3, #15
 8001d0c:	4929      	ldr	r1, [pc, #164]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d14:	f7ff f866 	bl	8000de4 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f862 	bl	8000de4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e03b      	b.n	8001daa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_RCC_ClockConfig+0x260>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1ed      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4917      	ldr	r1, [pc, #92]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490f      	ldr	r1, [pc, #60]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d7e:	f000 f825 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_RCC_ClockConfig+0x264>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <HAL_RCC_ClockConfig+0x26c>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x274>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe ffd2 	bl	8000d4c <HAL_InitTick>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	04c4b400 	.word	0x04c4b400
 8001dc0:	08004d48 	.word	0x08004d48
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	e047      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e03e      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d136      	bne.n	8001e70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3301      	adds	r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d10c      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e20:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2a:	68d2      	ldr	r2, [r2, #12]
 8001e2c:	0a12      	lsrs	r2, r2, #8
 8001e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
      break;
 8001e38:	e00c      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e3a:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e44:	68d2      	ldr	r2, [r2, #12]
 8001e46:	0a12      	lsrs	r2, r2, #8
 8001e48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
      break;
 8001e52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0e5b      	lsrs	r3, r3, #25
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	e001      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e74:	693b      	ldr	r3, [r7, #16]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	00f42400 	.word	0x00f42400
 8001e8c:	016e3600 	.word	0x016e3600

08001e90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08004d58 	.word	0x08004d58

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ed8:	f7ff ffda 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0adb      	lsrs	r3, r3, #11
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4904      	ldr	r1, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08004d58 	.word	0x08004d58

08001f00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d10c      	bne.n	8001f3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2e:	68d2      	ldr	r2, [r2, #12]
 8001f30:	0a12      	lsrs	r2, r2, #8
 8001f32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
    break;
 8001f3c:	e00c      	b.n	8001f58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f48:	68d2      	ldr	r2, [r2, #12]
 8001f4a:	0a12      	lsrs	r2, r2, #8
 8001f4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    break;
 8001f56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0e5b      	lsrs	r3, r3, #25
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	3301      	adds	r3, #1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f72:	687b      	ldr	r3, [r7, #4]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000
 8001f84:	016e3600 	.word	0x016e3600
 8001f88:	00f42400 	.word	0x00f42400

08001f8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f94:	2300      	movs	r3, #0
 8001f96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f98:	2300      	movs	r3, #0
 8001f9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8098 	beq.w	80020da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a3f      	ldr	r2, [pc, #252]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe2:	f7fe feff 	bl	8000de4 <HAL_GetTick>
 8001fe6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe8:	e009      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fea:	f7fe fefb 	bl	8000de4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d902      	bls.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	74fb      	strb	r3, [r7, #19]
        break;
 8001ffc:	e005      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ef      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800200a:	7cfb      	ldrb	r3, [r7, #19]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d159      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01e      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	d019      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800202c:	4b23      	ldr	r3, [pc, #140]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002036:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002058:	4a18      	ldr	r2, [pc, #96]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7fe febb 	bl	8000de4 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002070:	e00b      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe feb7 	bl	8000de4 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d902      	bls.n	800208a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	74fb      	strb	r3, [r7, #19]
            break;
 8002088:	e006      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ec      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ac:	4903      	ldr	r1, [pc, #12]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020b4:	e008      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	74bb      	strb	r3, [r7, #18]
 80020ba:	e005      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c8:	7c7b      	ldrb	r3, [r7, #17]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4ba7      	ldr	r3, [pc, #668]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	4aa6      	ldr	r2, [pc, #664]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e6:	4ba1      	ldr	r3, [pc, #644]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ec:	f023 0203 	bic.w	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	499d      	ldr	r1, [pc, #628]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002108:	4b98      	ldr	r3, [pc, #608]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 020c 	bic.w	r2, r3, #12
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4995      	ldr	r1, [pc, #596]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800212a:	4b90      	ldr	r3, [pc, #576]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002130:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	498c      	ldr	r1, [pc, #560]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800214c:	4b87      	ldr	r3, [pc, #540]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	4984      	ldr	r1, [pc, #528]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	497b      	ldr	r1, [pc, #492]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002190:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	4973      	ldr	r1, [pc, #460]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b2:	4b6e      	ldr	r3, [pc, #440]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	496a      	ldr	r1, [pc, #424]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021d4:	4b65      	ldr	r3, [pc, #404]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4962      	ldr	r1, [pc, #392]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f6:	4b5d      	ldr	r3, [pc, #372]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	4959      	ldr	r1, [pc, #356]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002218:	4b54      	ldr	r3, [pc, #336]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	4951      	ldr	r1, [pc, #324]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800223a:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	4948      	ldr	r1, [pc, #288]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d015      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4940      	ldr	r1, [pc, #256]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800227a:	d105      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a3a      	ldr	r2, [pc, #232]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002286:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002290:	2b00      	cmp	r3, #0
 8002292:	d015      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002294:	4b35      	ldr	r3, [pc, #212]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a2:	4932      	ldr	r1, [pc, #200]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b2:	d105      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a2c      	ldr	r2, [pc, #176]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d015      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	4924      	ldr	r1, [pc, #144]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d015      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002304:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002312:	4916      	ldr	r1, [pc, #88]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002322:	d105      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a10      	ldr	r2, [pc, #64]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d019      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4908      	ldr	r1, [pc, #32]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235a:	d109      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a02      	ldr	r2, [pc, #8]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002362:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002366:	60d3      	str	r3, [r2, #12]
 8002368:	e002      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d015      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800237c:	4b29      	ldr	r3, [pc, #164]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	4926      	ldr	r1, [pc, #152]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800239a:	d105      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a20      	ldr	r2, [pc, #128]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d015      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	4918      	ldr	r1, [pc, #96]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d2:	d105      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	490a      	ldr	r1, [pc, #40]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800240a:	d105      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002418:	7cbb      	ldrb	r3, [r7, #18]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000

08002428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e049      	b.n	80024ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fb66 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3304      	adds	r3, #4
 8002464:	4619      	mov	r1, r3
 8002466:	4610      	mov	r0, r2
 8002468:	f000 fe88 	bl	800317c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e04c      	b.n	800258a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_TIM_Base_Start+0xc0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d022      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d01d      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_TIM_Base_Start+0xc4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d018      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_TIM_Base_Start+0xc8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d013      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HAL_TIM_Base_Start+0xcc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00e      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <HAL_TIM_Base_Start+0xd0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_TIM_Base_Start+0xd4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d004      	beq.n	8002548 <HAL_TIM_Base_Start+0x70>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_TIM_Base_Start+0xd8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d115      	bne.n	8002574 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_TIM_Base_Start+0xdc>)
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d015      	beq.n	8002586 <HAL_TIM_Base_Start+0xae>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d011      	beq.n	8002586 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002572:	e008      	b.n	8002586 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e000      	b.n	8002588 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800
 80025a4:	40000c00 	.word	0x40000c00
 80025a8:	40013400 	.word	0x40013400
 80025ac:	40014000 	.word	0x40014000
 80025b0:	40015000 	.word	0x40015000
 80025b4:	00010007 	.word	0x00010007

080025b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e049      	b.n	800265e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f841 	bl	8002666 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f000 fdc0 	bl	800317c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_TIM_PWM_Start+0x24>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e03c      	b.n	800271a <HAL_TIM_PWM_Start+0x9e>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d109      	bne.n	80026ba <HAL_TIM_PWM_Start+0x3e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	bf14      	ite	ne
 80026b2:	2301      	movne	r3, #1
 80026b4:	2300      	moveq	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	e02f      	b.n	800271a <HAL_TIM_PWM_Start+0x9e>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d109      	bne.n	80026d4 <HAL_TIM_PWM_Start+0x58>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e022      	b.n	800271a <HAL_TIM_PWM_Start+0x9e>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d109      	bne.n	80026ee <HAL_TIM_PWM_Start+0x72>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e015      	b.n	800271a <HAL_TIM_PWM_Start+0x9e>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b10      	cmp	r3, #16
 80026f2:	d109      	bne.n	8002708 <HAL_TIM_PWM_Start+0x8c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e008      	b.n	800271a <HAL_TIM_PWM_Start+0x9e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b01      	cmp	r3, #1
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0a6      	b.n	8002870 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d104      	bne.n	8002732 <HAL_TIM_PWM_Start+0xb6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002730:	e023      	b.n	800277a <HAL_TIM_PWM_Start+0xfe>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b04      	cmp	r3, #4
 8002736:	d104      	bne.n	8002742 <HAL_TIM_PWM_Start+0xc6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002740:	e01b      	b.n	800277a <HAL_TIM_PWM_Start+0xfe>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b08      	cmp	r3, #8
 8002746:	d104      	bne.n	8002752 <HAL_TIM_PWM_Start+0xd6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002750:	e013      	b.n	800277a <HAL_TIM_PWM_Start+0xfe>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d104      	bne.n	8002762 <HAL_TIM_PWM_Start+0xe6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002760:	e00b      	b.n	800277a <HAL_TIM_PWM_Start+0xfe>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b10      	cmp	r3, #16
 8002766:	d104      	bne.n	8002772 <HAL_TIM_PWM_Start+0xf6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002770:	e003      	b.n	800277a <HAL_TIM_PWM_Start+0xfe>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2202      	movs	r2, #2
 8002776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f001 fb7e 	bl	8003e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a3a      	ldr	r2, [pc, #232]	; (8002878 <HAL_TIM_PWM_Start+0x1fc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d018      	beq.n	80027c4 <HAL_TIM_PWM_Start+0x148>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a39      	ldr	r2, [pc, #228]	; (800287c <HAL_TIM_PWM_Start+0x200>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_TIM_PWM_Start+0x148>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a37      	ldr	r2, [pc, #220]	; (8002880 <HAL_TIM_PWM_Start+0x204>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00e      	beq.n	80027c4 <HAL_TIM_PWM_Start+0x148>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a36      	ldr	r2, [pc, #216]	; (8002884 <HAL_TIM_PWM_Start+0x208>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_TIM_PWM_Start+0x148>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_TIM_PWM_Start+0x20c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_TIM_PWM_Start+0x148>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <HAL_TIM_PWM_Start+0x210>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d101      	bne.n	80027c8 <HAL_TIM_PWM_Start+0x14c>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_TIM_PWM_Start+0x14e>
 80027c8:	2300      	movs	r3, #0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a25      	ldr	r2, [pc, #148]	; (8002878 <HAL_TIM_PWM_Start+0x1fc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <HAL_TIM_PWM_Start+0x1b2>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d01d      	beq.n	800282e <HAL_TIM_PWM_Start+0x1b2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a26      	ldr	r2, [pc, #152]	; (8002890 <HAL_TIM_PWM_Start+0x214>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d018      	beq.n	800282e <HAL_TIM_PWM_Start+0x1b2>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a24      	ldr	r2, [pc, #144]	; (8002894 <HAL_TIM_PWM_Start+0x218>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_TIM_PWM_Start+0x1b2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a23      	ldr	r2, [pc, #140]	; (8002898 <HAL_TIM_PWM_Start+0x21c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <HAL_TIM_PWM_Start+0x1b2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_TIM_PWM_Start+0x200>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_TIM_PWM_Start+0x1b2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_TIM_PWM_Start+0x204>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_TIM_PWM_Start+0x1b2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_TIM_PWM_Start+0x210>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d115      	bne.n	800285a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_TIM_PWM_Start+0x220>)
 8002836:	4013      	ands	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b06      	cmp	r3, #6
 800283e:	d015      	beq.n	800286c <HAL_TIM_PWM_Start+0x1f0>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002846:	d011      	beq.n	800286c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002858:	e008      	b.n	800286c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e000      	b.n	800286e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40012c00 	.word	0x40012c00
 800287c:	40013400 	.word	0x40013400
 8002880:	40014000 	.word	0x40014000
 8002884:	40014400 	.word	0x40014400
 8002888:	40014800 	.word	0x40014800
 800288c:	40015000 	.word	0x40015000
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	00010007 	.word	0x00010007

080028a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e049      	b.n	8002946 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f841 	bl	800294e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f000 fc4c 	bl	800317c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d104      	bne.n	800297e <HAL_TIM_IC_Start+0x1a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	e023      	b.n	80029c6 <HAL_TIM_IC_Start+0x62>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d104      	bne.n	800298e <HAL_TIM_IC_Start+0x2a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800298a:	b2db      	uxtb	r3, r3
 800298c:	e01b      	b.n	80029c6 <HAL_TIM_IC_Start+0x62>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d104      	bne.n	800299e <HAL_TIM_IC_Start+0x3a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800299a:	b2db      	uxtb	r3, r3
 800299c:	e013      	b.n	80029c6 <HAL_TIM_IC_Start+0x62>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_IC_Start+0x4a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e00b      	b.n	80029c6 <HAL_TIM_IC_Start+0x62>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d104      	bne.n	80029be <HAL_TIM_IC_Start+0x5a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	e003      	b.n	80029c6 <HAL_TIM_IC_Start+0x62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <HAL_TIM_IC_Start+0x74>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e013      	b.n	8002a00 <HAL_TIM_IC_Start+0x9c>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d104      	bne.n	80029e8 <HAL_TIM_IC_Start+0x84>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e00b      	b.n	8002a00 <HAL_TIM_IC_Start+0x9c>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d104      	bne.n	80029f8 <HAL_TIM_IC_Start+0x94>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e003      	b.n	8002a00 <HAL_TIM_IC_Start+0x9c>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d102      	bne.n	8002a0e <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002a08:	7bbb      	ldrb	r3, [r7, #14]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d001      	beq.n	8002a12 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e097      	b.n	8002b42 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_IC_Start+0xbe>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a20:	e023      	b.n	8002a6a <HAL_TIM_IC_Start+0x106>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d104      	bne.n	8002a32 <HAL_TIM_IC_Start+0xce>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a30:	e01b      	b.n	8002a6a <HAL_TIM_IC_Start+0x106>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d104      	bne.n	8002a42 <HAL_TIM_IC_Start+0xde>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	e013      	b.n	8002a6a <HAL_TIM_IC_Start+0x106>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	d104      	bne.n	8002a52 <HAL_TIM_IC_Start+0xee>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a50:	e00b      	b.n	8002a6a <HAL_TIM_IC_Start+0x106>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d104      	bne.n	8002a62 <HAL_TIM_IC_Start+0xfe>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a60:	e003      	b.n	8002a6a <HAL_TIM_IC_Start+0x106>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_IC_Start+0x116>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a78:	e013      	b.n	8002aa2 <HAL_TIM_IC_Start+0x13e>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_IC_Start+0x126>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a88:	e00b      	b.n	8002aa2 <HAL_TIM_IC_Start+0x13e>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d104      	bne.n	8002a9a <HAL_TIM_IC_Start+0x136>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a98:	e003      	b.n	8002aa2 <HAL_TIM_IC_Start+0x13e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f9ea 	bl	8003e84 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_TIM_IC_Start+0x1e8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d022      	beq.n	8002b00 <HAL_TIM_IC_Start+0x19c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d01d      	beq.n	8002b00 <HAL_TIM_IC_Start+0x19c>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_TIM_IC_Start+0x1ec>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d018      	beq.n	8002b00 <HAL_TIM_IC_Start+0x19c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_TIM_IC_Start+0x1f0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_TIM_IC_Start+0x19c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <HAL_TIM_IC_Start+0x1f4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00e      	beq.n	8002b00 <HAL_TIM_IC_Start+0x19c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_TIM_IC_Start+0x1f8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d009      	beq.n	8002b00 <HAL_TIM_IC_Start+0x19c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_TIM_IC_Start+0x1fc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_TIM_IC_Start+0x19c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_TIM_IC_Start+0x200>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d115      	bne.n	8002b2c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_TIM_IC_Start+0x204>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d015      	beq.n	8002b3e <HAL_TIM_IC_Start+0x1da>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b18:	d011      	beq.n	8002b3e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	e008      	b.n	8002b3e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e000      	b.n	8002b40 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40000800 	.word	0x40000800
 8002b58:	40000c00 	.word	0x40000c00
 8002b5c:	40013400 	.word	0x40013400
 8002b60:	40014000 	.word	0x40014000
 8002b64:	40015000 	.word	0x40015000
 8002b68:	00010007 	.word	0x00010007

08002b6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e088      	b.n	8002c9c <HAL_TIM_IC_ConfigChannel+0x130>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ba8:	f000 ffa6 	bl	8003af8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699a      	ldr	r2, [r3, #24]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 020c 	bic.w	r2, r2, #12
 8002bba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6999      	ldr	r1, [r3, #24]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	619a      	str	r2, [r3, #24]
 8002bce:	e060      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d11c      	bne.n	8002c10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002be6:	f001 f82a 	bl	8003c3e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bf8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6999      	ldr	r1, [r3, #24]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	619a      	str	r2, [r3, #24]
 8002c0e:	e040      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11b      	bne.n	8002c4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c26:	f001 f877 	bl	8003d18 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 020c 	bic.w	r2, r2, #12
 8002c38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69d9      	ldr	r1, [r3, #28]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	61da      	str	r2, [r3, #28]
 8002c4c:	e021      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d11c      	bne.n	8002c8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002c64:	f001 f894 	bl	8003d90 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69d9      	ldr	r1, [r3, #28]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	61da      	str	r2, [r3, #28]
 8002c8c:	e001      	b.n	8002c92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0ff      	b.n	8002ec2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b14      	cmp	r3, #20
 8002cce:	f200 80f0 	bhi.w	8002eb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d2d 	.word	0x08002d2d
 8002cdc:	08002eb3 	.word	0x08002eb3
 8002ce0:	08002eb3 	.word	0x08002eb3
 8002ce4:	08002eb3 	.word	0x08002eb3
 8002ce8:	08002d6d 	.word	0x08002d6d
 8002cec:	08002eb3 	.word	0x08002eb3
 8002cf0:	08002eb3 	.word	0x08002eb3
 8002cf4:	08002eb3 	.word	0x08002eb3
 8002cf8:	08002daf 	.word	0x08002daf
 8002cfc:	08002eb3 	.word	0x08002eb3
 8002d00:	08002eb3 	.word	0x08002eb3
 8002d04:	08002eb3 	.word	0x08002eb3
 8002d08:	08002def 	.word	0x08002def
 8002d0c:	08002eb3 	.word	0x08002eb3
 8002d10:	08002eb3 	.word	0x08002eb3
 8002d14:	08002eb3 	.word	0x08002eb3
 8002d18:	08002e31 	.word	0x08002e31
 8002d1c:	08002eb3 	.word	0x08002eb3
 8002d20:	08002eb3 	.word	0x08002eb3
 8002d24:	08002eb3 	.word	0x08002eb3
 8002d28:	08002e71 	.word	0x08002e71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fad6 	bl	80032e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0208 	orr.w	r2, r2, #8
 8002d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0204 	bic.w	r2, r2, #4
 8002d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6999      	ldr	r1, [r3, #24]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	619a      	str	r2, [r3, #24]
      break;
 8002d6a:	e0a5      	b.n	8002eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fb50 	bl	8003418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699a      	ldr	r2, [r3, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6999      	ldr	r1, [r3, #24]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	021a      	lsls	r2, r3, #8
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	619a      	str	r2, [r3, #24]
      break;
 8002dac:	e084      	b.n	8002eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68b9      	ldr	r1, [r7, #8]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fbc3 	bl	8003540 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69da      	ldr	r2, [r3, #28]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0208 	orr.w	r2, r2, #8
 8002dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69da      	ldr	r2, [r3, #28]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0204 	bic.w	r2, r2, #4
 8002dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69d9      	ldr	r1, [r3, #28]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	61da      	str	r2, [r3, #28]
      break;
 8002dec:	e064      	b.n	8002eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fc35 	bl	8003664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69d9      	ldr	r1, [r3, #28]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	021a      	lsls	r2, r3, #8
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	61da      	str	r2, [r3, #28]
      break;
 8002e2e:	e043      	b.n	8002eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fca8 	bl	800378c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0204 	bic.w	r2, r2, #4
 8002e5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002e6e:	e023      	b.n	8002eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fcf2 	bl	8003860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002eb0:	e002      	b.n	8002eb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop

08002ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0f6      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x20a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6f      	ldr	r2, [pc, #444]	; (80030e0 <HAL_TIM_ConfigClockSource+0x214>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	f000 80c1 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002f28:	4a6d      	ldr	r2, [pc, #436]	; (80030e0 <HAL_TIM_ConfigClockSource+0x214>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	f200 80c6 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f30:	4a6c      	ldr	r2, [pc, #432]	; (80030e4 <HAL_TIM_ConfigClockSource+0x218>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	f000 80b9 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002f38:	4a6a      	ldr	r2, [pc, #424]	; (80030e4 <HAL_TIM_ConfigClockSource+0x218>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	f200 80be 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f40:	4a69      	ldr	r2, [pc, #420]	; (80030e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	f000 80b1 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002f48:	4a67      	ldr	r2, [pc, #412]	; (80030e8 <HAL_TIM_ConfigClockSource+0x21c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f200 80b6 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f50:	4a66      	ldr	r2, [pc, #408]	; (80030ec <HAL_TIM_ConfigClockSource+0x220>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	f000 80a9 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002f58:	4a64      	ldr	r2, [pc, #400]	; (80030ec <HAL_TIM_ConfigClockSource+0x220>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	f200 80ae 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f60:	4a63      	ldr	r2, [pc, #396]	; (80030f0 <HAL_TIM_ConfigClockSource+0x224>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	f000 80a1 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002f68:	4a61      	ldr	r2, [pc, #388]	; (80030f0 <HAL_TIM_ConfigClockSource+0x224>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	f200 80a6 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f70:	4a60      	ldr	r2, [pc, #384]	; (80030f4 <HAL_TIM_ConfigClockSource+0x228>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f000 8099 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002f78:	4a5e      	ldr	r2, [pc, #376]	; (80030f4 <HAL_TIM_ConfigClockSource+0x228>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	f200 809e 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002f84:	f000 8091 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002f88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002f8c:	f200 8096 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f94:	f000 8089 	beq.w	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9c:	f200 808e 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa4:	d03e      	beq.n	8003024 <HAL_TIM_ConfigClockSource+0x158>
 8002fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002faa:	f200 8087 	bhi.w	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb2:	f000 8086 	beq.w	80030c2 <HAL_TIM_ConfigClockSource+0x1f6>
 8002fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fba:	d87f      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fbc:	2b70      	cmp	r3, #112	; 0x70
 8002fbe:	d01a      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0x12a>
 8002fc0:	2b70      	cmp	r3, #112	; 0x70
 8002fc2:	d87b      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fc4:	2b60      	cmp	r3, #96	; 0x60
 8002fc6:	d050      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x19e>
 8002fc8:	2b60      	cmp	r3, #96	; 0x60
 8002fca:	d877      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fcc:	2b50      	cmp	r3, #80	; 0x50
 8002fce:	d03c      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x17e>
 8002fd0:	2b50      	cmp	r3, #80	; 0x50
 8002fd2:	d873      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d058      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x1be>
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d86f      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fdc:	2b30      	cmp	r3, #48	; 0x30
 8002fde:	d064      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002fe0:	2b30      	cmp	r3, #48	; 0x30
 8002fe2:	d86b      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d060      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d867      	bhi.n	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d05c      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d05a      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0x1de>
 8002ff4:	e062      	b.n	80030bc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003006:	f000 ff1d 	bl	8003e44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	609a      	str	r2, [r3, #8]
      break;
 8003022:	e04f      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003034:	f000 ff06 	bl	8003e44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003046:	609a      	str	r2, [r3, #8]
      break;
 8003048:	e03c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003056:	461a      	mov	r2, r3
 8003058:	f000 fdc2 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2150      	movs	r1, #80	; 0x50
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fed1 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003068:	e02c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003076:	461a      	mov	r2, r3
 8003078:	f000 fe1e 	bl	8003cb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2160      	movs	r1, #96	; 0x60
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fec1 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 8003088:	e01c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003096:	461a      	mov	r2, r3
 8003098:	f000 fda2 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 feb1 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 80030a8:	e00c      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f000 fea8 	bl	8003e0a <TIM_ITRx_SetConfig>
      break;
 80030ba:	e003      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e000      	b.n	80030c4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80030c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	00100070 	.word	0x00100070
 80030e4:	00100060 	.word	0x00100060
 80030e8:	00100050 	.word	0x00100050
 80030ec:	00100040 	.word	0x00100040
 80030f0:	00100030 	.word	0x00100030
 80030f4:	00100020 	.word	0x00100020

080030f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_TIM_SlaveConfigSynchro+0x18>
 800310c:	2302      	movs	r3, #2
 800310e:	e031      	b.n	8003174 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fc08 	bl	8003938 <TIM_SlaveTimer_SetConfig>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e018      	b.n	8003174 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003150:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003160:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <TIM_Base_SetConfig+0x144>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d017      	beq.n	80031c4 <TIM_Base_SetConfig+0x48>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319a:	d013      	beq.n	80031c4 <TIM_Base_SetConfig+0x48>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a49      	ldr	r2, [pc, #292]	; (80032c4 <TIM_Base_SetConfig+0x148>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00f      	beq.n	80031c4 <TIM_Base_SetConfig+0x48>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a48      	ldr	r2, [pc, #288]	; (80032c8 <TIM_Base_SetConfig+0x14c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00b      	beq.n	80031c4 <TIM_Base_SetConfig+0x48>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a47      	ldr	r2, [pc, #284]	; (80032cc <TIM_Base_SetConfig+0x150>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d007      	beq.n	80031c4 <TIM_Base_SetConfig+0x48>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a46      	ldr	r2, [pc, #280]	; (80032d0 <TIM_Base_SetConfig+0x154>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_Base_SetConfig+0x48>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a45      	ldr	r2, [pc, #276]	; (80032d4 <TIM_Base_SetConfig+0x158>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d108      	bne.n	80031d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a39      	ldr	r2, [pc, #228]	; (80032c0 <TIM_Base_SetConfig+0x144>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d023      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d01f      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a36      	ldr	r2, [pc, #216]	; (80032c4 <TIM_Base_SetConfig+0x148>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01b      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <TIM_Base_SetConfig+0x14c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d017      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a34      	ldr	r2, [pc, #208]	; (80032cc <TIM_Base_SetConfig+0x150>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a33      	ldr	r2, [pc, #204]	; (80032d0 <TIM_Base_SetConfig+0x154>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a33      	ldr	r2, [pc, #204]	; (80032d8 <TIM_Base_SetConfig+0x15c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a32      	ldr	r2, [pc, #200]	; (80032dc <TIM_Base_SetConfig+0x160>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a31      	ldr	r2, [pc, #196]	; (80032e0 <TIM_Base_SetConfig+0x164>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0xaa>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2c      	ldr	r2, [pc, #176]	; (80032d4 <TIM_Base_SetConfig+0x158>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <TIM_Base_SetConfig+0x144>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <TIM_Base_SetConfig+0x110>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <TIM_Base_SetConfig+0x154>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00f      	beq.n	800328c <TIM_Base_SetConfig+0x110>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <TIM_Base_SetConfig+0x15c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00b      	beq.n	800328c <TIM_Base_SetConfig+0x110>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a19      	ldr	r2, [pc, #100]	; (80032dc <TIM_Base_SetConfig+0x160>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d007      	beq.n	800328c <TIM_Base_SetConfig+0x110>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <TIM_Base_SetConfig+0x164>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <TIM_Base_SetConfig+0x110>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <TIM_Base_SetConfig+0x158>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d103      	bne.n	8003294 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d105      	bne.n	80032b2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f023 0201 	bic.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]
  }
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	40013400 	.word	0x40013400
 80032d4:	40015000 	.word	0x40015000
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800

080032e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f023 0201 	bic.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 0302 	bic.w	r3, r3, #2
 8003330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a30      	ldr	r2, [pc, #192]	; (8003400 <TIM_OC1_SetConfig+0x11c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <TIM_OC1_SetConfig+0x88>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <TIM_OC1_SetConfig+0x120>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00f      	beq.n	800336c <TIM_OC1_SetConfig+0x88>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a2e      	ldr	r2, [pc, #184]	; (8003408 <TIM_OC1_SetConfig+0x124>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00b      	beq.n	800336c <TIM_OC1_SetConfig+0x88>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a2d      	ldr	r2, [pc, #180]	; (800340c <TIM_OC1_SetConfig+0x128>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d007      	beq.n	800336c <TIM_OC1_SetConfig+0x88>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <TIM_OC1_SetConfig+0x12c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <TIM_OC1_SetConfig+0x88>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a2b      	ldr	r2, [pc, #172]	; (8003414 <TIM_OC1_SetConfig+0x130>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d10c      	bne.n	8003386 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0308 	bic.w	r3, r3, #8
 8003372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <TIM_OC1_SetConfig+0x11c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <TIM_OC1_SetConfig+0xd2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <TIM_OC1_SetConfig+0x120>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00f      	beq.n	80033b6 <TIM_OC1_SetConfig+0xd2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <TIM_OC1_SetConfig+0x124>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00b      	beq.n	80033b6 <TIM_OC1_SetConfig+0xd2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1a      	ldr	r2, [pc, #104]	; (800340c <TIM_OC1_SetConfig+0x128>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <TIM_OC1_SetConfig+0xd2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a19      	ldr	r2, [pc, #100]	; (8003410 <TIM_OC1_SetConfig+0x12c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_OC1_SetConfig+0xd2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a18      	ldr	r2, [pc, #96]	; (8003414 <TIM_OC1_SetConfig+0x130>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	621a      	str	r2, [r3, #32]
}
 80033f4:	bf00      	nop
 80033f6:	371c      	adds	r7, #28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40013400 	.word	0x40013400
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800
 8003414:	40015000 	.word	0x40015000

08003418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0210 	bic.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0320 	bic.w	r3, r3, #32
 8003466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <TIM_OC2_SetConfig+0x110>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d007      	beq.n	800348c <TIM_OC2_SetConfig+0x74>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a2b      	ldr	r2, [pc, #172]	; (800352c <TIM_OC2_SetConfig+0x114>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d003      	beq.n	800348c <TIM_OC2_SetConfig+0x74>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <TIM_OC2_SetConfig+0x118>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10d      	bne.n	80034a8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <TIM_OC2_SetConfig+0x110>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <TIM_OC2_SetConfig+0xc0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <TIM_OC2_SetConfig+0x114>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00f      	beq.n	80034d8 <TIM_OC2_SetConfig+0xc0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <TIM_OC2_SetConfig+0x11c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00b      	beq.n	80034d8 <TIM_OC2_SetConfig+0xc0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <TIM_OC2_SetConfig+0x120>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <TIM_OC2_SetConfig+0xc0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <TIM_OC2_SetConfig+0x124>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_OC2_SetConfig+0xc0>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a17      	ldr	r2, [pc, #92]	; (8003530 <TIM_OC2_SetConfig+0x118>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d113      	bne.n	8003500 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	621a      	str	r2, [r3, #32]
}
 800351a:	bf00      	nop
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40013400 	.word	0x40013400
 8003530:	40015000 	.word	0x40015000
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800

08003540 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800358c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <TIM_OC3_SetConfig+0x10c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <TIM_OC3_SetConfig+0x72>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <TIM_OC3_SetConfig+0x110>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_OC3_SetConfig+0x72>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a29      	ldr	r2, [pc, #164]	; (8003654 <TIM_OC3_SetConfig+0x114>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d10d      	bne.n	80035ce <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <TIM_OC3_SetConfig+0x10c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <TIM_OC3_SetConfig+0xbe>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <TIM_OC3_SetConfig+0x110>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00f      	beq.n	80035fe <TIM_OC3_SetConfig+0xbe>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <TIM_OC3_SetConfig+0x118>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00b      	beq.n	80035fe <TIM_OC3_SetConfig+0xbe>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1c      	ldr	r2, [pc, #112]	; (800365c <TIM_OC3_SetConfig+0x11c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d007      	beq.n	80035fe <TIM_OC3_SetConfig+0xbe>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <TIM_OC3_SetConfig+0x120>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d003      	beq.n	80035fe <TIM_OC3_SetConfig+0xbe>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a16      	ldr	r2, [pc, #88]	; (8003654 <TIM_OC3_SetConfig+0x114>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d113      	bne.n	8003626 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	621a      	str	r2, [r3, #32]
}
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40013400 	.word	0x40013400
 8003654:	40015000 	.word	0x40015000
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800

08003664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a2c      	ldr	r2, [pc, #176]	; (8003774 <TIM_OC4_SetConfig+0x110>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <TIM_OC4_SetConfig+0x74>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a2b      	ldr	r2, [pc, #172]	; (8003778 <TIM_OC4_SetConfig+0x114>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_OC4_SetConfig+0x74>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a2a      	ldr	r2, [pc, #168]	; (800377c <TIM_OC4_SetConfig+0x118>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10d      	bne.n	80036f4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	031b      	lsls	r3, r3, #12
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <TIM_OC4_SetConfig+0x110>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <TIM_OC4_SetConfig+0xc0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <TIM_OC4_SetConfig+0x114>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00f      	beq.n	8003724 <TIM_OC4_SetConfig+0xc0>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <TIM_OC4_SetConfig+0x11c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_OC4_SetConfig+0xc0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <TIM_OC4_SetConfig+0x120>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <TIM_OC4_SetConfig+0xc0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a1c      	ldr	r2, [pc, #112]	; (8003788 <TIM_OC4_SetConfig+0x124>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_OC4_SetConfig+0xc0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a17      	ldr	r2, [pc, #92]	; (800377c <TIM_OC4_SetConfig+0x118>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d113      	bne.n	800374c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003732:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	019b      	lsls	r3, r3, #6
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40013400 	.word	0x40013400
 800377c:	40015000 	.word	0x40015000
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	041b      	lsls	r3, r3, #16
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a19      	ldr	r2, [pc, #100]	; (8003848 <TIM_OC5_SetConfig+0xbc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <TIM_OC5_SetConfig+0x82>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a18      	ldr	r2, [pc, #96]	; (800384c <TIM_OC5_SetConfig+0xc0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <TIM_OC5_SetConfig+0x82>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a17      	ldr	r2, [pc, #92]	; (8003850 <TIM_OC5_SetConfig+0xc4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_OC5_SetConfig+0x82>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a16      	ldr	r2, [pc, #88]	; (8003854 <TIM_OC5_SetConfig+0xc8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_OC5_SetConfig+0x82>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <TIM_OC5_SetConfig+0xcc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_OC5_SetConfig+0x82>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <TIM_OC5_SetConfig+0xd0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d109      	bne.n	8003822 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	621a      	str	r2, [r3, #32]
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40013400 	.word	0x40013400
 8003850:	40014000 	.word	0x40014000
 8003854:	40014400 	.word	0x40014400
 8003858:	40014800 	.word	0x40014800
 800385c:	40015000 	.word	0x40015000

08003860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	051b      	lsls	r3, r3, #20
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a1a      	ldr	r2, [pc, #104]	; (8003920 <TIM_OC6_SetConfig+0xc0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <TIM_OC6_SetConfig+0x84>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a19      	ldr	r2, [pc, #100]	; (8003924 <TIM_OC6_SetConfig+0xc4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00f      	beq.n	80038e4 <TIM_OC6_SetConfig+0x84>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a18      	ldr	r2, [pc, #96]	; (8003928 <TIM_OC6_SetConfig+0xc8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_OC6_SetConfig+0x84>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <TIM_OC6_SetConfig+0xcc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_OC6_SetConfig+0x84>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a16      	ldr	r2, [pc, #88]	; (8003930 <TIM_OC6_SetConfig+0xd0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_OC6_SetConfig+0x84>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <TIM_OC6_SetConfig+0xd4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d109      	bne.n	80038f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	029b      	lsls	r3, r3, #10
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	621a      	str	r2, [r3, #32]
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40012c00 	.word	0x40012c00
 8003924:	40013400 	.word	0x40013400
 8003928:	40014000 	.word	0x40014000
 800392c:	40014400 	.word	0x40014400
 8003930:	40014800 	.word	0x40014800
 8003934:	40015000 	.word	0x40015000

08003938 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003958:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4a56      	ldr	r2, [pc, #344]	; (8003ae0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	f000 80a2 	beq.w	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 800398e:	4a54      	ldr	r2, [pc, #336]	; (8003ae0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	f200 809b 	bhi.w	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 8003996:	4a53      	ldr	r2, [pc, #332]	; (8003ae4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8003998:	4293      	cmp	r3, r2
 800399a:	f000 809a 	beq.w	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 800399e:	4a51      	ldr	r2, [pc, #324]	; (8003ae4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	f200 8093 	bhi.w	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 80039a6:	4a50      	ldr	r2, [pc, #320]	; (8003ae8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	f000 8092 	beq.w	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 80039ae:	4a4e      	ldr	r2, [pc, #312]	; (8003ae8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	f200 808b 	bhi.w	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 80039b6:	4a4d      	ldr	r2, [pc, #308]	; (8003aec <TIM_SlaveTimer_SetConfig+0x1b4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	f000 808a 	beq.w	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 80039be:	4a4b      	ldr	r2, [pc, #300]	; (8003aec <TIM_SlaveTimer_SetConfig+0x1b4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	f200 8083 	bhi.w	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 80039c6:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	f000 8082 	beq.w	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 80039ce:	4a48      	ldr	r2, [pc, #288]	; (8003af0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d87b      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 80039d4:	4a47      	ldr	r2, [pc, #284]	; (8003af4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d07b      	beq.n	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 80039da:	4a46      	ldr	r2, [pc, #280]	; (8003af4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d875      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 80039e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80039e4:	d075      	beq.n	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 80039e6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80039ea:	d86f      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 80039ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f0:	d06f      	beq.n	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 80039f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039f6:	d869      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d01a      	beq.n	8003a32 <TIM_SlaveTimer_SetConfig+0xfa>
 80039fc:	2b70      	cmp	r3, #112	; 0x70
 80039fe:	d865      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 8003a00:	2b60      	cmp	r3, #96	; 0x60
 8003a02:	d059      	beq.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x180>
 8003a04:	2b60      	cmp	r3, #96	; 0x60
 8003a06:	d861      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 8003a08:	2b50      	cmp	r3, #80	; 0x50
 8003a0a:	d04b      	beq.n	8003aa4 <TIM_SlaveTimer_SetConfig+0x16c>
 8003a0c:	2b50      	cmp	r3, #80	; 0x50
 8003a0e:	d85d      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d019      	beq.n	8003a48 <TIM_SlaveTimer_SetConfig+0x110>
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d859      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 8003a18:	2b30      	cmp	r3, #48	; 0x30
 8003a1a:	d05a      	beq.n	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 8003a1c:	2b30      	cmp	r3, #48	; 0x30
 8003a1e:	d855      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d056      	beq.n	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d851      	bhi.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d052      	beq.n	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d050      	beq.n	8003ad2 <TIM_SlaveTimer_SetConfig+0x19a>
 8003a30:	e04c      	b.n	8003acc <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003a42:	f000 f9ff 	bl	8003e44 <TIM_ETR_SetConfig>
      break;
 8003a46:	e045      	b.n	8003ad4 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	d004      	beq.n	8003a5a <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003a54:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003a58:	d101      	bne.n	8003a5e <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e03b      	b.n	8003ad6 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a1a      	ldr	r2, [r3, #32]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a84:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	621a      	str	r2, [r3, #32]
      break;
 8003aa2:	e017      	b.n	8003ad4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f000 f895 	bl	8003be0 <TIM_TI1_ConfigInputStage>
      break;
 8003ab6:	e00d      	b.n	8003ad4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f000 f8f7 	bl	8003cb8 <TIM_TI2_ConfigInputStage>
      break;
 8003aca:	e003      	b.n	8003ad4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad0:	e000      	b.n	8003ad4 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8003ad2:	bf00      	nop
  }

  return status;
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	00100070 	.word	0x00100070
 8003ae4:	00100060 	.word	0x00100060
 8003ae8:	00100050 	.word	0x00100050
 8003aec:	00100040 	.word	0x00100040
 8003af0:	00100030 	.word	0x00100030
 8003af4:	00100020 	.word	0x00100020

08003af8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f023 0201 	bic.w	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <TIM_TI1_SetConfig+0xcc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01b      	beq.n	8003b5e <TIM_TI1_SetConfig+0x66>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d017      	beq.n	8003b5e <TIM_TI1_SetConfig+0x66>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <TIM_TI1_SetConfig+0xd0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <TIM_TI1_SetConfig+0x66>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <TIM_TI1_SetConfig+0xd4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00f      	beq.n	8003b5e <TIM_TI1_SetConfig+0x66>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a23      	ldr	r2, [pc, #140]	; (8003bd0 <TIM_TI1_SetConfig+0xd8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00b      	beq.n	8003b5e <TIM_TI1_SetConfig+0x66>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a22      	ldr	r2, [pc, #136]	; (8003bd4 <TIM_TI1_SetConfig+0xdc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <TIM_TI1_SetConfig+0x66>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <TIM_TI1_SetConfig+0xe0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_TI1_SetConfig+0x66>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <TIM_TI1_SetConfig+0xe4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <TIM_TI1_SetConfig+0x6a>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <TIM_TI1_SetConfig+0x6c>
 8003b62:	2300      	movs	r3, #0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e003      	b.n	8003b82 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f023 030a 	bic.w	r3, r3, #10
 8003b9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f003 030a 	and.w	r3, r3, #10
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40000400 	.word	0x40000400
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40013400 	.word	0x40013400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40015000 	.word	0x40015000

08003be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0201 	bic.w	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 030a 	bic.w	r3, r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b087      	sub	sp, #28
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f023 0210 	bic.w	r2, r3, #16
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	031b      	lsls	r3, r3, #12
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c90:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0210 	bic.w	r2, r3, #16
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	031b      	lsls	r3, r3, #12
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	621a      	str	r2, [r3, #32]
}
 8003d0c:	bf00      	nop
 8003d0e:	371c      	adds	r7, #28
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f023 0303 	bic.w	r3, r3, #3
 8003d44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	621a      	str	r2, [r3, #32]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	031b      	lsls	r3, r3, #12
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	031b      	lsls	r3, r3, #12
 8003de8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f043 0307 	orr.w	r3, r3, #7
 8003e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	609a      	str	r2, [r3, #8]
}
 8003e38:	bf00      	nop
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	021a      	lsls	r2, r3, #8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	609a      	str	r2, [r3, #8]
}
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	2201      	movs	r2, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1a      	ldr	r2, [r3, #32]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e074      	b.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a34      	ldr	r2, [pc, #208]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a33      	ldr	r2, [pc, #204]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a31      	ldr	r2, [pc, #196]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a21      	ldr	r2, [pc, #132]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d022      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f68:	d01d      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d018      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d013      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d00e      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d009      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d004      	beq.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40013400 	.word	0x40013400
 8003fe8:	40015000 	.word	0x40015000
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40014000 	.word	0x40014000

08003ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e042      	b.n	8004094 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fc fd25 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2224      	movs	r2, #36	; 0x24
 800402a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d002      	beq.n	800404c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fb24 	bl	8004694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f825 	bl	800409c <UART_SetConfig>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e01b      	b.n	8004094 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800406a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800407a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fba3 	bl	80047d8 <UART_CheckIdleState>
 8004092:	4603      	mov	r3, r0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b08c      	sub	sp, #48	; 0x30
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4baa      	ldr	r3, [pc, #680]	; (8004374 <UART_SetConfig+0x2d8>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a9f      	ldr	r2, [pc, #636]	; (8004378 <UART_SetConfig+0x2dc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004104:	4313      	orrs	r3, r2
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004112:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	6812      	ldr	r2, [r2, #0]
 800411a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411c:	430b      	orrs	r3, r1
 800411e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	f023 010f 	bic.w	r1, r3, #15
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a90      	ldr	r2, [pc, #576]	; (800437c <UART_SetConfig+0x2e0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d125      	bne.n	800418c <UART_SetConfig+0xf0>
 8004140:	4b8f      	ldr	r3, [pc, #572]	; (8004380 <UART_SetConfig+0x2e4>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b03      	cmp	r3, #3
 800414c:	d81a      	bhi.n	8004184 <UART_SetConfig+0xe8>
 800414e:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <UART_SetConfig+0xb8>)
 8004150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004154:	08004165 	.word	0x08004165
 8004158:	08004175 	.word	0x08004175
 800415c:	0800416d 	.word	0x0800416d
 8004160:	0800417d 	.word	0x0800417d
 8004164:	2301      	movs	r3, #1
 8004166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416a:	e116      	b.n	800439a <UART_SetConfig+0x2fe>
 800416c:	2302      	movs	r3, #2
 800416e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004172:	e112      	b.n	800439a <UART_SetConfig+0x2fe>
 8004174:	2304      	movs	r3, #4
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417a:	e10e      	b.n	800439a <UART_SetConfig+0x2fe>
 800417c:	2308      	movs	r3, #8
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004182:	e10a      	b.n	800439a <UART_SetConfig+0x2fe>
 8004184:	2310      	movs	r3, #16
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418a:	e106      	b.n	800439a <UART_SetConfig+0x2fe>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a7c      	ldr	r2, [pc, #496]	; (8004384 <UART_SetConfig+0x2e8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d138      	bne.n	8004208 <UART_SetConfig+0x16c>
 8004196:	4b7a      	ldr	r3, [pc, #488]	; (8004380 <UART_SetConfig+0x2e4>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d82d      	bhi.n	8004200 <UART_SetConfig+0x164>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0x110>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041e1 	.word	0x080041e1
 80041b0:	08004201 	.word	0x08004201
 80041b4:	08004201 	.word	0x08004201
 80041b8:	08004201 	.word	0x08004201
 80041bc:	080041f1 	.word	0x080041f1
 80041c0:	08004201 	.word	0x08004201
 80041c4:	08004201 	.word	0x08004201
 80041c8:	08004201 	.word	0x08004201
 80041cc:	080041e9 	.word	0x080041e9
 80041d0:	08004201 	.word	0x08004201
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004201 	.word	0x08004201
 80041dc:	080041f9 	.word	0x080041f9
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e6:	e0d8      	b.n	800439a <UART_SetConfig+0x2fe>
 80041e8:	2302      	movs	r3, #2
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ee:	e0d4      	b.n	800439a <UART_SetConfig+0x2fe>
 80041f0:	2304      	movs	r3, #4
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f6:	e0d0      	b.n	800439a <UART_SetConfig+0x2fe>
 80041f8:	2308      	movs	r3, #8
 80041fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fe:	e0cc      	b.n	800439a <UART_SetConfig+0x2fe>
 8004200:	2310      	movs	r3, #16
 8004202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004206:	e0c8      	b.n	800439a <UART_SetConfig+0x2fe>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a5e      	ldr	r2, [pc, #376]	; (8004388 <UART_SetConfig+0x2ec>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d125      	bne.n	800425e <UART_SetConfig+0x1c2>
 8004212:	4b5b      	ldr	r3, [pc, #364]	; (8004380 <UART_SetConfig+0x2e4>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800421c:	2b30      	cmp	r3, #48	; 0x30
 800421e:	d016      	beq.n	800424e <UART_SetConfig+0x1b2>
 8004220:	2b30      	cmp	r3, #48	; 0x30
 8004222:	d818      	bhi.n	8004256 <UART_SetConfig+0x1ba>
 8004224:	2b20      	cmp	r3, #32
 8004226:	d00a      	beq.n	800423e <UART_SetConfig+0x1a2>
 8004228:	2b20      	cmp	r3, #32
 800422a:	d814      	bhi.n	8004256 <UART_SetConfig+0x1ba>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <UART_SetConfig+0x19a>
 8004230:	2b10      	cmp	r3, #16
 8004232:	d008      	beq.n	8004246 <UART_SetConfig+0x1aa>
 8004234:	e00f      	b.n	8004256 <UART_SetConfig+0x1ba>
 8004236:	2300      	movs	r3, #0
 8004238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423c:	e0ad      	b.n	800439a <UART_SetConfig+0x2fe>
 800423e:	2302      	movs	r3, #2
 8004240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004244:	e0a9      	b.n	800439a <UART_SetConfig+0x2fe>
 8004246:	2304      	movs	r3, #4
 8004248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424c:	e0a5      	b.n	800439a <UART_SetConfig+0x2fe>
 800424e:	2308      	movs	r3, #8
 8004250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004254:	e0a1      	b.n	800439a <UART_SetConfig+0x2fe>
 8004256:	2310      	movs	r3, #16
 8004258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425c:	e09d      	b.n	800439a <UART_SetConfig+0x2fe>
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a4a      	ldr	r2, [pc, #296]	; (800438c <UART_SetConfig+0x2f0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d125      	bne.n	80042b4 <UART_SetConfig+0x218>
 8004268:	4b45      	ldr	r3, [pc, #276]	; (8004380 <UART_SetConfig+0x2e4>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004272:	2bc0      	cmp	r3, #192	; 0xc0
 8004274:	d016      	beq.n	80042a4 <UART_SetConfig+0x208>
 8004276:	2bc0      	cmp	r3, #192	; 0xc0
 8004278:	d818      	bhi.n	80042ac <UART_SetConfig+0x210>
 800427a:	2b80      	cmp	r3, #128	; 0x80
 800427c:	d00a      	beq.n	8004294 <UART_SetConfig+0x1f8>
 800427e:	2b80      	cmp	r3, #128	; 0x80
 8004280:	d814      	bhi.n	80042ac <UART_SetConfig+0x210>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <UART_SetConfig+0x1f0>
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d008      	beq.n	800429c <UART_SetConfig+0x200>
 800428a:	e00f      	b.n	80042ac <UART_SetConfig+0x210>
 800428c:	2300      	movs	r3, #0
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004292:	e082      	b.n	800439a <UART_SetConfig+0x2fe>
 8004294:	2302      	movs	r3, #2
 8004296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429a:	e07e      	b.n	800439a <UART_SetConfig+0x2fe>
 800429c:	2304      	movs	r3, #4
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042a2:	e07a      	b.n	800439a <UART_SetConfig+0x2fe>
 80042a4:	2308      	movs	r3, #8
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042aa:	e076      	b.n	800439a <UART_SetConfig+0x2fe>
 80042ac:	2310      	movs	r3, #16
 80042ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042b2:	e072      	b.n	800439a <UART_SetConfig+0x2fe>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a35      	ldr	r2, [pc, #212]	; (8004390 <UART_SetConfig+0x2f4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d12a      	bne.n	8004314 <UART_SetConfig+0x278>
 80042be:	4b30      	ldr	r3, [pc, #192]	; (8004380 <UART_SetConfig+0x2e4>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042cc:	d01a      	beq.n	8004304 <UART_SetConfig+0x268>
 80042ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d2:	d81b      	bhi.n	800430c <UART_SetConfig+0x270>
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d8:	d00c      	beq.n	80042f4 <UART_SetConfig+0x258>
 80042da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042de:	d815      	bhi.n	800430c <UART_SetConfig+0x270>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <UART_SetConfig+0x250>
 80042e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e8:	d008      	beq.n	80042fc <UART_SetConfig+0x260>
 80042ea:	e00f      	b.n	800430c <UART_SetConfig+0x270>
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042f2:	e052      	b.n	800439a <UART_SetConfig+0x2fe>
 80042f4:	2302      	movs	r3, #2
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042fa:	e04e      	b.n	800439a <UART_SetConfig+0x2fe>
 80042fc:	2304      	movs	r3, #4
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004302:	e04a      	b.n	800439a <UART_SetConfig+0x2fe>
 8004304:	2308      	movs	r3, #8
 8004306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800430a:	e046      	b.n	800439a <UART_SetConfig+0x2fe>
 800430c:	2310      	movs	r3, #16
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004312:	e042      	b.n	800439a <UART_SetConfig+0x2fe>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a17      	ldr	r2, [pc, #92]	; (8004378 <UART_SetConfig+0x2dc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d13a      	bne.n	8004394 <UART_SetConfig+0x2f8>
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <UART_SetConfig+0x2e4>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004328:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800432c:	d01a      	beq.n	8004364 <UART_SetConfig+0x2c8>
 800432e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004332:	d81b      	bhi.n	800436c <UART_SetConfig+0x2d0>
 8004334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004338:	d00c      	beq.n	8004354 <UART_SetConfig+0x2b8>
 800433a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433e:	d815      	bhi.n	800436c <UART_SetConfig+0x2d0>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <UART_SetConfig+0x2b0>
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004348:	d008      	beq.n	800435c <UART_SetConfig+0x2c0>
 800434a:	e00f      	b.n	800436c <UART_SetConfig+0x2d0>
 800434c:	2300      	movs	r3, #0
 800434e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004352:	e022      	b.n	800439a <UART_SetConfig+0x2fe>
 8004354:	2302      	movs	r3, #2
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800435a:	e01e      	b.n	800439a <UART_SetConfig+0x2fe>
 800435c:	2304      	movs	r3, #4
 800435e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004362:	e01a      	b.n	800439a <UART_SetConfig+0x2fe>
 8004364:	2308      	movs	r3, #8
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800436a:	e016      	b.n	800439a <UART_SetConfig+0x2fe>
 800436c:	2310      	movs	r3, #16
 800436e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004372:	e012      	b.n	800439a <UART_SetConfig+0x2fe>
 8004374:	cfff69f3 	.word	0xcfff69f3
 8004378:	40008000 	.word	0x40008000
 800437c:	40013800 	.word	0x40013800
 8004380:	40021000 	.word	0x40021000
 8004384:	40004400 	.word	0x40004400
 8004388:	40004800 	.word	0x40004800
 800438c:	40004c00 	.word	0x40004c00
 8004390:	40005000 	.word	0x40005000
 8004394:	2310      	movs	r3, #16
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4aae      	ldr	r2, [pc, #696]	; (8004658 <UART_SetConfig+0x5bc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	f040 8097 	bne.w	80044d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d823      	bhi.n	80043f6 <UART_SetConfig+0x35a>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <UART_SetConfig+0x318>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043f7 	.word	0x080043f7
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	080043f7 	.word	0x080043f7
 80043c4:	080043e7 	.word	0x080043e7
 80043c8:	080043f7 	.word	0x080043f7
 80043cc:	080043f7 	.word	0x080043f7
 80043d0:	080043f7 	.word	0x080043f7
 80043d4:	080043ef 	.word	0x080043ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d8:	f7fd fd66 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 80043dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043de:	e010      	b.n	8004402 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043e0:	4b9e      	ldr	r3, [pc, #632]	; (800465c <UART_SetConfig+0x5c0>)
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043e4:	e00d      	b.n	8004402 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043e6:	f7fd fcf1 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 80043ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043ec:	e009      	b.n	8004402 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043f4:	e005      	b.n	8004402 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004400:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8130 	beq.w	800466a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	4a94      	ldr	r2, [pc, #592]	; (8004660 <UART_SetConfig+0x5c4>)
 8004410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004414:	461a      	mov	r2, r3
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	fbb3 f3f2 	udiv	r3, r3, r2
 800441c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	4413      	add	r3, r2
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	429a      	cmp	r2, r3
 800442c:	d305      	bcc.n	800443a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	429a      	cmp	r2, r3
 8004438:	d903      	bls.n	8004442 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004440:	e113      	b.n	800466a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	2200      	movs	r2, #0
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	60fa      	str	r2, [r7, #12]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	4a84      	ldr	r2, [pc, #528]	; (8004660 <UART_SetConfig+0x5c4>)
 8004450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004454:	b29b      	uxth	r3, r3
 8004456:	2200      	movs	r2, #0
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004460:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004464:	f7fb fed8 	bl	8000218 <__aeabi_uldivmod>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	020b      	lsls	r3, r1, #8
 800447a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800447e:	0202      	lsls	r2, r0, #8
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	6849      	ldr	r1, [r1, #4]
 8004484:	0849      	lsrs	r1, r1, #1
 8004486:	2000      	movs	r0, #0
 8004488:	460c      	mov	r4, r1
 800448a:	4605      	mov	r5, r0
 800448c:	eb12 0804 	adds.w	r8, r2, r4
 8004490:	eb43 0905 	adc.w	r9, r3, r5
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	469a      	mov	sl, r3
 800449c:	4693      	mov	fp, r2
 800449e:	4652      	mov	r2, sl
 80044a0:	465b      	mov	r3, fp
 80044a2:	4640      	mov	r0, r8
 80044a4:	4649      	mov	r1, r9
 80044a6:	f7fb feb7 	bl	8000218 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4613      	mov	r3, r2
 80044b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b8:	d308      	bcc.n	80044cc <UART_SetConfig+0x430>
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c0:	d204      	bcs.n	80044cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a3a      	ldr	r2, [r7, #32]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	e0ce      	b.n	800466a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044d2:	e0ca      	b.n	800466a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044dc:	d166      	bne.n	80045ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80044de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d827      	bhi.n	8004536 <UART_SetConfig+0x49a>
 80044e6:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <UART_SetConfig+0x450>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	08004511 	.word	0x08004511
 80044f0:	08004519 	.word	0x08004519
 80044f4:	08004521 	.word	0x08004521
 80044f8:	08004537 	.word	0x08004537
 80044fc:	08004527 	.word	0x08004527
 8004500:	08004537 	.word	0x08004537
 8004504:	08004537 	.word	0x08004537
 8004508:	08004537 	.word	0x08004537
 800450c:	0800452f 	.word	0x0800452f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004510:	f7fd fcca 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8004514:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004516:	e014      	b.n	8004542 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004518:	f7fd fcdc 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 800451c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800451e:	e010      	b.n	8004542 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004520:	4b4e      	ldr	r3, [pc, #312]	; (800465c <UART_SetConfig+0x5c0>)
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004524:	e00d      	b.n	8004542 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004526:	f7fd fc51 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800452c:	e009      	b.n	8004542 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004534:	e005      	b.n	8004542 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004540:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8090 	beq.w	800466a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	4a44      	ldr	r2, [pc, #272]	; (8004660 <UART_SetConfig+0x5c4>)
 8004550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004554:	461a      	mov	r2, r3
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	fbb3 f3f2 	udiv	r3, r3, r2
 800455c:	005a      	lsls	r2, r3, #1
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	441a      	add	r2, r3
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2b0f      	cmp	r3, #15
 8004574:	d916      	bls.n	80045a4 <UART_SetConfig+0x508>
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d212      	bcs.n	80045a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f023 030f 	bic.w	r3, r3, #15
 8004586:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	b29b      	uxth	r3, r3
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	b29a      	uxth	r2, r3
 8004594:	8bfb      	ldrh	r3, [r7, #30]
 8004596:	4313      	orrs	r3, r2
 8004598:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	8bfa      	ldrh	r2, [r7, #30]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	e062      	b.n	800466a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045aa:	e05e      	b.n	800466a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d828      	bhi.n	8004606 <UART_SetConfig+0x56a>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <UART_SetConfig+0x520>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	08004607 	.word	0x08004607
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	08004607 	.word	0x08004607
 80045d4:	08004607 	.word	0x08004607
 80045d8:	08004607 	.word	0x08004607
 80045dc:	080045ff 	.word	0x080045ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7fd fc62 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 80045e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045e6:	e014      	b.n	8004612 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e8:	f7fd fc74 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045ee:	e010      	b.n	8004612 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <UART_SetConfig+0x5c0>)
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045f4:	e00d      	b.n	8004612 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fd fbe9 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045fc:	e009      	b.n	8004612 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004604:	e005      	b.n	8004612 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004610:	bf00      	nop
    }

    if (pclk != 0U)
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d028      	beq.n	800466a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	4a10      	ldr	r2, [pc, #64]	; (8004660 <UART_SetConfig+0x5c4>)
 800461e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004622:	461a      	mov	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	fbb3 f2f2 	udiv	r2, r3, r2
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	441a      	add	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	fbb2 f3f3 	udiv	r3, r2, r3
 800463a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	d910      	bls.n	8004664 <UART_SetConfig+0x5c8>
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004648:	d20c      	bcs.n	8004664 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	b29a      	uxth	r2, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	e009      	b.n	800466a <UART_SetConfig+0x5ce>
 8004656:	bf00      	nop
 8004658:	40008000 	.word	0x40008000
 800465c:	00f42400 	.word	0x00f42400
 8004660:	08004d60 	.word	0x08004d60
      }
      else
      {
        ret = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2201      	movs	r2, #1
 800466e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2201      	movs	r2, #1
 8004676:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004686:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800468a:	4618      	mov	r0, r3
 800468c:	3730      	adds	r7, #48	; 0x30
 800468e:	46bd      	mov	sp, r7
 8004690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01a      	beq.n	80047aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004792:	d10a      	bne.n	80047aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b098      	sub	sp, #96	; 0x60
 80047dc:	af02      	add	r7, sp, #8
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e8:	f7fc fafc 	bl	8000de4 <HAL_GetTick>
 80047ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d12f      	bne.n	800485c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f88e 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d022      	beq.n	800485c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800482a:	653b      	str	r3, [r7, #80]	; 0x50
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004834:	647b      	str	r3, [r7, #68]	; 0x44
 8004836:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800483a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e063      	b.n	8004924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b04      	cmp	r3, #4
 8004868:	d149      	bne.n	80048fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800486a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004872:	2200      	movs	r2, #0
 8004874:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f857 	bl	800492c <UART_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d03c      	beq.n	80048fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	623b      	str	r3, [r7, #32]
   return(result);
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a2:	633b      	str	r3, [r7, #48]	; 0x30
 80048a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e6      	bne.n	8004884 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	e853 3f00 	ldrex	r3, [r3]
 80048c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f023 0301 	bic.w	r3, r3, #1
 80048cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3308      	adds	r3, #8
 80048d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048d6:	61fa      	str	r2, [r7, #28]
 80048d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	69b9      	ldr	r1, [r7, #24]
 80048dc:	69fa      	ldr	r2, [r7, #28]
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	617b      	str	r3, [r7, #20]
   return(result);
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e5      	bne.n	80048b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e012      	b.n	8004924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3758      	adds	r7, #88	; 0x58
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493c:	e04f      	b.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d04b      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004946:	f7fc fa4d 	bl	8000de4 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	429a      	cmp	r2, r3
 8004954:	d302      	bcc.n	800495c <UART_WaitOnFlagUntilTimeout+0x30>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e04e      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0304 	and.w	r3, r3, #4
 800496a:	2b00      	cmp	r3, #0
 800496c:	d037      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b80      	cmp	r3, #128	; 0x80
 8004972:	d034      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d031      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b08      	cmp	r3, #8
 8004986:	d110      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2208      	movs	r2, #8
 800498e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f838 	bl	8004a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2208      	movs	r2, #8
 800499a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e029      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b8:	d111      	bne.n	80049de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 f81e 	bl	8004a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e00f      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4013      	ands	r3, r2
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	bf0c      	ite	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	2300      	movne	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d0a0      	beq.n	800493e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b095      	sub	sp, #84	; 0x54
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e6      	bne.n	8004a0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3308      	adds	r3, #8
 8004a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3308      	adds	r3, #8
 8004a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e3      	bne.n	8004a40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d118      	bne.n	8004ab2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f023 0310 	bic.w	r3, r3, #16
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6979      	ldr	r1, [r7, #20]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e6      	bne.n	8004a80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004ac6:	bf00      	nop
 8004ac8:	3754      	adds	r7, #84	; 0x54
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e027      	b.n	8004b38 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e02d      	b.n	8004bb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2224      	movs	r2, #36	; 0x24
 8004b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f84f 	bl	8004c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e02d      	b.n	8004c34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	; 0x24
 8004be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f811 	bl	8004c3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d108      	bne.n	8004c5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c5c:	e031      	b.n	8004cc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c5e:	2308      	movs	r3, #8
 8004c60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c62:	2308      	movs	r3, #8
 8004c64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	0e5b      	lsrs	r3, r3, #25
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	0f5b      	lsrs	r3, r3, #29
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c86:	7bbb      	ldrb	r3, [r7, #14]
 8004c88:	7b3a      	ldrb	r2, [r7, #12]
 8004c8a:	4911      	ldr	r1, [pc, #68]	; (8004cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8004c8c:	5c8a      	ldrb	r2, [r1, r2]
 8004c8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c92:	7b3a      	ldrb	r2, [r7, #12]
 8004c94:	490f      	ldr	r1, [pc, #60]	; (8004cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8004c96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c98:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	7b7a      	ldrb	r2, [r7, #13]
 8004ca8:	4909      	ldr	r1, [pc, #36]	; (8004cd0 <UARTEx_SetNbDataToProcess+0x94>)
 8004caa:	5c8a      	ldrb	r2, [r1, r2]
 8004cac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cb0:	7b7a      	ldrb	r2, [r7, #13]
 8004cb2:	4908      	ldr	r1, [pc, #32]	; (8004cd4 <UARTEx_SetNbDataToProcess+0x98>)
 8004cb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	08004d78 	.word	0x08004d78
 8004cd4:	08004d80 	.word	0x08004d80

08004cd8 <memset>:
 8004cd8:	4402      	add	r2, r0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d100      	bne.n	8004ce2 <memset+0xa>
 8004ce0:	4770      	bx	lr
 8004ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce6:	e7f9      	b.n	8004cdc <memset+0x4>

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4d0d      	ldr	r5, [pc, #52]	; (8004d20 <__libc_init_array+0x38>)
 8004cec:	4c0d      	ldr	r4, [pc, #52]	; (8004d24 <__libc_init_array+0x3c>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	2600      	movs	r6, #0
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	4d0b      	ldr	r5, [pc, #44]	; (8004d28 <__libc_init_array+0x40>)
 8004cfa:	4c0c      	ldr	r4, [pc, #48]	; (8004d2c <__libc_init_array+0x44>)
 8004cfc:	f000 f818 	bl	8004d30 <_init>
 8004d00:	1b64      	subs	r4, r4, r5
 8004d02:	10a4      	asrs	r4, r4, #2
 8004d04:	2600      	movs	r6, #0
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	08004d90 	.word	0x08004d90
 8004d24:	08004d90 	.word	0x08004d90
 8004d28:	08004d90 	.word	0x08004d90
 8004d2c:	08004d94 	.word	0x08004d94

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
