
CS4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055dc  080055dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055e4  080055e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055e4  080055e4  000155e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080055f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080055f8  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001168c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020de  00000000  00000000  0003170b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  000337f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c43  00000000  00000000  00034790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002567d  00000000  00000000  000353d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f22  00000000  00000000  0005aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7b8b  00000000  00000000  0006c972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043cc  00000000  00000000  00164500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  001688cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005584 	.word	0x08005584

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005584 	.word	0x08005584

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d04:	f000 fc4b 	bl	800159e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d08:	f000 f8ac 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0c:	f000 fa5a 	bl	80011c4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d10:	f000 f8f2 	bl	8000ef8 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000d14:	f000 f9de 	bl	80010d4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000d18:	f000 f938 	bl	8000f8c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000d1c:	4848      	ldr	r0, [pc, #288]	; (8000e40 <main+0x140>)
 8000d1e:	f002 f805 	bl	8002d2c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000d22:	2100      	movs	r1, #0
 8000d24:	4846      	ldr	r0, [pc, #280]	; (8000e40 <main+0x140>)
 8000d26:	f002 fa47 	bl	80031b8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	4844      	ldr	r0, [pc, #272]	; (8000e40 <main+0x140>)
 8000d2e:	f002 fa43 	bl	80031b8 <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start(&htim3);
 8000d32:	4844      	ldr	r0, [pc, #272]	; (8000e44 <main+0x144>)
 8000d34:	f001 fffa 	bl	8002d2c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4842      	ldr	r0, [pc, #264]	; (8000e44 <main+0x144>)
 8000d3c:	f002 f8c8 	bl	8002ed0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ServoTime = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8000d40:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <main+0x140>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <main+0x148>)
 8000d4a:	801a      	strh	r2, [r3, #0]
	  ServoPeriod = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_1);
 8000d4c:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <main+0x140>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <main+0x14c>)
 8000d56:	801a      	strh	r2, [r3, #0]
	  x =  (((ServoTime-870.0)/(2115.0-870.0))*180)-90;
 8000d58:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <main+0x148>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fbad 	bl	80004bc <__aeabi_i2d>
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <main+0x150>)
 8000d68:	f7ff fa5a 	bl	8000220 <__aeabi_dsub>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4610      	mov	r0, r2
 8000d72:	4619      	mov	r1, r3
 8000d74:	a32c      	add	r3, pc, #176	; (adr r3, 8000e28 <main+0x128>)
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	f7ff fd33 	bl	80007e4 <__aeabi_ddiv>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <main+0x154>)
 8000d8c:	f7ff fc00 	bl	8000590 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <main+0x158>)
 8000d9e:	f7ff fa3f 	bl	8000220 <__aeabi_dsub>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	f7ff fe03 	bl	80009b4 <__aeabi_d2iz>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <main+0x15c>)
 8000db4:	801a      	strh	r2, [r3, #0]
	  //y = (((x+90.0)/180.0)*2000.0)+500.0;
	  y = (((x+90.0)/180.0)*(-2000.0))+2500.0;
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <main+0x15c>)
 8000db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fb7d 	bl	80004bc <__aeabi_i2d>
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <main+0x158>)
 8000dc8:	f7ff fa2c 	bl	8000224 <__adddf3>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <main+0x154>)
 8000dda:	f7ff fd03 	bl	80007e4 <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	a312      	add	r3, pc, #72	; (adr r3, 8000e30 <main+0x130>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fbd0 	bl	8000590 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	a30f      	add	r3, pc, #60	; (adr r3, 8000e38 <main+0x138>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	f7ff fa11 	bl	8000224 <__adddf3>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff fdd3 	bl	80009b4 <__aeabi_d2iz>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <main+0x160>)
 8000e14:	801a      	strh	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, y);
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <main+0x160>)
 8000e18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <main+0x144>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	635a      	str	r2, [r3, #52]	; 0x34
	  ServoTime = __HAL_TIM_GET_COMPARE(&htim1, TIM_CHANNEL_2);
 8000e22:	e78d      	b.n	8000d40 <main+0x40>
 8000e24:	f3af 8000 	nop.w
 8000e28:	00000000 	.word	0x00000000
 8000e2c:	40937400 	.word	0x40937400
 8000e30:	00000000 	.word	0x00000000
 8000e34:	c09f4000 	.word	0xc09f4000
 8000e38:	00000000 	.word	0x00000000
 8000e3c:	40a38800 	.word	0x40a38800
 8000e40:	200000bc 	.word	0x200000bc
 8000e44:	20000108 	.word	0x20000108
 8000e48:	20000154 	.word	0x20000154
 8000e4c:	20000156 	.word	0x20000156
 8000e50:	408b3000 	.word	0x408b3000
 8000e54:	40668000 	.word	0x40668000
 8000e58:	40568000 	.word	0x40568000
 8000e5c:	20000158 	.word	0x20000158
 8000e60:	2000015a 	.word	0x2000015a

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2238      	movs	r2, #56	; 0x38
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 fb5a 	bl	800552c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 fec8 	bl	8001c1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ea2:	2355      	movs	r3, #85	; 0x55
 8000ea4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 ff64 	bl	8001d84 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ec2:	f000 f9ed 	bl	80012a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2104      	movs	r1, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 fa62 	bl	80023a8 <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000eea:	f000 f9d9 	bl	80012a0 <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3750      	adds	r7, #80	; 0x50
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <MX_LPUART1_UART_Init+0x90>)
 8000f00:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f3a:	4812      	ldr	r0, [pc, #72]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f3c:	f003 fc88 	bl	8004850 <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f46:	f000 f9ab 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f4e:	f004 fa23 	bl	8005398 <HAL_UARTEx_SetTxFifoThreshold>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f58:	f000 f9a2 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4809      	ldr	r0, [pc, #36]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f60:	f004 fa58 	bl	8005414 <HAL_UARTEx_SetRxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f6a:	f000 f999 	bl	80012a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f70:	f004 f9d9 	bl	8005326 <HAL_UARTEx_DisableFifoMode>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f7a:	f000 f991 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000028 	.word	0x20000028
 8000f88:	40008000 	.word	0x40008000

08000f8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <MX_TIM1_Init+0x140>)
 8000fca:	4a41      	ldr	r2, [pc, #260]	; (80010d0 <MX_TIM1_Init+0x144>)
 8000fcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000fce:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <MX_TIM1_Init+0x140>)
 8000fd0:	22a9      	movs	r2, #169	; 0xa9
 8000fd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b3d      	ldr	r3, [pc, #244]	; (80010cc <MX_TIM1_Init+0x140>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <MX_TIM1_Init+0x140>)
 8000fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <MX_TIM1_Init+0x140>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe8:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_TIM1_Init+0x140>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fee:	4b37      	ldr	r3, [pc, #220]	; (80010cc <MX_TIM1_Init+0x140>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff4:	4835      	ldr	r0, [pc, #212]	; (80010cc <MX_TIM1_Init+0x140>)
 8000ff6:	f001 fe41 	bl	8002c7c <HAL_TIM_Base_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001000:	f000 f94e 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800100a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800100e:	4619      	mov	r1, r3
 8001010:	482e      	ldr	r0, [pc, #184]	; (80010cc <MX_TIM1_Init+0x140>)
 8001012:	f002 fb85 	bl	8003720 <HAL_TIM_ConfigClockSource>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800101c:	f000 f940 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001020:	482a      	ldr	r0, [pc, #168]	; (80010cc <MX_TIM1_Init+0x140>)
 8001022:	f002 f867 	bl	80030f4 <HAL_TIM_IC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800102c:	f000 f938 	bl	80012a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001030:	2304      	movs	r3, #4
 8001032:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001034:	2350      	movs	r3, #80	; 0x50
 8001036:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4820      	ldr	r0, [pc, #128]	; (80010cc <MX_TIM1_Init+0x140>)
 800104c:	f002 fc7e 	bl	800394c <HAL_TIM_SlaveConfigSynchro>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001056:	f000 f923 	bl	80012a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800105e:	2301      	movs	r3, #1
 8001060:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2200      	movs	r2, #0
 8001070:	4619      	mov	r1, r3
 8001072:	4816      	ldr	r0, [pc, #88]	; (80010cc <MX_TIM1_Init+0x140>)
 8001074:	f002 f9a4 	bl	80033c0 <HAL_TIM_IC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800107e:	f000 f90f 	bl	80012a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001082:	2302      	movs	r3, #2
 8001084:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001086:	2302      	movs	r3, #2
 8001088:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2204      	movs	r2, #4
 8001090:	4619      	mov	r1, r3
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_TIM1_Init+0x140>)
 8001094:	f002 f994 	bl	80033c0 <HAL_TIM_IC_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800109e:	f000 f8ff 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_TIM1_Init+0x140>)
 80010b4:	f003 fb36 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80010be:	f000 f8ef 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3740      	adds	r7, #64	; 0x40
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200000bc 	.word	0x200000bc
 80010d0:	40012c00 	.word	0x40012c00

080010d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	615a      	str	r2, [r3, #20]
 8001104:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001106:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001108:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <MX_TIM3_Init+0xec>)
 800110a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <MX_TIM3_Init+0xe8>)
 800110e:	22a9      	movs	r2, #169	; 0xa9
 8001110:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <MX_TIM3_Init+0xe8>)
 800111a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800111e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b25      	ldr	r3, [pc, #148]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800112c:	4823      	ldr	r0, [pc, #140]	; (80011bc <MX_TIM3_Init+0xe8>)
 800112e:	f001 fda5 	bl	8002c7c <HAL_TIM_Base_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001138:	f000 f8b2 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	4619      	mov	r1, r3
 8001148:	481c      	ldr	r0, [pc, #112]	; (80011bc <MX_TIM3_Init+0xe8>)
 800114a:	f002 fae9 	bl	8003720 <HAL_TIM_ConfigClockSource>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001154:	f000 f8a4 	bl	80012a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001158:	4818      	ldr	r0, [pc, #96]	; (80011bc <MX_TIM3_Init+0xe8>)
 800115a:	f001 fe57 	bl	8002e0c <HAL_TIM_PWM_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001164:	f000 f89c 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_TIM3_Init+0xe8>)
 8001178:	f003 fad4 	bl	8004724 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001182:	f000 f88d 	bl	80012a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001186:	2360      	movs	r3, #96	; 0x60
 8001188:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 800118a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800118e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	4807      	ldr	r0, [pc, #28]	; (80011bc <MX_TIM3_Init+0xe8>)
 80011a0:	f002 f9aa 	bl	80034f8 <HAL_TIM_PWM_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80011aa:	f000 f879 	bl	80012a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <MX_TIM3_Init+0xe8>)
 80011b0:	f000 f950 	bl	8001454 <HAL_TIM_MspPostInit>

}
 80011b4:	bf00      	nop
 80011b6:	3738      	adds	r7, #56	; 0x38
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000108 	.word	0x20000108
 80011c0:	40000400 	.word	0x40000400

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a28      	ldr	r2, [pc, #160]	; (8001298 <MX_GPIO_Init+0xd4>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_GPIO_Init+0xd4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b23      	ldr	r3, [pc, #140]	; (8001298 <MX_GPIO_Init+0xd4>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a22      	ldr	r2, [pc, #136]	; (8001298 <MX_GPIO_Init+0xd4>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <MX_GPIO_Init+0xd4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <MX_GPIO_Init+0xd4>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <MX_GPIO_Init+0xd4>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_GPIO_Init+0xd4>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2120      	movs	r1, #32
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f000 fcaf 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <MX_GPIO_Init+0xd8>)
 800125e:	f000 fb1f 	bl	80018a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001262:	2320      	movs	r3, #32
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f000 fb10 	bl	80018a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	2028      	movs	r0, #40	; 0x28
 8001286:	f000 fad6 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800128a:	2028      	movs	r0, #40	; 0x28
 800128c:	f000 faed 	bl	800186a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000
 800129c:	48000800 	.word	0x48000800

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a4:	b672      	cpsid	i
}
 80012a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <Error_Handler+0x8>
	...

080012ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x44>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_MspInit+0x44>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	; 0x60
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_MspInit+0x44>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <HAL_MspInit+0x44>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	; 0x58
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012e2:	f000 fd3f 	bl	8001d64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b09e      	sub	sp, #120	; 0x78
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2254      	movs	r2, #84	; 0x54
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f004 f909 	bl	800552c <memset>
  if(huart->Instance==LPUART1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_UART_MspInit+0xa8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d136      	bne.n	8001392 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001324:	2320      	movs	r3, #32
 8001326:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001328:	2300      	movs	r3, #0
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fa55 	bl	80027e0 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800133c:	f7ff ffb0 	bl	80012a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0xac>)
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <HAL_UART_MspInit+0xac>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_UART_MspInit+0xac>)
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0xac>)
 800135a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135c:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_UART_MspInit+0xac>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_UART_MspInit+0xac>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001370:	230c      	movs	r3, #12
 8001372:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001380:	230c      	movs	r3, #12
 8001382:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f000 fa87 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3778      	adds	r7, #120	; 0x78
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40008000 	.word	0x40008000
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <HAL_TIM_Base_MspInit+0xa4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12a      	bne.n	800141c <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 80013cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d0:	6613      	str	r3, [r2, #96]	; 0x60
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a1a      	ldr	r2, [pc, #104]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001408:	2306      	movs	r3, #6
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f000 fa43 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800141a:	e010      	b.n	800143e <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM3)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <HAL_TIM_Base_MspInit+0xac>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d10b      	bne.n	800143e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6593      	str	r3, [r2, #88]	; 0x58
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_TIM_Base_MspInit+0xa8>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40000400 	.word	0x40000400

08001454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <HAL_TIM_MspPostInit+0x64>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d11b      	bne.n	80014ae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_TIM_MspPostInit+0x68>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_TIM_MspPostInit+0x68>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_TIM_MspPostInit+0x68>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800148e:	2310      	movs	r3, #16
 8001490:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800149e:	2302      	movs	r3, #2
 80014a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_TIM_MspPostInit+0x6c>)
 80014aa:	f000 f9f9 	bl	80018a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40000400 	.word	0x40000400
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000400 	.word	0x48000400

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f898 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800151c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001520:	f000 fb58 	bl	8001bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <SystemInit+0x20>)
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <SystemInit+0x20>)
 8001534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800154e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001550:	f7ff ffea 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <LoopForever+0x6>)
  ldr r1, =_edata
 8001556:	490d      	ldr	r1, [pc, #52]	; (800158c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <LoopForever+0xe>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800156c:	4c0a      	ldr	r4, [pc, #40]	; (8001598 <LoopForever+0x16>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157a:	f003 ffdf 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800157e:	f7ff fbbf 	bl	8000d00 <main>

08001582 <LoopForever>:

LoopForever:
    b LoopForever
 8001582:	e7fe      	b.n	8001582 <LoopForever>
  ldr   r0, =_estack
 8001584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800158c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001590:	080055ec 	.word	0x080055ec
  ldr r2, =_sbss
 8001594:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001598:	20000160 	.word	0x20000160

0800159c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC1_2_IRQHandler>

0800159e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 f939 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f80e 	bl	80015d0 <HAL_InitTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	e001      	b.n	80015c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015c0:	f7ff fe74 	bl	80012ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015c4:	79fb      	ldrb	r3, [r7, #7]

}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_InitTick+0x68>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d022      	beq.n	800162a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_InitTick+0x6c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <HAL_InitTick+0x68>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f944 	bl	8001886 <HAL_SYSTICK_Config>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10f      	bne.n	8001624 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d809      	bhi.n	800161e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160a:	2200      	movs	r2, #0
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	f04f 30ff 	mov.w	r0, #4294967295
 8001612:	f000 f910 	bl	8001836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_InitTick+0x70>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	e007      	b.n	800162e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e004      	b.n	800162e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e001      	b.n	800162e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000008 	.word	0x20000008
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_IncTick+0x1c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_IncTick+0x20>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4413      	add	r3, r2
 8001652:	4a03      	ldr	r2, [pc, #12]	; (8001660 <HAL_IncTick+0x1c>)
 8001654:	6013      	str	r3, [r2, #0]
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	2000015c 	.word	0x2000015c
 8001664:	20000008 	.word	0x20000008

08001668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_GetTick+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	2000015c 	.word	0x2000015c

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff40 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff90 	bl	8001774 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5f 	bl	8001720 <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff33 	bl	80016e4 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa4 	bl	80017dc <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018ae:	e15a      	b.n	8001b66 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 814c 	beq.w	8001b60 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d005      	beq.n	80018e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d130      	bne.n	8001942 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	2203      	movs	r2, #3
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001916:	2201      	movs	r2, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 0201 	and.w	r2, r3, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b03      	cmp	r3, #3
 800194c:	d017      	beq.n	800197e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d123      	bne.n	80019d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	08da      	lsrs	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3208      	adds	r2, #8
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	220f      	movs	r2, #15
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0203 	and.w	r2, r3, #3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80a6 	beq.w	8001b60 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a14:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <HAL_GPIO_Init+0x2e4>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a18:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_GPIO_Init+0x2e4>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a20:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_GPIO_Init+0x2e4>)
 8001a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2c:	4a56      	ldr	r2, [pc, #344]	; (8001b88 <HAL_GPIO_Init+0x2e8>)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	089b      	lsrs	r3, r3, #2
 8001a32:	3302      	adds	r3, #2
 8001a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a56:	d01f      	beq.n	8001a98 <HAL_GPIO_Init+0x1f8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a4c      	ldr	r2, [pc, #304]	; (8001b8c <HAL_GPIO_Init+0x2ec>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d019      	beq.n	8001a94 <HAL_GPIO_Init+0x1f4>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_GPIO_Init+0x2f0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_GPIO_Init+0x1f0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4a      	ldr	r2, [pc, #296]	; (8001b94 <HAL_GPIO_Init+0x2f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00d      	beq.n	8001a8c <HAL_GPIO_Init+0x1ec>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a49      	ldr	r2, [pc, #292]	; (8001b98 <HAL_GPIO_Init+0x2f8>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x1e8>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <HAL_GPIO_Init+0x2fc>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_GPIO_Init+0x1e4>
 8001a80:	2305      	movs	r3, #5
 8001a82:	e00a      	b.n	8001a9a <HAL_GPIO_Init+0x1fa>
 8001a84:	2306      	movs	r3, #6
 8001a86:	e008      	b.n	8001a9a <HAL_GPIO_Init+0x1fa>
 8001a88:	2304      	movs	r3, #4
 8001a8a:	e006      	b.n	8001a9a <HAL_GPIO_Init+0x1fa>
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e004      	b.n	8001a9a <HAL_GPIO_Init+0x1fa>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_Init+0x1fa>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_GPIO_Init+0x1fa>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	f002 0203 	and.w	r2, r2, #3
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	4093      	lsls	r3, r2
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aaa:	4937      	ldr	r1, [pc, #220]	; (8001b88 <HAL_GPIO_Init+0x2e8>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab8:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b06:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b36:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b5a:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_GPIO_Init+0x300>)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f47f ae9d 	bne.w	80018b0 <HAL_GPIO_Init+0x10>
  }
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	48000800 	.word	0x48000800
 8001b94:	48000c00 	.word	0x48000c00
 8001b98:	48001000 	.word	0x48001000
 8001b9c:	48001400 	.word	0x48001400
 8001ba0:	40010400 	.word	0x40010400

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f806 	bl	8001c04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d141      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2a:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d131      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c38:	4b47      	ldr	r3, [pc, #284]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c3e:	4a46      	ldr	r2, [pc, #280]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c48:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c50:	4a41      	ldr	r2, [pc, #260]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c58:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2232      	movs	r2, #50	; 0x32
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a3f      	ldr	r2, [pc, #252]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	0c9b      	lsrs	r3, r3, #18
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6e:	e002      	b.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c76:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c82:	d102      	bne.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f2      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c8a:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c96:	d158      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e057      	b.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cac:	e04d      	b.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb4:	d141      	bne.n	8001d3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc2:	d131      	bne.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2232      	movs	r2, #50	; 0x32
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	0c9b      	lsrs	r3, r3, #18
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cfa:	e002      	b.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0e:	d102      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f2      	bne.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	d112      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e011      	b.n	8001d4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d38:	e007      	b.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	431bde83 	.word	0x431bde83

08001d64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d72:	6093      	str	r3, [r2, #8]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40007000 	.word	0x40007000

08001d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e2fe      	b.n	8002394 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d075      	beq.n	8001e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da2:	4b97      	ldr	r3, [pc, #604]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dac:	4b94      	ldr	r3, [pc, #592]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	2b0c      	cmp	r3, #12
 8001dba:	d102      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3e>
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d002      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x44>
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d10b      	bne.n	8001de0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	4b8d      	ldr	r3, [pc, #564]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d05b      	beq.n	8001e8c <HAL_RCC_OscConfig+0x108>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d157      	bne.n	8001e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e2d9      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de8:	d106      	bne.n	8001df8 <HAL_RCC_OscConfig+0x74>
 8001dea:	4b85      	ldr	r3, [pc, #532]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a84      	ldr	r2, [pc, #528]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x98>
 8001e02:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7e      	ldr	r2, [pc, #504]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a7b      	ldr	r2, [pc, #492]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xb0>
 8001e1c:	4b78      	ldr	r3, [pc, #480]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a77      	ldr	r2, [pc, #476]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b75      	ldr	r3, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a74      	ldr	r2, [pc, #464]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fc14 	bl	8001668 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff fc10 	bl	8001668 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e29e      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xc0>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff fc00 	bl	8001668 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fbfc 	bl	8001668 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e28a      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7e:	4b60      	ldr	r3, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0xe8>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d075      	beq.n	8001f86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e9a:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ea4:	4b56      	ldr	r3, [pc, #344]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d102      	bne.n	8001eba <HAL_RCC_OscConfig+0x136>
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d002      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x13c>
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d11f      	bne.n	8001f00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x154>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e25d      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b49      	ldr	r3, [pc, #292]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	4946      	ldr	r1, [pc, #280]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001eec:	4b45      	ldr	r3, [pc, #276]	; (8002004 <HAL_RCC_OscConfig+0x280>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fb6d 	bl	80015d0 <HAL_InitTick>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d043      	beq.n	8001f84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e249      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d023      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f08:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a3c      	ldr	r2, [pc, #240]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff fba8 	bl	8001668 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fba4 	bl	8001668 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e232      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	492d      	ldr	r1, [pc, #180]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
 8001f4e:	e01a      	b.n	8001f86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2a      	ldr	r2, [pc, #168]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fb84 	bl	8001668 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7ff fb80 	bl	8001668 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e20e      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1e0>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d041      	beq.n	8002016 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7ff fb5d 	bl	8001668 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fb59 	bl	8001668 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1e7      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0ef      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x22e>
 8001fd2:	e020      	b.n	8002016 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fb40 	bl	8001668 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fea:	e00d      	b.n	8002008 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fec:	f7ff fb3c 	bl	8001668 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d906      	bls.n	8002008 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1ca      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
 8002004:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002008:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ea      	bne.n	8001fec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80a6 	beq.w	8002170 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002024:	2300      	movs	r3, #0
 8002026:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002028:	4b84      	ldr	r3, [pc, #528]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x2b4>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x2b6>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b7f      	ldr	r3, [pc, #508]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a7e      	ldr	r2, [pc, #504]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
 800204a:	4b7c      	ldr	r3, [pc, #496]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205a:	4b79      	ldr	r3, [pc, #484]	; (8002240 <HAL_RCC_OscConfig+0x4bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x4bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a75      	ldr	r2, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x4bc>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7ff faf9 	bl	8001668 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff faf5 	bl	8001668 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e183      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208c:	4b6c      	ldr	r3, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x4bc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d108      	bne.n	80020b2 <HAL_RCC_OscConfig+0x32e>
 80020a0:	4b66      	ldr	r3, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a65      	ldr	r2, [pc, #404]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b0:	e024      	b.n	80020fc <HAL_RCC_OscConfig+0x378>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d110      	bne.n	80020dc <HAL_RCC_OscConfig+0x358>
 80020ba:	4b60      	ldr	r3, [pc, #384]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	4a5e      	ldr	r2, [pc, #376]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	4a5a      	ldr	r2, [pc, #360]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020da:	e00f      	b.n	80020fc <HAL_RCC_OscConfig+0x378>
 80020dc:	4b57      	ldr	r3, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	4a56      	ldr	r2, [pc, #344]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ec:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	4a52      	ldr	r2, [pc, #328]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d016      	beq.n	8002132 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff fab0 	bl	8001668 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7ff faac 	bl	8001668 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e138      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ed      	beq.n	800210c <HAL_RCC_OscConfig+0x388>
 8002130:	e015      	b.n	800215e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7ff fa99 	bl	8001668 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7ff fa95 	bl	8001668 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	; 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e121      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ed      	bne.n	800213a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800215e:	7ffb      	ldrb	r3, [r7, #31]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	4a34      	ldr	r2, [pc, #208]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 800216a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d03c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01c      	beq.n	80021be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 8002186:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800218a:	4a2c      	ldr	r2, [pc, #176]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff fa68 	bl	8001668 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219c:	f7ff fa64 	bl	8001668 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0f2      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ae:	4b23      	ldr	r3, [pc, #140]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80021b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0ef      	beq.n	800219c <HAL_RCC_OscConfig+0x418>
 80021bc:	e01b      	b.n	80021f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c4:	4a1d      	ldr	r2, [pc, #116]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff fa4b 	bl	8001668 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d6:	f7ff fa47 	bl	8001668 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0d5      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e8:	4b14      	ldr	r3, [pc, #80]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 80021ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ef      	bne.n	80021d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80c9 	beq.w	8002392 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b0c      	cmp	r3, #12
 800220a:	f000 8083 	beq.w	8002314 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d15e      	bne.n	80022d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_RCC_OscConfig+0x4b8>)
 800221c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff fa21 	bl	8001668 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002228:	e00c      	b.n	8002244 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fa1d 	bl	8001668 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d905      	bls.n	8002244 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e0ab      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <HAL_RCC_OscConfig+0x618>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ec      	bne.n	800222a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002250:	4b52      	ldr	r3, [pc, #328]	; (800239c <HAL_RCC_OscConfig+0x618>)
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	4b52      	ldr	r3, [pc, #328]	; (80023a0 <HAL_RCC_OscConfig+0x61c>)
 8002256:	4013      	ands	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6a11      	ldr	r1, [r2, #32]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002260:	3a01      	subs	r2, #1
 8002262:	0112      	lsls	r2, r2, #4
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800226a:	0212      	lsls	r2, r2, #8
 800226c:	4311      	orrs	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002272:	0852      	lsrs	r2, r2, #1
 8002274:	3a01      	subs	r2, #1
 8002276:	0552      	lsls	r2, r2, #21
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800227e:	0852      	lsrs	r2, r2, #1
 8002280:	3a01      	subs	r2, #1
 8002282:	0652      	lsls	r2, r2, #25
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800228a:	06d2      	lsls	r2, r2, #27
 800228c:	430a      	orrs	r2, r1
 800228e:	4943      	ldr	r1, [pc, #268]	; (800239c <HAL_RCC_OscConfig+0x618>)
 8002290:	4313      	orrs	r3, r2
 8002292:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002294:	4b41      	ldr	r3, [pc, #260]	; (800239c <HAL_RCC_OscConfig+0x618>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a40      	ldr	r2, [pc, #256]	; (800239c <HAL_RCC_OscConfig+0x618>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a0:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_RCC_OscConfig+0x618>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a3d      	ldr	r2, [pc, #244]	; (800239c <HAL_RCC_OscConfig+0x618>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7ff f9dc 	bl	8001668 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7ff f9d8 	bl	8001668 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e066      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_RCC_OscConfig+0x618>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x530>
 80022d2:	e05e      	b.n	8002392 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b31      	ldr	r3, [pc, #196]	; (800239c <HAL_RCC_OscConfig+0x618>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a30      	ldr	r2, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x618>)
 80022da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7ff f9c2 	bl	8001668 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff f9be 	bl	8001668 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04c      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fa:	4b28      	ldr	r3, [pc, #160]	; (800239c <HAL_RCC_OscConfig+0x618>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002306:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCC_OscConfig+0x618>)
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	4924      	ldr	r1, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x618>)
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_OscConfig+0x620>)
 800230e:	4013      	ands	r3, r2
 8002310:	60cb      	str	r3, [r1, #12]
 8002312:	e03e      	b.n	8002392 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e039      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_RCC_OscConfig+0x618>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0203 	and.w	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	429a      	cmp	r2, r3
 8002332:	d12c      	bne.n	800238e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	3b01      	subs	r3, #1
 8002340:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d123      	bne.n	800238e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d11b      	bne.n	800238e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d113      	bne.n	800238e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d109      	bne.n	800238e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	019f800c 	.word	0x019f800c
 80023a4:	feeefffc 	.word	0xfeeefffc

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e11e      	b.n	80025fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b91      	ldr	r3, [pc, #580]	; (8002608 <HAL_RCC_ClockConfig+0x260>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d910      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b8e      	ldr	r3, [pc, #568]	; (8002608 <HAL_RCC_ClockConfig+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 020f 	bic.w	r2, r3, #15
 80023d6:	498c      	ldr	r1, [pc, #560]	; (8002608 <HAL_RCC_ClockConfig+0x260>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b8a      	ldr	r3, [pc, #552]	; (8002608 <HAL_RCC_ClockConfig+0x260>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e106      	b.n	80025fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d073      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d129      	bne.n	8002458 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002404:	4b81      	ldr	r3, [pc, #516]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0f4      	b.n	80025fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002414:	f000 f99e 	bl	8002754 <RCC_GetSysClockFreqFromPLLSource>
 8002418:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4a7c      	ldr	r2, [pc, #496]	; (8002610 <HAL_RCC_ClockConfig+0x268>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d93f      	bls.n	80024a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002422:	4b7a      	ldr	r3, [pc, #488]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002436:	2b00      	cmp	r3, #0
 8002438:	d033      	beq.n	80024a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800243e:	2b00      	cmp	r3, #0
 8002440:	d12f      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002442:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244a:	4a70      	ldr	r2, [pc, #448]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 800244c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002450:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e024      	b.n	80024a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d107      	bne.n	8002470 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002460:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0c6      	b.n	80025fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002470:	4b66      	ldr	r3, [pc, #408]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0be      	b.n	80025fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002480:	f000 f8ce 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8002484:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4a61      	ldr	r2, [pc, #388]	; (8002610 <HAL_RCC_ClockConfig+0x268>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d909      	bls.n	80024a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800248e:	4b5f      	ldr	r3, [pc, #380]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002496:	4a5d      	ldr	r2, [pc, #372]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800249c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	4b5a      	ldr	r3, [pc, #360]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f023 0203 	bic.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4957      	ldr	r1, [pc, #348]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7ff f8d8 	bl	8001668 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7ff f8d4 	bl	8001668 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e095      	b.n	80025fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b4e      	ldr	r3, [pc, #312]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 020c 	and.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1eb      	bne.n	80024bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d023      	beq.n	8002538 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a42      	ldr	r2, [pc, #264]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002506:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800251c:	4a3b      	ldr	r2, [pc, #236]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 800251e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4936      	ldr	r1, [pc, #216]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
 8002536:	e008      	b.n	800254a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	2b80      	cmp	r3, #128	; 0x80
 800253c:	d105      	bne.n	800254a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4a32      	ldr	r2, [pc, #200]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 8002544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002548:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254a:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_RCC_ClockConfig+0x260>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d21d      	bcs.n	8002594 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_RCC_ClockConfig+0x260>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 020f 	bic.w	r2, r3, #15
 8002560:	4929      	ldr	r1, [pc, #164]	; (8002608 <HAL_RCC_ClockConfig+0x260>)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002568:	f7ff f87e 	bl	8001668 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7ff f87a 	bl	8001668 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e03b      	b.n	80025fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCC_ClockConfig+0x260>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d1ed      	bne.n	8002570 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4917      	ldr	r1, [pc, #92]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	490f      	ldr	r1, [pc, #60]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025d2:	f000 f825 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCC_ClockConfig+0x264>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	490c      	ldr	r1, [pc, #48]	; (8002614 <HAL_RCC_ClockConfig+0x26c>)
 80025e4:	5ccb      	ldrb	r3, [r1, r3]
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x270>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x274>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe ffea 	bl	80015d0 <HAL_InitTick>
 80025fc:	4603      	mov	r3, r0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40022000 	.word	0x40022000
 800260c:	40021000 	.word	0x40021000
 8002610:	04c4b400 	.word	0x04c4b400
 8002614:	0800559c 	.word	0x0800559c
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002626:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b04      	cmp	r3, #4
 8002630:	d102      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	e047      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002638:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d102      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e03e      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800264a:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d136      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3301      	adds	r3, #1
 800266c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d10c      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800267e:	68d2      	ldr	r2, [r2, #12]
 8002680:	0a12      	lsrs	r2, r2, #8
 8002682:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	617b      	str	r3, [r7, #20]
      break;
 800268c:	e00c      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800268e:	4a13      	ldr	r2, [pc, #76]	; (80026dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002698:	68d2      	ldr	r2, [r2, #12]
 800269a:	0a12      	lsrs	r2, r2, #8
 800269c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026a0:	fb02 f303 	mul.w	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]
      break;
 80026a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0e5b      	lsrs	r3, r3, #25
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	e001      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026c8:	693b      	ldr	r3, [r7, #16]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40021000 	.word	0x40021000
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	016e3600 	.word	0x016e3600

080026e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4904      	ldr	r1, [pc, #16]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	080055ac 	.word	0x080055ac

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800272c:	f7ff ffda 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0adb      	lsrs	r3, r3, #11
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4904      	ldr	r1, [pc, #16]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x28>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	080055ac 	.word	0x080055ac

08002754 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800275a:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	3301      	adds	r3, #1
 8002770:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d10c      	bne.n	8002792 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002782:	68d2      	ldr	r2, [r2, #12]
 8002784:	0a12      	lsrs	r2, r2, #8
 8002786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
    break;
 8002790:	e00c      	b.n	80027ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	fbb2 f3f3 	udiv	r3, r2, r3
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	0a12      	lsrs	r2, r2, #8
 80027a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a4:	fb02 f303 	mul.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
    break;
 80027aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0e5b      	lsrs	r3, r3, #25
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027c6:	687b      	ldr	r3, [r7, #4]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	371c      	adds	r7, #28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40021000 	.word	0x40021000
 80027d8:	016e3600 	.word	0x016e3600
 80027dc:	00f42400 	.word	0x00f42400

080027e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e8:	2300      	movs	r3, #0
 80027ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027ec:	2300      	movs	r3, #0
 80027ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8098 	beq.w	800292e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10d      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6593      	str	r3, [r2, #88]	; 0x58
 800281a:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002826:	2301      	movs	r3, #1
 8002828:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800282a:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a39      	ldr	r2, [pc, #228]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002834:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002836:	f7fe ff17 	bl	8001668 <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800283c:	e009      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7fe ff13 	bl	8001668 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d902      	bls.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	74fb      	strb	r3, [r7, #19]
        break;
 8002850:	e005      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002852:	4b30      	ldr	r3, [pc, #192]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ef      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d159      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002864:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01e      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	d019      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800288c:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002892:	4a1f      	ldr	r2, [pc, #124]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800289c:	4b1c      	ldr	r3, [pc, #112]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ac:	4a18      	ldr	r2, [pc, #96]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fed3 	bl	8001668 <HAL_GetTick>
 80028c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c4:	e00b      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe fecf 	bl	8001668 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d902      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	74fb      	strb	r3, [r7, #19]
            break;
 80028dc:	e006      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ec      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10b      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002908:	e008      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	74bb      	strb	r3, [r7, #18]
 800290e:	e005      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002910:	40021000 	.word	0x40021000
 8002914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291c:	7c7b      	ldrb	r3, [r7, #17]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d105      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002922:	4ba7      	ldr	r3, [pc, #668]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	4aa6      	ldr	r2, [pc, #664]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293a:	4ba1      	ldr	r3, [pc, #644]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f023 0203 	bic.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	499d      	ldr	r1, [pc, #628]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800295c:	4b98      	ldr	r3, [pc, #608]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 020c 	bic.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4995      	ldr	r1, [pc, #596]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800297e:	4b90      	ldr	r3, [pc, #576]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	498c      	ldr	r1, [pc, #560]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029a0:	4b87      	ldr	r3, [pc, #540]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	4984      	ldr	r1, [pc, #528]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029c2:	4b7f      	ldr	r3, [pc, #508]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	497b      	ldr	r1, [pc, #492]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029e4:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4973      	ldr	r1, [pc, #460]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a06:	4b6e      	ldr	r3, [pc, #440]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	496a      	ldr	r1, [pc, #424]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a28:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4962      	ldr	r1, [pc, #392]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a4a:	4b5d      	ldr	r3, [pc, #372]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	4959      	ldr	r1, [pc, #356]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a6c:	4b54      	ldr	r3, [pc, #336]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	4951      	ldr	r1, [pc, #324]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8e:	4b4c      	ldr	r3, [pc, #304]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	4948      	ldr	r1, [pc, #288]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d015      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ab0:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4940      	ldr	r1, [pc, #256]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ace:	d105      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b3b      	ldr	r3, [pc, #236]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	4932      	ldr	r1, [pc, #200]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b06:	d105      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a2c      	ldr	r2, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	4924      	ldr	r1, [pc, #144]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b58:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b76:	d105      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d019      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4908      	ldr	r1, [pc, #32]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4a02      	ldr	r2, [pc, #8]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bba:	60d3      	str	r3, [r2, #12]
 8002bbc:	e002      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d015      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bd0:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4926      	ldr	r1, [pc, #152]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bee:	d105      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	4918      	ldr	r1, [pc, #96]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c32:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d015      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	490a      	ldr	r1, [pc, #40]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c6a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000

08002c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e049      	b.n	8002d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fb7e 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 fe88 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d001      	beq.n	8002d44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e04c      	b.n	8002dde <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_TIM_Base_Start+0xc0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d022      	beq.n	8002d9c <HAL_TIM_Base_Start+0x70>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5e:	d01d      	beq.n	8002d9c <HAL_TIM_Base_Start+0x70>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a22      	ldr	r2, [pc, #136]	; (8002df0 <HAL_TIM_Base_Start+0xc4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d018      	beq.n	8002d9c <HAL_TIM_Base_Start+0x70>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_TIM_Base_Start+0xc8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d013      	beq.n	8002d9c <HAL_TIM_Base_Start+0x70>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_TIM_Base_Start+0xcc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00e      	beq.n	8002d9c <HAL_TIM_Base_Start+0x70>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_TIM_Base_Start+0xd0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_TIM_Base_Start+0x70>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_TIM_Base_Start+0xd4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_TIM_Base_Start+0x70>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <HAL_TIM_Base_Start+0xd8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d115      	bne.n	8002dc8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_TIM_Base_Start+0xdc>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d015      	beq.n	8002dda <HAL_TIM_Base_Start+0xae>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d011      	beq.n	8002dda <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc6:	e008      	b.n	8002dda <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e000      	b.n	8002ddc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	40013400 	.word	0x40013400
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40015000 	.word	0x40015000
 8002e08:	00010007 	.word	0x00010007

08002e0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e049      	b.n	8002eb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f841 	bl	8002eba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f000 fdc0 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_TIM_PWM_Start+0x24>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e03c      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d109      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x3e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	bf14      	ite	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	2300      	moveq	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e02f      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d109      	bne.n	8002f28 <HAL_TIM_PWM_Start+0x58>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e022      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d109      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x72>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e015      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d109      	bne.n	8002f5c <HAL_TIM_PWM_Start+0x8c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e008      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0a6      	b.n	80030c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <HAL_TIM_PWM_Start+0xb6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f84:	e023      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_PWM_Start+0xc6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f94:	e01b      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0xd6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Start+0xe6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0xf6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 fb7e 	bl	80046d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <HAL_TIM_PWM_Start+0x1fc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <HAL_TIM_PWM_Start+0x148>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a39      	ldr	r2, [pc, #228]	; (80030d0 <HAL_TIM_PWM_Start+0x200>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_TIM_PWM_Start+0x148>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a37      	ldr	r2, [pc, #220]	; (80030d4 <HAL_TIM_PWM_Start+0x204>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_TIM_PWM_Start+0x148>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a36      	ldr	r2, [pc, #216]	; (80030d8 <HAL_TIM_PWM_Start+0x208>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_TIM_PWM_Start+0x148>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a34      	ldr	r2, [pc, #208]	; (80030dc <HAL_TIM_PWM_Start+0x20c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_TIM_PWM_Start+0x148>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a33      	ldr	r2, [pc, #204]	; (80030e0 <HAL_TIM_PWM_Start+0x210>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d101      	bne.n	800301c <HAL_TIM_PWM_Start+0x14c>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <HAL_TIM_PWM_Start+0x14e>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a25      	ldr	r2, [pc, #148]	; (80030cc <HAL_TIM_PWM_Start+0x1fc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <HAL_TIM_PWM_Start+0x1b2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003044:	d01d      	beq.n	8003082 <HAL_TIM_PWM_Start+0x1b2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_TIM_PWM_Start+0x214>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d018      	beq.n	8003082 <HAL_TIM_PWM_Start+0x1b2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <HAL_TIM_PWM_Start+0x218>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <HAL_TIM_PWM_Start+0x1b2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a23      	ldr	r2, [pc, #140]	; (80030ec <HAL_TIM_PWM_Start+0x21c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00e      	beq.n	8003082 <HAL_TIM_PWM_Start+0x1b2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_TIM_PWM_Start+0x200>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d009      	beq.n	8003082 <HAL_TIM_PWM_Start+0x1b2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_TIM_PWM_Start+0x204>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d004      	beq.n	8003082 <HAL_TIM_PWM_Start+0x1b2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_TIM_PWM_Start+0x210>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d115      	bne.n	80030ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_TIM_PWM_Start+0x220>)
 800308a:	4013      	ands	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b06      	cmp	r3, #6
 8003092:	d015      	beq.n	80030c0 <HAL_TIM_PWM_Start+0x1f0>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309a:	d011      	beq.n	80030c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ac:	e008      	b.n	80030c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e000      	b.n	80030c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40013400 	.word	0x40013400
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40014400 	.word	0x40014400
 80030dc:	40014800 	.word	0x40014800
 80030e0:	40015000 	.word	0x40015000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	00010007 	.word	0x00010007

080030f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e049      	b.n	800319a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f841 	bl	80031a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 fc4c 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <HAL_TIM_IC_Start+0x1a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e023      	b.n	800321a <HAL_TIM_IC_Start+0x62>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_IC_Start+0x2a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e01b      	b.n	800321a <HAL_TIM_IC_Start+0x62>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_IC_Start+0x3a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e013      	b.n	800321a <HAL_TIM_IC_Start+0x62>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_IC_Start+0x4a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e00b      	b.n	800321a <HAL_TIM_IC_Start+0x62>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b10      	cmp	r3, #16
 8003206:	d104      	bne.n	8003212 <HAL_TIM_IC_Start+0x5a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800320e:	b2db      	uxtb	r3, r3
 8003210:	e003      	b.n	800321a <HAL_TIM_IC_Start+0x62>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003218:	b2db      	uxtb	r3, r3
 800321a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <HAL_TIM_IC_Start+0x74>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e013      	b.n	8003254 <HAL_TIM_IC_Start+0x9c>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b04      	cmp	r3, #4
 8003230:	d104      	bne.n	800323c <HAL_TIM_IC_Start+0x84>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e00b      	b.n	8003254 <HAL_TIM_IC_Start+0x9c>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b08      	cmp	r3, #8
 8003240:	d104      	bne.n	800324c <HAL_TIM_IC_Start+0x94>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e003      	b.n	8003254 <HAL_TIM_IC_Start+0x9c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003252:	b2db      	uxtb	r3, r3
 8003254:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800325c:	7bbb      	ldrb	r3, [r7, #14]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d001      	beq.n	8003266 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e097      	b.n	8003396 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start+0xbe>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003274:	e023      	b.n	80032be <HAL_TIM_IC_Start+0x106>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start+0xce>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003284:	e01b      	b.n	80032be <HAL_TIM_IC_Start+0x106>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Start+0xde>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003294:	e013      	b.n	80032be <HAL_TIM_IC_Start+0x106>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_IC_Start+0xee>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032a4:	e00b      	b.n	80032be <HAL_TIM_IC_Start+0x106>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_IC_Start+0xfe>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032b4:	e003      	b.n	80032be <HAL_TIM_IC_Start+0x106>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <HAL_TIM_IC_Start+0x116>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032cc:	e013      	b.n	80032f6 <HAL_TIM_IC_Start+0x13e>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d104      	bne.n	80032de <HAL_TIM_IC_Start+0x126>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032dc:	e00b      	b.n	80032f6 <HAL_TIM_IC_Start+0x13e>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_IC_Start+0x136>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032ec:	e003      	b.n	80032f6 <HAL_TIM_IC_Start+0x13e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2201      	movs	r2, #1
 80032fc:	6839      	ldr	r1, [r7, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f9ea 	bl	80046d8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <HAL_TIM_IC_Start+0x1e8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d022      	beq.n	8003354 <HAL_TIM_IC_Start+0x19c>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003316:	d01d      	beq.n	8003354 <HAL_TIM_IC_Start+0x19c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <HAL_TIM_IC_Start+0x1ec>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d018      	beq.n	8003354 <HAL_TIM_IC_Start+0x19c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <HAL_TIM_IC_Start+0x1f0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_TIM_IC_Start+0x19c>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <HAL_TIM_IC_Start+0x1f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00e      	beq.n	8003354 <HAL_TIM_IC_Start+0x19c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <HAL_TIM_IC_Start+0x1f8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d009      	beq.n	8003354 <HAL_TIM_IC_Start+0x19c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_TIM_IC_Start+0x1fc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <HAL_TIM_IC_Start+0x19c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_TIM_IC_Start+0x200>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d115      	bne.n	8003380 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	4b18      	ldr	r3, [pc, #96]	; (80033bc <HAL_TIM_IC_Start+0x204>)
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d015      	beq.n	8003392 <HAL_TIM_IC_Start+0x1da>
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d011      	beq.n	8003392 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	e008      	b.n	8003392 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e000      	b.n	8003394 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40000c00 	.word	0x40000c00
 80033b0:	40013400 	.word	0x40013400
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40015000 	.word	0x40015000
 80033bc:	00010007 	.word	0x00010007

080033c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_TIM_IC_ConfigChannel+0x1e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e088      	b.n	80034f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d11b      	bne.n	8003424 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80033fc:	f000 ffa6 	bl	800434c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 020c 	bic.w	r2, r2, #12
 800340e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6999      	ldr	r1, [r3, #24]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	619a      	str	r2, [r3, #24]
 8003422:	e060      	b.n	80034e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b04      	cmp	r3, #4
 8003428:	d11c      	bne.n	8003464 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800343a:	f001 f82a 	bl	8004492 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800344c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6999      	ldr	r1, [r3, #24]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	021a      	lsls	r2, r3, #8
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	619a      	str	r2, [r3, #24]
 8003462:	e040      	b.n	80034e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11b      	bne.n	80034a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800347a:	f001 f877 	bl	800456c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 020c 	bic.w	r2, r2, #12
 800348c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	61da      	str	r2, [r3, #28]
 80034a0:	e021      	b.n	80034e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b0c      	cmp	r3, #12
 80034a6:	d11c      	bne.n	80034e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80034b8:	f001 f894 	bl	80045e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69d9      	ldr	r1, [r3, #28]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	021a      	lsls	r2, r3, #8
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	61da      	str	r2, [r3, #28]
 80034e0:	e001      	b.n	80034e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003512:	2302      	movs	r3, #2
 8003514:	e0ff      	b.n	8003716 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b14      	cmp	r3, #20
 8003522:	f200 80f0 	bhi.w	8003706 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	08003581 	.word	0x08003581
 8003530:	08003707 	.word	0x08003707
 8003534:	08003707 	.word	0x08003707
 8003538:	08003707 	.word	0x08003707
 800353c:	080035c1 	.word	0x080035c1
 8003540:	08003707 	.word	0x08003707
 8003544:	08003707 	.word	0x08003707
 8003548:	08003707 	.word	0x08003707
 800354c:	08003603 	.word	0x08003603
 8003550:	08003707 	.word	0x08003707
 8003554:	08003707 	.word	0x08003707
 8003558:	08003707 	.word	0x08003707
 800355c:	08003643 	.word	0x08003643
 8003560:	08003707 	.word	0x08003707
 8003564:	08003707 	.word	0x08003707
 8003568:	08003707 	.word	0x08003707
 800356c:	08003685 	.word	0x08003685
 8003570:	08003707 	.word	0x08003707
 8003574:	08003707 	.word	0x08003707
 8003578:	08003707 	.word	0x08003707
 800357c:	080036c5 	.word	0x080036c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fad6 	bl	8003b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0208 	orr.w	r2, r2, #8
 800359a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6999      	ldr	r1, [r3, #24]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	619a      	str	r2, [r3, #24]
      break;
 80035be:	e0a5      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb50 	bl	8003c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6999      	ldr	r1, [r3, #24]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	021a      	lsls	r2, r3, #8
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	619a      	str	r2, [r3, #24]
      break;
 8003600:	e084      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fbc3 	bl	8003d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0208 	orr.w	r2, r2, #8
 800361c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0204 	bic.w	r2, r2, #4
 800362c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69d9      	ldr	r1, [r3, #28]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	61da      	str	r2, [r3, #28]
      break;
 8003640:	e064      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68b9      	ldr	r1, [r7, #8]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fc35 	bl	8003eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69d9      	ldr	r1, [r3, #28]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	021a      	lsls	r2, r3, #8
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	61da      	str	r2, [r3, #28]
      break;
 8003682:	e043      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fca8 	bl	8003fe0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0208 	orr.w	r2, r2, #8
 800369e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80036c2:	e023      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fcf2 	bl	80040b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	021a      	lsls	r2, r3, #8
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003704:	e002      	b.n	800370c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	75fb      	strb	r3, [r7, #23]
      break;
 800370a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003714:	7dfb      	ldrb	r3, [r7, #23]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop

08003720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_TIM_ConfigClockSource+0x1c>
 8003738:	2302      	movs	r3, #2
 800373a:	e0f6      	b.n	800392a <HAL_TIM_ConfigClockSource+0x20a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800375a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800375e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6f      	ldr	r2, [pc, #444]	; (8003934 <HAL_TIM_ConfigClockSource+0x214>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f000 80c1 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 800377c:	4a6d      	ldr	r2, [pc, #436]	; (8003934 <HAL_TIM_ConfigClockSource+0x214>)
 800377e:	4293      	cmp	r3, r2
 8003780:	f200 80c6 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003784:	4a6c      	ldr	r2, [pc, #432]	; (8003938 <HAL_TIM_ConfigClockSource+0x218>)
 8003786:	4293      	cmp	r3, r2
 8003788:	f000 80b9 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 800378c:	4a6a      	ldr	r2, [pc, #424]	; (8003938 <HAL_TIM_ConfigClockSource+0x218>)
 800378e:	4293      	cmp	r3, r2
 8003790:	f200 80be 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003794:	4a69      	ldr	r2, [pc, #420]	; (800393c <HAL_TIM_ConfigClockSource+0x21c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	f000 80b1 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 800379c:	4a67      	ldr	r2, [pc, #412]	; (800393c <HAL_TIM_ConfigClockSource+0x21c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	f200 80b6 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 80037a4:	4a66      	ldr	r2, [pc, #408]	; (8003940 <HAL_TIM_ConfigClockSource+0x220>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	f000 80a9 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 80037ac:	4a64      	ldr	r2, [pc, #400]	; (8003940 <HAL_TIM_ConfigClockSource+0x220>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f200 80ae 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 80037b4:	4a63      	ldr	r2, [pc, #396]	; (8003944 <HAL_TIM_ConfigClockSource+0x224>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f000 80a1 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 80037bc:	4a61      	ldr	r2, [pc, #388]	; (8003944 <HAL_TIM_ConfigClockSource+0x224>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	f200 80a6 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 80037c4:	4a60      	ldr	r2, [pc, #384]	; (8003948 <HAL_TIM_ConfigClockSource+0x228>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	f000 8099 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 80037cc:	4a5e      	ldr	r2, [pc, #376]	; (8003948 <HAL_TIM_ConfigClockSource+0x228>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f200 809e 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 80037d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037d8:	f000 8091 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 80037dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80037e0:	f200 8096 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e8:	f000 8089 	beq.w	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 80037ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f0:	f200 808e 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d03e      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0x158>
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fe:	f200 8087 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	f000 8086 	beq.w	8003916 <HAL_TIM_ConfigClockSource+0x1f6>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d87f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003810:	2b70      	cmp	r3, #112	; 0x70
 8003812:	d01a      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x12a>
 8003814:	2b70      	cmp	r3, #112	; 0x70
 8003816:	d87b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d050      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x19e>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d877      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d03c      	beq.n	800389e <HAL_TIM_ConfigClockSource+0x17e>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d873      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d058      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x1be>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d86f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d064      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d86b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d060      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d867      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05c      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 8003844:	2b10      	cmp	r3, #16
 8003846:	d05a      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x1de>
 8003848:	e062      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800385a:	f000 ff1d 	bl	8004698 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800386c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	609a      	str	r2, [r3, #8]
      break;
 8003876:	e04f      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003888:	f000 ff06 	bl	8004698 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389a:	609a      	str	r2, [r3, #8]
      break;
 800389c:	e03c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 fdc2 	bl	8004434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2150      	movs	r1, #80	; 0x50
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fed1 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 80038bc:	e02c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 fe1e 	bl	800450c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2160      	movs	r1, #96	; 0x60
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fec1 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 80038dc:	e01c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 fda2 	bl	8004434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 feb1 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 80038fc:	e00c      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 fea8 	bl	800465e <TIM_ITRx_SetConfig>
      break;
 800390e:	e003      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      break;
 8003914:	e000      	b.n	8003918 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003916:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	00100070 	.word	0x00100070
 8003938:	00100060 	.word	0x00100060
 800393c:	00100050 	.word	0x00100050
 8003940:	00100040 	.word	0x00100040
 8003944:	00100030 	.word	0x00100030
 8003948:	00100020 	.word	0x00100020

0800394c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395c:	2b01      	cmp	r3, #1
 800395e:	d101      	bne.n	8003964 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003960:	2302      	movs	r3, #2
 8003962:	e031      	b.n	80039c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fc08 	bl	800418c <TIM_SlaveTimer_SetConfig>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e018      	b.n	80039c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a4c      	ldr	r2, [pc, #304]	; (8003b14 <TIM_Base_SetConfig+0x144>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d017      	beq.n	8003a18 <TIM_Base_SetConfig+0x48>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d013      	beq.n	8003a18 <TIM_Base_SetConfig+0x48>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a49      	ldr	r2, [pc, #292]	; (8003b18 <TIM_Base_SetConfig+0x148>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00f      	beq.n	8003a18 <TIM_Base_SetConfig+0x48>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a48      	ldr	r2, [pc, #288]	; (8003b1c <TIM_Base_SetConfig+0x14c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <TIM_Base_SetConfig+0x48>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a47      	ldr	r2, [pc, #284]	; (8003b20 <TIM_Base_SetConfig+0x150>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_Base_SetConfig+0x48>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a46      	ldr	r2, [pc, #280]	; (8003b24 <TIM_Base_SetConfig+0x154>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_Base_SetConfig+0x48>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a45      	ldr	r2, [pc, #276]	; (8003b28 <TIM_Base_SetConfig+0x158>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d108      	bne.n	8003a2a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a39      	ldr	r2, [pc, #228]	; (8003b14 <TIM_Base_SetConfig+0x144>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d023      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a38:	d01f      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a36      	ldr	r2, [pc, #216]	; (8003b18 <TIM_Base_SetConfig+0x148>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01b      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a35      	ldr	r2, [pc, #212]	; (8003b1c <TIM_Base_SetConfig+0x14c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d017      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a34      	ldr	r2, [pc, #208]	; (8003b20 <TIM_Base_SetConfig+0x150>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <TIM_Base_SetConfig+0x154>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00f      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a33      	ldr	r2, [pc, #204]	; (8003b2c <TIM_Base_SetConfig+0x15c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00b      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a32      	ldr	r2, [pc, #200]	; (8003b30 <TIM_Base_SetConfig+0x160>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a31      	ldr	r2, [pc, #196]	; (8003b34 <TIM_Base_SetConfig+0x164>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <TIM_Base_SetConfig+0xaa>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2c      	ldr	r2, [pc, #176]	; (8003b28 <TIM_Base_SetConfig+0x158>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <TIM_Base_SetConfig+0x144>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <TIM_Base_SetConfig+0x110>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <TIM_Base_SetConfig+0x154>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x110>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <TIM_Base_SetConfig+0x15c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x110>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <TIM_Base_SetConfig+0x160>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x110>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a18      	ldr	r2, [pc, #96]	; (8003b34 <TIM_Base_SetConfig+0x164>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x110>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <TIM_Base_SetConfig+0x158>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d103      	bne.n	8003ae8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d105      	bne.n	8003b06 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f023 0201 	bic.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]
  }
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40013400 	.word	0x40013400
 8003b28:	40015000 	.word	0x40015000
 8003b2c:	40014000 	.word	0x40014000
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800

08003b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 0201 	bic.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f023 0302 	bic.w	r3, r3, #2
 8003b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a30      	ldr	r2, [pc, #192]	; (8003c54 <TIM_OC1_SetConfig+0x11c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x88>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2f      	ldr	r2, [pc, #188]	; (8003c58 <TIM_OC1_SetConfig+0x120>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00f      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x88>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a2e      	ldr	r2, [pc, #184]	; (8003c5c <TIM_OC1_SetConfig+0x124>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x88>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a2d      	ldr	r2, [pc, #180]	; (8003c60 <TIM_OC1_SetConfig+0x128>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x88>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <TIM_OC1_SetConfig+0x12c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC1_SetConfig+0x88>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <TIM_OC1_SetConfig+0x130>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d10c      	bne.n	8003bda <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0308 	bic.w	r3, r3, #8
 8003bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1d      	ldr	r2, [pc, #116]	; (8003c54 <TIM_OC1_SetConfig+0x11c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <TIM_OC1_SetConfig+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <TIM_OC1_SetConfig+0x120>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00f      	beq.n	8003c0a <TIM_OC1_SetConfig+0xd2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <TIM_OC1_SetConfig+0x124>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <TIM_OC1_SetConfig+0xd2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <TIM_OC1_SetConfig+0x128>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d007      	beq.n	8003c0a <TIM_OC1_SetConfig+0xd2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <TIM_OC1_SetConfig+0x12c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d003      	beq.n	8003c0a <TIM_OC1_SetConfig+0xd2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <TIM_OC1_SetConfig+0x130>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d111      	bne.n	8003c2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40013400 	.word	0x40013400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800
 8003c68:	40015000 	.word	0x40015000

08003c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f023 0210 	bic.w	r2, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0320 	bic.w	r3, r3, #32
 8003cba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <TIM_OC2_SetConfig+0x110>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <TIM_OC2_SetConfig+0x74>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a2b      	ldr	r2, [pc, #172]	; (8003d80 <TIM_OC2_SetConfig+0x114>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_OC2_SetConfig+0x74>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <TIM_OC2_SetConfig+0x118>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d10d      	bne.n	8003cfc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <TIM_OC2_SetConfig+0x110>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <TIM_OC2_SetConfig+0xc0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <TIM_OC2_SetConfig+0x114>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00f      	beq.n	8003d2c <TIM_OC2_SetConfig+0xc0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <TIM_OC2_SetConfig+0x11c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00b      	beq.n	8003d2c <TIM_OC2_SetConfig+0xc0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <TIM_OC2_SetConfig+0x120>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <TIM_OC2_SetConfig+0xc0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <TIM_OC2_SetConfig+0x124>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC2_SetConfig+0xc0>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <TIM_OC2_SetConfig+0x118>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d113      	bne.n	8003d54 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40013400 	.word	0x40013400
 8003d84:	40015000 	.word	0x40015000
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40014400 	.word	0x40014400
 8003d90:	40014800 	.word	0x40014800

08003d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a2b      	ldr	r2, [pc, #172]	; (8003ea0 <TIM_OC3_SetConfig+0x10c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <TIM_OC3_SetConfig+0x72>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <TIM_OC3_SetConfig+0x110>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_OC3_SetConfig+0x72>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <TIM_OC3_SetConfig+0x114>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1e      	ldr	r2, [pc, #120]	; (8003ea0 <TIM_OC3_SetConfig+0x10c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <TIM_OC3_SetConfig+0xbe>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <TIM_OC3_SetConfig+0x110>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00f      	beq.n	8003e52 <TIM_OC3_SetConfig+0xbe>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <TIM_OC3_SetConfig+0x118>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <TIM_OC3_SetConfig+0xbe>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <TIM_OC3_SetConfig+0x11c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d007      	beq.n	8003e52 <TIM_OC3_SetConfig+0xbe>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <TIM_OC3_SetConfig+0x120>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_OC3_SetConfig+0xbe>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a16      	ldr	r2, [pc, #88]	; (8003ea8 <TIM_OC3_SetConfig+0x114>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d113      	bne.n	8003e7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40013400 	.word	0x40013400
 8003ea8:	40015000 	.word	0x40015000
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800

08003eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	031b      	lsls	r3, r3, #12
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <TIM_OC4_SetConfig+0x110>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_OC4_SetConfig+0x74>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a2b      	ldr	r2, [pc, #172]	; (8003fcc <TIM_OC4_SetConfig+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_OC4_SetConfig+0x74>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <TIM_OC4_SetConfig+0x118>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d10d      	bne.n	8003f48 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	031b      	lsls	r3, r3, #12
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a1f      	ldr	r2, [pc, #124]	; (8003fc8 <TIM_OC4_SetConfig+0x110>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <TIM_OC4_SetConfig+0xc0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a1e      	ldr	r2, [pc, #120]	; (8003fcc <TIM_OC4_SetConfig+0x114>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00f      	beq.n	8003f78 <TIM_OC4_SetConfig+0xc0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <TIM_OC4_SetConfig+0x11c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00b      	beq.n	8003f78 <TIM_OC4_SetConfig+0xc0>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <TIM_OC4_SetConfig+0x120>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d007      	beq.n	8003f78 <TIM_OC4_SetConfig+0xc0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <TIM_OC4_SetConfig+0x124>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC4_SetConfig+0xc0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <TIM_OC4_SetConfig+0x118>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d113      	bne.n	8003fa0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	019b      	lsls	r3, r3, #6
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40013400 	.word	0x40013400
 8003fd0:	40015000 	.word	0x40015000
 8003fd4:	40014000 	.word	0x40014000
 8003fd8:	40014400 	.word	0x40014400
 8003fdc:	40014800 	.word	0x40014800

08003fe0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004024:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <TIM_OC5_SetConfig+0xbc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <TIM_OC5_SetConfig+0x82>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <TIM_OC5_SetConfig+0xc0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d00f      	beq.n	8004062 <TIM_OC5_SetConfig+0x82>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <TIM_OC5_SetConfig+0xc4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d00b      	beq.n	8004062 <TIM_OC5_SetConfig+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <TIM_OC5_SetConfig+0xc8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d007      	beq.n	8004062 <TIM_OC5_SetConfig+0x82>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a15      	ldr	r2, [pc, #84]	; (80040ac <TIM_OC5_SetConfig+0xcc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d003      	beq.n	8004062 <TIM_OC5_SetConfig+0x82>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <TIM_OC5_SetConfig+0xd0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d109      	bne.n	8004076 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40013400 	.word	0x40013400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800
 80040b0:	40015000 	.word	0x40015000

080040b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	051b      	lsls	r3, r3, #20
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a1a      	ldr	r2, [pc, #104]	; (8004174 <TIM_OC6_SetConfig+0xc0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <TIM_OC6_SetConfig+0x84>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a19      	ldr	r2, [pc, #100]	; (8004178 <TIM_OC6_SetConfig+0xc4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00f      	beq.n	8004138 <TIM_OC6_SetConfig+0x84>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a18      	ldr	r2, [pc, #96]	; (800417c <TIM_OC6_SetConfig+0xc8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00b      	beq.n	8004138 <TIM_OC6_SetConfig+0x84>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <TIM_OC6_SetConfig+0xcc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <TIM_OC6_SetConfig+0x84>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <TIM_OC6_SetConfig+0xd0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC6_SetConfig+0x84>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a15      	ldr	r2, [pc, #84]	; (8004188 <TIM_OC6_SetConfig+0xd4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d109      	bne.n	800414c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800413e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	029b      	lsls	r3, r3, #10
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800
 8004188:	40015000 	.word	0x40015000

0800418c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041be:	f023 0307 	bic.w	r3, r3, #7
 80041c2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4a56      	ldr	r2, [pc, #344]	; (8004334 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	f000 80a2 	beq.w	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 80041e2:	4a54      	ldr	r2, [pc, #336]	; (8004334 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	f200 809b 	bhi.w	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 80041ea:	4a53      	ldr	r2, [pc, #332]	; (8004338 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	f000 809a 	beq.w	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 80041f2:	4a51      	ldr	r2, [pc, #324]	; (8004338 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	f200 8093 	bhi.w	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 80041fa:	4a50      	ldr	r2, [pc, #320]	; (800433c <TIM_SlaveTimer_SetConfig+0x1b0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	f000 8092 	beq.w	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 8004202:	4a4e      	ldr	r2, [pc, #312]	; (800433c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	f200 808b 	bhi.w	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 800420a:	4a4d      	ldr	r2, [pc, #308]	; (8004340 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	f000 808a 	beq.w	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 8004212:	4a4b      	ldr	r2, [pc, #300]	; (8004340 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	f200 8083 	bhi.w	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 800421a:	4a4a      	ldr	r2, [pc, #296]	; (8004344 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	f000 8082 	beq.w	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 8004222:	4a48      	ldr	r2, [pc, #288]	; (8004344 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d87b      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 8004228:	4a47      	ldr	r2, [pc, #284]	; (8004348 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d07b      	beq.n	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 800422e:	4a46      	ldr	r2, [pc, #280]	; (8004348 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d875      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 8004234:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004238:	d075      	beq.n	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 800423a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800423e:	d86f      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 8004240:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004244:	d06f      	beq.n	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 8004246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800424a:	d869      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 800424c:	2b70      	cmp	r3, #112	; 0x70
 800424e:	d01a      	beq.n	8004286 <TIM_SlaveTimer_SetConfig+0xfa>
 8004250:	2b70      	cmp	r3, #112	; 0x70
 8004252:	d865      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 8004254:	2b60      	cmp	r3, #96	; 0x60
 8004256:	d059      	beq.n	800430c <TIM_SlaveTimer_SetConfig+0x180>
 8004258:	2b60      	cmp	r3, #96	; 0x60
 800425a:	d861      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 800425c:	2b50      	cmp	r3, #80	; 0x50
 800425e:	d04b      	beq.n	80042f8 <TIM_SlaveTimer_SetConfig+0x16c>
 8004260:	2b50      	cmp	r3, #80	; 0x50
 8004262:	d85d      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d019      	beq.n	800429c <TIM_SlaveTimer_SetConfig+0x110>
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d859      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 800426c:	2b30      	cmp	r3, #48	; 0x30
 800426e:	d05a      	beq.n	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 8004270:	2b30      	cmp	r3, #48	; 0x30
 8004272:	d855      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 8004274:	2b20      	cmp	r3, #32
 8004276:	d056      	beq.n	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 8004278:	2b20      	cmp	r3, #32
 800427a:	d851      	bhi.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d052      	beq.n	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 8004280:	2b10      	cmp	r3, #16
 8004282:	d050      	beq.n	8004326 <TIM_SlaveTimer_SetConfig+0x19a>
 8004284:	e04c      	b.n	8004320 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004296:	f000 f9ff 	bl	8004698 <TIM_ETR_SetConfig>
      break;
 800429a:	e045      	b.n	8004328 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b05      	cmp	r3, #5
 80042a2:	d004      	beq.n	80042ae <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80042a8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80042ac:	d101      	bne.n	80042b2 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e03b      	b.n	800432a <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a1a      	ldr	r2, [r3, #32]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
      break;
 80042f6:	e017      	b.n	8004328 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004304:	461a      	mov	r2, r3
 8004306:	f000 f895 	bl	8004434 <TIM_TI1_ConfigInputStage>
      break;
 800430a:	e00d      	b.n	8004328 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004318:	461a      	mov	r2, r3
 800431a:	f000 f8f7 	bl	800450c <TIM_TI2_ConfigInputStage>
      break;
 800431e:	e003      	b.n	8004328 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e000      	b.n	8004328 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8004326:	bf00      	nop
  }

  return status;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	00100070 	.word	0x00100070
 8004338:	00100060 	.word	0x00100060
 800433c:	00100050 	.word	0x00100050
 8004340:	00100040 	.word	0x00100040
 8004344:	00100030 	.word	0x00100030
 8004348:	00100020 	.word	0x00100020

0800434c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 0201 	bic.w	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a28      	ldr	r2, [pc, #160]	; (8004418 <TIM_TI1_SetConfig+0xcc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01b      	beq.n	80043b2 <TIM_TI1_SetConfig+0x66>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d017      	beq.n	80043b2 <TIM_TI1_SetConfig+0x66>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a25      	ldr	r2, [pc, #148]	; (800441c <TIM_TI1_SetConfig+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <TIM_TI1_SetConfig+0x66>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a24      	ldr	r2, [pc, #144]	; (8004420 <TIM_TI1_SetConfig+0xd4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00f      	beq.n	80043b2 <TIM_TI1_SetConfig+0x66>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a23      	ldr	r2, [pc, #140]	; (8004424 <TIM_TI1_SetConfig+0xd8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_TI1_SetConfig+0x66>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <TIM_TI1_SetConfig+0xdc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_TI1_SetConfig+0x66>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a21      	ldr	r2, [pc, #132]	; (800442c <TIM_TI1_SetConfig+0xe0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_TI1_SetConfig+0x66>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a20      	ldr	r2, [pc, #128]	; (8004430 <TIM_TI1_SetConfig+0xe4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <TIM_TI1_SetConfig+0x6a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <TIM_TI1_SetConfig+0x6c>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e003      	b.n	80043d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f023 030a 	bic.w	r3, r3, #10
 80043f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 030a 	and.w	r3, r3, #10
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40013400 	.word	0x40013400
 800442c:	40014000 	.word	0x40014000
 8004430:	40015000 	.word	0x40015000

08004434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f023 030a 	bic.w	r3, r3, #10
 8004470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004492:	b480      	push	{r7}
 8004494:	b087      	sub	sp, #28
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f023 0210 	bic.w	r2, r3, #16
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	031b      	lsls	r3, r3, #12
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044e4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	621a      	str	r2, [r3, #32]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	031b      	lsls	r3, r3, #12
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004548:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f023 0303 	bic.w	r3, r3, #3
 8004598:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	621a      	str	r2, [r3, #32]
}
 80045d8:	bf00      	nop
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004622:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	031b      	lsls	r3, r3, #12
 8004628:	b29b      	uxth	r3, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004636:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	031b      	lsls	r3, r3, #12
 800463c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004678:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	f043 0307 	orr.w	r3, r3, #7
 8004684:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	609a      	str	r2, [r3, #8]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	021a      	lsls	r2, r3, #8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4313      	orrs	r3, r2
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2201      	movs	r2, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1a      	ldr	r2, [r3, #32]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	43db      	mvns	r3, r3
 80046fa:	401a      	ands	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	fa01 f303 	lsl.w	r3, r1, r3
 8004710:	431a      	orrs	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e074      	b.n	8004826 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a34      	ldr	r2, [pc, #208]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a33      	ldr	r2, [pc, #204]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a31      	ldr	r2, [pc, #196]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d108      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004780:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a21      	ldr	r2, [pc, #132]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d022      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047bc:	d01d      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1f      	ldr	r2, [pc, #124]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d018      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a11      	ldr	r2, [pc, #68]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d10c      	bne.n	8004814 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4313      	orrs	r3, r2
 800480a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40012c00 	.word	0x40012c00
 8004838:	40013400 	.word	0x40013400
 800483c:	40015000 	.word	0x40015000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40014000 	.word	0x40014000

08004850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e042      	b.n	80048e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fc fd3d 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2224      	movs	r2, #36	; 0x24
 800487e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0201 	bic.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fb24 	bl	8004ee8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f825 	bl	80048f0 <UART_SetConfig>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e01b      	b.n	80048e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fba3 	bl	800502c <UART_CheckIdleState>
 80048e6:	4603      	mov	r3, r0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f4:	b08c      	sub	sp, #48	; 0x30
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	431a      	orrs	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	431a      	orrs	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	4313      	orrs	r3, r2
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4baa      	ldr	r3, [pc, #680]	; (8004bc8 <UART_SetConfig+0x2d8>)
 8004920:	4013      	ands	r3, r2
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004928:	430b      	orrs	r3, r1
 800492a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a9f      	ldr	r2, [pc, #636]	; (8004bcc <UART_SetConfig+0x2dc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004958:	4313      	orrs	r3, r2
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004966:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004970:	430b      	orrs	r3, r1
 8004972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	f023 010f 	bic.w	r1, r3, #15
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a90      	ldr	r2, [pc, #576]	; (8004bd0 <UART_SetConfig+0x2e0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d125      	bne.n	80049e0 <UART_SetConfig+0xf0>
 8004994:	4b8f      	ldr	r3, [pc, #572]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d81a      	bhi.n	80049d8 <UART_SetConfig+0xe8>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0xb8>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049c9 	.word	0x080049c9
 80049b0:	080049c1 	.word	0x080049c1
 80049b4:	080049d1 	.word	0x080049d1
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049be:	e116      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049c0:	2302      	movs	r3, #2
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c6:	e112      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049c8:	2304      	movs	r3, #4
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ce:	e10e      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049d0:	2308      	movs	r3, #8
 80049d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049d6:	e10a      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049d8:	2310      	movs	r3, #16
 80049da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049de:	e106      	b.n	8004bee <UART_SetConfig+0x2fe>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a7c      	ldr	r2, [pc, #496]	; (8004bd8 <UART_SetConfig+0x2e8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d138      	bne.n	8004a5c <UART_SetConfig+0x16c>
 80049ea:	4b7a      	ldr	r3, [pc, #488]	; (8004bd4 <UART_SetConfig+0x2e4>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	d82d      	bhi.n	8004a54 <UART_SetConfig+0x164>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x110>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a55 	.word	0x08004a55
 8004a08:	08004a55 	.word	0x08004a55
 8004a0c:	08004a55 	.word	0x08004a55
 8004a10:	08004a45 	.word	0x08004a45
 8004a14:	08004a55 	.word	0x08004a55
 8004a18:	08004a55 	.word	0x08004a55
 8004a1c:	08004a55 	.word	0x08004a55
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	08004a55 	.word	0x08004a55
 8004a28:	08004a55 	.word	0x08004a55
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a4d 	.word	0x08004a4d
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3a:	e0d8      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a42:	e0d4      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a44:	2304      	movs	r3, #4
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e0d0      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a52:	e0cc      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a54:	2310      	movs	r3, #16
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	e0c8      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a5e      	ldr	r2, [pc, #376]	; (8004bdc <UART_SetConfig+0x2ec>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d125      	bne.n	8004ab2 <UART_SetConfig+0x1c2>
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a70:	2b30      	cmp	r3, #48	; 0x30
 8004a72:	d016      	beq.n	8004aa2 <UART_SetConfig+0x1b2>
 8004a74:	2b30      	cmp	r3, #48	; 0x30
 8004a76:	d818      	bhi.n	8004aaa <UART_SetConfig+0x1ba>
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d00a      	beq.n	8004a92 <UART_SetConfig+0x1a2>
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d814      	bhi.n	8004aaa <UART_SetConfig+0x1ba>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d002      	beq.n	8004a8a <UART_SetConfig+0x19a>
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d008      	beq.n	8004a9a <UART_SetConfig+0x1aa>
 8004a88:	e00f      	b.n	8004aaa <UART_SetConfig+0x1ba>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a90:	e0ad      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a92:	2302      	movs	r3, #2
 8004a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a98:	e0a9      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa0:	e0a5      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa8:	e0a1      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004aaa:	2310      	movs	r3, #16
 8004aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab0:	e09d      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4a      	ldr	r2, [pc, #296]	; (8004be0 <UART_SetConfig+0x2f0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d125      	bne.n	8004b08 <UART_SetConfig+0x218>
 8004abc:	4b45      	ldr	r3, [pc, #276]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ac6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ac8:	d016      	beq.n	8004af8 <UART_SetConfig+0x208>
 8004aca:	2bc0      	cmp	r3, #192	; 0xc0
 8004acc:	d818      	bhi.n	8004b00 <UART_SetConfig+0x210>
 8004ace:	2b80      	cmp	r3, #128	; 0x80
 8004ad0:	d00a      	beq.n	8004ae8 <UART_SetConfig+0x1f8>
 8004ad2:	2b80      	cmp	r3, #128	; 0x80
 8004ad4:	d814      	bhi.n	8004b00 <UART_SetConfig+0x210>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <UART_SetConfig+0x1f0>
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d008      	beq.n	8004af0 <UART_SetConfig+0x200>
 8004ade:	e00f      	b.n	8004b00 <UART_SetConfig+0x210>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e082      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e07e      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e07a      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afe:	e076      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b06:	e072      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a35      	ldr	r2, [pc, #212]	; (8004be4 <UART_SetConfig+0x2f4>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d12a      	bne.n	8004b68 <UART_SetConfig+0x278>
 8004b12:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b20:	d01a      	beq.n	8004b58 <UART_SetConfig+0x268>
 8004b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b26:	d81b      	bhi.n	8004b60 <UART_SetConfig+0x270>
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d00c      	beq.n	8004b48 <UART_SetConfig+0x258>
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d815      	bhi.n	8004b60 <UART_SetConfig+0x270>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <UART_SetConfig+0x250>
 8004b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3c:	d008      	beq.n	8004b50 <UART_SetConfig+0x260>
 8004b3e:	e00f      	b.n	8004b60 <UART_SetConfig+0x270>
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b46:	e052      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b4e:	e04e      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b50:	2304      	movs	r3, #4
 8004b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b56:	e04a      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5e:	e046      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b60:	2310      	movs	r3, #16
 8004b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b66:	e042      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <UART_SetConfig+0x2dc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d13a      	bne.n	8004be8 <UART_SetConfig+0x2f8>
 8004b72:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <UART_SetConfig+0x2e4>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b80:	d01a      	beq.n	8004bb8 <UART_SetConfig+0x2c8>
 8004b82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b86:	d81b      	bhi.n	8004bc0 <UART_SetConfig+0x2d0>
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8c:	d00c      	beq.n	8004ba8 <UART_SetConfig+0x2b8>
 8004b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b92:	d815      	bhi.n	8004bc0 <UART_SetConfig+0x2d0>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <UART_SetConfig+0x2b0>
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9c:	d008      	beq.n	8004bb0 <UART_SetConfig+0x2c0>
 8004b9e:	e00f      	b.n	8004bc0 <UART_SetConfig+0x2d0>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ba6:	e022      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bae:	e01e      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e01a      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bbe:	e016      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	e012      	b.n	8004bee <UART_SetConfig+0x2fe>
 8004bc8:	cfff69f3 	.word	0xcfff69f3
 8004bcc:	40008000 	.word	0x40008000
 8004bd0:	40013800 	.word	0x40013800
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40004400 	.word	0x40004400
 8004bdc:	40004800 	.word	0x40004800
 8004be0:	40004c00 	.word	0x40004c00
 8004be4:	40005000 	.word	0x40005000
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4aae      	ldr	r2, [pc, #696]	; (8004eac <UART_SetConfig+0x5bc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	f040 8097 	bne.w	8004d28 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d823      	bhi.n	8004c4a <UART_SetConfig+0x35a>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <UART_SetConfig+0x318>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c4b 	.word	0x08004c4b
 8004c18:	08004c3b 	.word	0x08004c3b
 8004c1c:	08004c4b 	.word	0x08004c4b
 8004c20:	08004c4b 	.word	0x08004c4b
 8004c24:	08004c4b 	.word	0x08004c4b
 8004c28:	08004c43 	.word	0x08004c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2c:	f7fd fd66 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8004c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c32:	e010      	b.n	8004c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b9e      	ldr	r3, [pc, #632]	; (8004eb0 <UART_SetConfig+0x5c0>)
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c38:	e00d      	b.n	8004c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fd fcf1 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c40:	e009      	b.n	8004c56 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c48:	e005      	b.n	8004c56 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8130 	beq.w	8004ebe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	4a94      	ldr	r2, [pc, #592]	; (8004eb4 <UART_SetConfig+0x5c4>)
 8004c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	4413      	add	r3, r2
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d305      	bcc.n	8004c8e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d903      	bls.n	8004c96 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c94:	e113      	b.n	8004ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	2200      	movs	r2, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	60fa      	str	r2, [r7, #12]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	4a84      	ldr	r2, [pc, #528]	; (8004eb4 <UART_SetConfig+0x5c4>)
 8004ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2200      	movs	r2, #0
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cb8:	f7fb fea4 	bl	8000a04 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	020b      	lsls	r3, r1, #8
 8004cce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cd2:	0202      	lsls	r2, r0, #8
 8004cd4:	6979      	ldr	r1, [r7, #20]
 8004cd6:	6849      	ldr	r1, [r1, #4]
 8004cd8:	0849      	lsrs	r1, r1, #1
 8004cda:	2000      	movs	r0, #0
 8004cdc:	460c      	mov	r4, r1
 8004cde:	4605      	mov	r5, r0
 8004ce0:	eb12 0804 	adds.w	r8, r2, r4
 8004ce4:	eb43 0905 	adc.w	r9, r3, r5
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	469a      	mov	sl, r3
 8004cf0:	4693      	mov	fp, r2
 8004cf2:	4652      	mov	r2, sl
 8004cf4:	465b      	mov	r3, fp
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	f7fb fe83 	bl	8000a04 <__aeabi_uldivmod>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4613      	mov	r3, r2
 8004d04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0c:	d308      	bcc.n	8004d20 <UART_SetConfig+0x430>
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d14:	d204      	bcs.n	8004d20 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a3a      	ldr	r2, [r7, #32]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	e0ce      	b.n	8004ebe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d26:	e0ca      	b.n	8004ebe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	d166      	bne.n	8004e00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d827      	bhi.n	8004d8a <UART_SetConfig+0x49a>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x450>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d6d 	.word	0x08004d6d
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d8b 	.word	0x08004d8b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d8b 	.word	0x08004d8b
 8004d58:	08004d8b 	.word	0x08004d8b
 8004d5c:	08004d8b 	.word	0x08004d8b
 8004d60:	08004d83 	.word	0x08004d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7fd fcca 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d6a:	e014      	b.n	8004d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fd fcdc 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8004d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d72:	e010      	b.n	8004d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b4e      	ldr	r3, [pc, #312]	; (8004eb0 <UART_SetConfig+0x5c0>)
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d78:	e00d      	b.n	8004d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7fd fc51 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d80:	e009      	b.n	8004d96 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d88:	e005      	b.n	8004d96 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8090 	beq.w	8004ebe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	4a44      	ldr	r2, [pc, #272]	; (8004eb4 <UART_SetConfig+0x5c4>)
 8004da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004db0:	005a      	lsls	r2, r3, #1
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	441a      	add	r2, r3
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	2b0f      	cmp	r3, #15
 8004dc8:	d916      	bls.n	8004df8 <UART_SetConfig+0x508>
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd0:	d212      	bcs.n	8004df8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f023 030f 	bic.w	r3, r3, #15
 8004dda:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	8bfb      	ldrh	r3, [r7, #30]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	8bfa      	ldrh	r2, [r7, #30]
 8004df4:	60da      	str	r2, [r3, #12]
 8004df6:	e062      	b.n	8004ebe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dfe:	e05e      	b.n	8004ebe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d828      	bhi.n	8004e5a <UART_SetConfig+0x56a>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <UART_SetConfig+0x520>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e3d 	.word	0x08004e3d
 8004e18:	08004e45 	.word	0x08004e45
 8004e1c:	08004e5b 	.word	0x08004e5b
 8004e20:	08004e4b 	.word	0x08004e4b
 8004e24:	08004e5b 	.word	0x08004e5b
 8004e28:	08004e5b 	.word	0x08004e5b
 8004e2c:	08004e5b 	.word	0x08004e5b
 8004e30:	08004e53 	.word	0x08004e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e34:	f7fd fc62 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8004e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e3a:	e014      	b.n	8004e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e3c:	f7fd fc74 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8004e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e42:	e010      	b.n	8004e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e44:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <UART_SetConfig+0x5c0>)
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e48:	e00d      	b.n	8004e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4a:	f7fd fbe9 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 8004e4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e50:	e009      	b.n	8004e66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e58:	e005      	b.n	8004e66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e64:	bf00      	nop
    }

    if (pclk != 0U)
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d028      	beq.n	8004ebe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	4a10      	ldr	r2, [pc, #64]	; (8004eb4 <UART_SetConfig+0x5c4>)
 8004e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	441a      	add	r2, r3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	2b0f      	cmp	r3, #15
 8004e94:	d910      	bls.n	8004eb8 <UART_SetConfig+0x5c8>
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d20c      	bcs.n	8004eb8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60da      	str	r2, [r3, #12]
 8004ea8:	e009      	b.n	8004ebe <UART_SetConfig+0x5ce>
 8004eaa:	bf00      	nop
 8004eac:	40008000 	.word	0x40008000
 8004eb0:	00f42400 	.word	0x00f42400
 8004eb4:	080055b4 	.word	0x080055b4
      }
      else
      {
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004eda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3730      	adds	r7, #48	; 0x30
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01a      	beq.n	8004ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe6:	d10a      	bne.n	8004ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	605a      	str	r2, [r3, #4]
  }
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b098      	sub	sp, #96	; 0x60
 8005030:	af02      	add	r7, sp, #8
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800503c:	f7fc fb14 	bl	8001668 <HAL_GetTick>
 8005040:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d12f      	bne.n	80050b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f88e 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d022      	beq.n	80050b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507e:	653b      	str	r3, [r7, #80]	; 0x50
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005088:	647b      	str	r3, [r7, #68]	; 0x44
 800508a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800508e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e063      	b.n	8005178 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d149      	bne.n	8005152 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c6:	2200      	movs	r2, #0
 80050c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f857 	bl	8005180 <UART_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d03c      	beq.n	8005152 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	623b      	str	r3, [r7, #32]
   return(result);
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f6:	633b      	str	r3, [r7, #48]	; 0x30
 80050f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e6      	bne.n	80050d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	60fb      	str	r3, [r7, #12]
   return(result);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800512a:	61fa      	str	r2, [r7, #28]
 800512c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	69b9      	ldr	r1, [r7, #24]
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	617b      	str	r3, [r7, #20]
   return(result);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e012      	b.n	8005178 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2220      	movs	r2, #32
 800515e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3758      	adds	r7, #88	; 0x58
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005190:	e04f      	b.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d04b      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519a:	f7fc fa65 	bl	8001668 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e04e      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0304 	and.w	r3, r3, #4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d037      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b80      	cmp	r3, #128	; 0x80
 80051c6:	d034      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d031      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d110      	bne.n	80051fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2208      	movs	r2, #8
 80051e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f838 	bl	800525a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2208      	movs	r2, #8
 80051ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e029      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520c:	d111      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f81e 	bl	800525a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e00f      	b.n	8005252 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4013      	ands	r3, r2
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	429a      	cmp	r2, r3
 800524e:	d0a0      	beq.n	8005192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800525a:	b480      	push	{r7}
 800525c:	b095      	sub	sp, #84	; 0x54
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	643b      	str	r3, [r7, #64]	; 0x40
 8005282:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e6      	bne.n	8005262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3308      	adds	r3, #8
 80052b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e3      	bne.n	8005294 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d118      	bne.n	8005306 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f023 0310 	bic.w	r3, r3, #16
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6979      	ldr	r1, [r7, #20]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e6      	bne.n	80052d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	675a      	str	r2, [r3, #116]	; 0x74
}
 800531a:	bf00      	nop
 800531c:	3754      	adds	r7, #84	; 0x54
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_UARTEx_DisableFifoMode+0x16>
 8005338:	2302      	movs	r3, #2
 800533a:	e027      	b.n	800538c <HAL_UARTEx_DisableFifoMode+0x66>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2224      	movs	r2, #36	; 0x24
 8005348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0201 	bic.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800536a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e02d      	b.n	800540c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0201 	bic.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f84f 	bl	8005490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005428:	2302      	movs	r3, #2
 800542a:	e02d      	b.n	8005488 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f811 	bl	8005490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800549c:	2b00      	cmp	r3, #0
 800549e:	d108      	bne.n	80054b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054b0:	e031      	b.n	8005516 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054b2:	2308      	movs	r3, #8
 80054b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054b6:	2308      	movs	r3, #8
 80054b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	0e5b      	lsrs	r3, r3, #25
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	0f5b      	lsrs	r3, r3, #29
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	7b3a      	ldrb	r2, [r7, #12]
 80054de:	4911      	ldr	r1, [pc, #68]	; (8005524 <UARTEx_SetNbDataToProcess+0x94>)
 80054e0:	5c8a      	ldrb	r2, [r1, r2]
 80054e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054e6:	7b3a      	ldrb	r2, [r7, #12]
 80054e8:	490f      	ldr	r1, [pc, #60]	; (8005528 <UARTEx_SetNbDataToProcess+0x98>)
 80054ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	7b7a      	ldrb	r2, [r7, #13]
 80054fc:	4909      	ldr	r1, [pc, #36]	; (8005524 <UARTEx_SetNbDataToProcess+0x94>)
 80054fe:	5c8a      	ldrb	r2, [r1, r2]
 8005500:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005504:	7b7a      	ldrb	r2, [r7, #13]
 8005506:	4908      	ldr	r1, [pc, #32]	; (8005528 <UARTEx_SetNbDataToProcess+0x98>)
 8005508:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800550a:	fb93 f3f2 	sdiv	r3, r3, r2
 800550e:	b29a      	uxth	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	080055cc 	.word	0x080055cc
 8005528:	080055d4 	.word	0x080055d4

0800552c <memset>:
 800552c:	4402      	add	r2, r0
 800552e:	4603      	mov	r3, r0
 8005530:	4293      	cmp	r3, r2
 8005532:	d100      	bne.n	8005536 <memset+0xa>
 8005534:	4770      	bx	lr
 8005536:	f803 1b01 	strb.w	r1, [r3], #1
 800553a:	e7f9      	b.n	8005530 <memset+0x4>

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4d0d      	ldr	r5, [pc, #52]	; (8005574 <__libc_init_array+0x38>)
 8005540:	4c0d      	ldr	r4, [pc, #52]	; (8005578 <__libc_init_array+0x3c>)
 8005542:	1b64      	subs	r4, r4, r5
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	2600      	movs	r6, #0
 8005548:	42a6      	cmp	r6, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	4d0b      	ldr	r5, [pc, #44]	; (800557c <__libc_init_array+0x40>)
 800554e:	4c0c      	ldr	r4, [pc, #48]	; (8005580 <__libc_init_array+0x44>)
 8005550:	f000 f818 	bl	8005584 <_init>
 8005554:	1b64      	subs	r4, r4, r5
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	2600      	movs	r6, #0
 800555a:	42a6      	cmp	r6, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f855 3b04 	ldr.w	r3, [r5], #4
 8005564:	4798      	blx	r3
 8005566:	3601      	adds	r6, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f855 3b04 	ldr.w	r3, [r5], #4
 800556e:	4798      	blx	r3
 8005570:	3601      	adds	r6, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	080055e4 	.word	0x080055e4
 8005578:	080055e4 	.word	0x080055e4
 800557c:	080055e4 	.word	0x080055e4
 8005580:	080055e8 	.word	0x080055e8

08005584 <_init>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr

08005590 <_fini>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	bf00      	nop
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr
